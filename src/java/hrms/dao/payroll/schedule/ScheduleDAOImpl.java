/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package hrms.dao.payroll.schedule;

import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Chunk;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.ExceptionConverter;
import com.itextpdf.text.Font;
import com.itextpdf.text.Font.FontFamily;
import com.itextpdf.text.PageSize;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.Rectangle;
import com.itextpdf.text.TabSettings;
import com.itextpdf.text.pdf.CMYKColor;
import com.itextpdf.text.pdf.ColumnText;
import com.itextpdf.text.pdf.PdfContentByte;
import com.itextpdf.text.pdf.PdfDocument;
import com.itextpdf.text.pdf.PdfName;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfPage;
import com.itextpdf.text.pdf.PdfPageEventHelper;
import com.itextpdf.text.pdf.PdfWriter;
import hrms.SelectOption;
import hrms.common.CalendarCommonMethods;
import hrms.common.CommonFunctions;
import hrms.common.DataBaseFunctions;
import hrms.common.FooterPageEvent;
import hrms.common.Numtowordconvertion;
import hrms.common.PayrollCommonFunction;
import hrms.model.WaterRent;
import hrms.model.common.CommonReportParamBean;
import hrms.model.payroll.QuaterRent;
import hrms.model.payroll.SalaryBenefitiaryDetails;
import hrms.model.payroll.aqreport.AqFunctionalities;
import hrms.model.payroll.aqreport.BillAmtDetails;
import hrms.model.payroll.billbrowser.AllowDeductDetails;
import hrms.model.payroll.billbrowser.AquitanceDataAGBean;
import hrms.model.payroll.billbrowser.BillBean;
import hrms.model.payroll.billbrowser.BillChartOfAccount;
import hrms.model.payroll.billbrowser.BillObjectHead;
import hrms.model.payroll.billbrowser.MajorHeadAttribute;
import hrms.model.payroll.billbrowser.ReportList;
import hrms.model.payroll.schedule.AbsenteeStatementScheduleBean;
import hrms.model.payroll.schedule.AuditRecoveryBean;
import hrms.model.payroll.schedule.BankAcountScheduleBean;
import hrms.model.payroll.schedule.BeneficiaryListBean;
import hrms.model.payroll.schedule.BillBackPageBean;
import hrms.model.payroll.schedule.BillContributionRepotBean;
import hrms.model.payroll.schedule.BillFrontPageBean;
import hrms.model.payroll.schedule.CommonScheduleMethods;
import hrms.model.payroll.schedule.ComputerTokenReportBean;
import hrms.model.payroll.schedule.ConveyanceBean;
import hrms.model.payroll.schedule.ECScheduleBean;
import hrms.model.payroll.schedule.ECScheduleForm;
import hrms.model.payroll.schedule.ExcessPayBean;
import hrms.model.payroll.schedule.GPFScheduleBean;
import hrms.model.payroll.schedule.GisAndFaScheduleBean;
import hrms.model.payroll.schedule.HCScheduleBean;
import hrms.model.payroll.schedule.ItScheduleBean;
import hrms.model.payroll.schedule.LTCScheduleBean;
import hrms.model.payroll.schedule.LicScheduleBean;
import hrms.model.payroll.schedule.LicSchedulePolicyBean;
import hrms.model.payroll.schedule.LoanAdvanceScheduleBean;
import hrms.model.payroll.schedule.OTC84Bean;
import hrms.model.payroll.schedule.OtcForm82Bean;
import hrms.model.payroll.schedule.OtcFormBean;
import hrms.model.payroll.schedule.OtcPlanForm40Bean;
import hrms.model.payroll.schedule.PLIScheduleBean;
import hrms.model.payroll.schedule.PeriodicAbsenteeStmtBean;
import hrms.model.payroll.schedule.PrivateDeduction;
import hrms.model.payroll.schedule.PrivateLoanScheduleBean;
import hrms.model.payroll.schedule.PtScheduleBean;
import hrms.model.payroll.schedule.RTIScheduleBean;
import hrms.model.payroll.schedule.ReceiptRecoveryScheduleBean;
import hrms.model.payroll.schedule.ReceiptRecoveryScheduleForm;
import hrms.model.payroll.schedule.Schedule;
import hrms.model.payroll.schedule.ScheduleHelper;
import hrms.model.payroll.schedule.SecondScheduleBean;
import hrms.model.payroll.schedule.TPFEmployeeScheduleBean;
import hrms.model.payroll.schedule.ThirdScheduleBean;
import hrms.model.payroll.schedule.VacancyStatementScheduleBean;
import hrms.model.payroll.schedule.VehicleScheduleBean;
import hrms.model.payroll.schedule.VoucherSlipBean;
import hrms.model.payroll.schedule.WrrScheduleBean;
import hrms.model.payroll.tpfschedule.TPFScheduleBean;
import hrms.model.payroll.tpfschedule.TpfTypeBean;
import hrms.model.qtrallotment.QuarterPool;
import java.io.File;
import java.io.FileOutputStream;
import java.io.OutputStream;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.sql.Timestamp;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collections;
import java.util.Date;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.StringTokenizer;
import java.util.Vector;
import javax.annotation.Resource;
import javax.sql.DataSource;
import javax.xml.soap.Text;
import jxl.format.Alignment;
import jxl.format.Border;
import jxl.format.BorderLineStyle;
import jxl.format.VerticalAlignment;
import jxl.write.Label;
import jxl.write.NumberFormats;
import jxl.write.WritableCellFormat;
import jxl.write.WritableFont;
import jxl.write.WritableSheet;
import jxl.write.WritableWorkbook;
import org.apache.commons.lang.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.web.servlet.ModelAndView;

@Service
public class ScheduleDAOImpl implements ScheduleDAO {

    @Resource(name = "dataSource")
    protected DataSource dataSource;

    @Resource(name = "repodataSource")
    protected DataSource repodataSource;

    public void setDataSource(DataSource dataSource) {
        this.dataSource = dataSource;
    }

    public void setRepodataSource(DataSource repodataSource) {
        this.repodataSource = repodataSource;
    }

    public ScheduleDAO comonScheduleDao;

    public void setComonScheduleDao(ScheduleDAO comonScheduleDao) {
        this.comonScheduleDao = comonScheduleDao;
    }
    public PayBillDMPDAO paybillDmpDao;

    public void setPaybillDmpDao(PayBillDMPDAO paybillDmpDao) {
        this.paybillDmpDao = paybillDmpDao;
    }

    @Override
    public List getDisplayReportList(String billNo, String billType, String reportToDisplay, int year, int month) {
        List list = new ArrayList();
        ResultSet rs = null;
        Connection con = null;
        PreparedStatement pstmt = null;
        Map<String, String> reqRepo = new HashMap<String, String>();

        try {
            con = dataSource.getConnection();

            if (reportToDisplay != null && !reportToDisplay.equals("")) {
                String[] strArr = reportToDisplay.split(",");
                for (int i = 0; i < strArr.length; i++) {
                    reqRepo.put(strArr[i], strArr[i]);
                }

            }
            int mapSize = reqRepo.size();
            if (billType.contains("ARREAR")) {
                pstmt = con.prepareStatement("Select *,report_ref_slno,unsigned_pdf_path,signed_pdf_path,id_esign_log,unsigned_pdf_file,signed_pdf_file from G_SCHEDULE "
                        + " LEFT OUTER JOIN esign_log ON esign_log.report_ref_slno=G_SCHEDULE.SL_NO AND esign_log.bill_no=? "
                        + " where HAVEREPORT='Y' AND BILL_TYPE=? AND BILL_FOR='R' order by sl_no");
                pstmt.setInt(1, Integer.parseInt(billNo));
                pstmt.setString(2, billType);
                rs = pstmt.executeQuery();
                ReportList rlhb = null;
                while (rs.next()) {
                    rlhb = new ReportList();
                    rlhb.setSlNo(rs.getString("SL_NO"));
                    rlhb.setReportName(rs.getString("SCHEDULE_DESC"));

                    if (rs.getString("REPORT_PATH") != null && !rs.getString("REPORT_PATH").equals("")) {
                        rlhb.setActionPath(rs.getString("REPORT_PATH") + "billNo=" + billNo);
                    } else {
                        rlhb.setActionPath("");
                    }

                    if (rs.getString("PDF_PATH") != null && !rs.getString("PDF_PATH").equals("")) {
                        rlhb.setPdfLink(rs.getString("PDF_PATH") + "billNo=" + billNo);
                    } else {
                        rlhb.setPdfLink("");
                    }
                    rlhb.setHidePrintOption(rs.getString("HIDE_PRINT_LINK"));

                    if (rs.getString("report_ref_slno") != null && !rs.getString("report_ref_slno").equals("")) {
                        rlhb.setReportRefSlno(rs.getString("report_ref_slno"));
                    } else {
                        rlhb.setReportRefSlno("");
                    }
                    if (rs.getString("unsigned_pdf_path") != null && !rs.getString("unsigned_pdf_path").equals("")) {
                        rlhb.setUnsignedpdfPath(rs.getString("unsigned_pdf_path") + File.separator + rs.getString("unsigned_pdf_file"));
                    } else {
                        rlhb.setUnsignedpdfPath("");
                    }
                    if (rs.getString("signed_pdf_path") != null && !rs.getString("signed_pdf_path").equals("")) {
                        rlhb.setSignedpdfpath(rs.getString("signed_pdf_path") + File.separator + rs.getString("signed_pdf_file"));
                    } else {
                        rlhb.setSignedpdfpath("");
                    }
                    if (rs.getString("id_esign_log") != null && !rs.getString("id_esign_log").equals("")) {
                        rlhb.setEsignLogId(rs.getString("id_esign_log"));
                    } else {
                        rlhb.setSignedpdfpath("");
                    }

                    if (billType.equalsIgnoreCase("PAY")) {
                        if (mapSize > 0) {
                            if (reqRepo.containsKey(rs.getString("SL_NO"))) {
                                list.add(rlhb);
                            }
                        } else {
                            list.add(rlhb);
                        }
                    } else {
                        list.add(rlhb);
                    }
                }
            } else {
                // System.out.println("billType==="+billType);
                //pstmt = con.prepareStatement("Select * from G_SCHEDULE  where HAVEREPORT='Y' AND BILL_TYPE =? AND BILL_FOR='R' order by sl_no");
                pstmt = con.prepareStatement("Select *,report_ref_slno,unsigned_pdf_path,signed_pdf_path,id_esign_log,unsigned_pdf_file,signed_pdf_file from G_SCHEDULE"
                        + " LEFT OUTER JOIN esign_log ON esign_log.report_ref_slno=G_SCHEDULE.SL_NO AND esign_log.bill_no=? "
                        + " where HAVEREPORT='Y' AND G_SCHEDULE.BILL_TYPE =? AND BILL_FOR='R' and ref_ad_code is null order by sl_no");
                pstmt.setInt(1, Integer.parseInt(billNo));
                pstmt.setString(2, billType);
                rs = pstmt.executeQuery();
                ReportList rlhb = null;
                while (rs.next()) {
                    rlhb = new ReportList();
                    rlhb.setSlNo(rs.getString("SL_NO"));
                    //  System.out.println("SL_NO==="+rs.getString("SL_NO"));
                    rlhb.setReportName(rs.getString("SCHEDULE_DESC"));
                    // System.out.println("SCHEDULE_DESC==="+rs.getString("SCHEDULE_DESC"));

                    if (rs.getString("REPORT_PATH") != null && !rs.getString("REPORT_PATH").equals("")) {
                        rlhb.setActionPath(rs.getString("REPORT_PATH") + "billNo=" + billNo);
                    } else {
                        rlhb.setActionPath("");
                    }

                    if (rs.getString("PDF_PATH") != null && !rs.getString("PDF_PATH").equals("")) {
                        rlhb.setPdfLink(rs.getString("PDF_PATH") + "billNo=" + billNo);
                    } else {
                        rlhb.setPdfLink("");
                    }
                    rlhb.setHidePrintOption(rs.getString("HIDE_PRINT_LINK"));
                    if (rs.getString("report_ref_slno") != null && !rs.getString("report_ref_slno").equals("")) {
                        //  System.out.println("report_ref_slno===="+);
                        rlhb.setReportRefSlno(rs.getString("report_ref_slno"));
                    } else {
                        rlhb.setReportRefSlno("");
                    }
                    if (rs.getString("unsigned_pdf_path") != null && !rs.getString("unsigned_pdf_path").equals("")) {
                        rlhb.setUnsignedpdfPath(rs.getString("unsigned_pdf_path") + File.separator + rs.getString("unsigned_pdf_file"));
                    } else {
                        rlhb.setUnsignedpdfPath("");
                    }
                    if (rs.getString("signed_pdf_path") != null && !rs.getString("signed_pdf_path").equals("")) {
                        rlhb.setSignedpdfpath(rs.getString("signed_pdf_path") + File.separator + rs.getString("signed_pdf_file"));
                    } else {
                        rlhb.setSignedpdfpath("");
                    }
                    if (rs.getString("id_esign_log") != null && !rs.getString("id_esign_log").equals("")) {
                        rlhb.setEsignLogId(rs.getString("id_esign_log"));
                    } else {
                        rlhb.setSignedpdfpath("");
                    }
                    if (billType.equalsIgnoreCase("PAY")) {
                        if (mapSize > 0) {
                            if (reqRepo.containsKey(rs.getString("SL_NO"))) {
                                list.add(rlhb);
                            }
                        } else {
                            list.add(rlhb);
                        }
                    } else {
                        list.add(rlhb);
                    }
                }

                DataBaseFunctions.closeSqlObjects(rs, pstmt);

                String aqdtlsTbl = hrms.common.AqFunctionalities.getAQBillDtlsTable(month, year);

                List billadcodelist = new ArrayList();
                pstmt = con.prepareStatement("select ad_code from aq_mast"
                        + " inner join " + aqdtlsTbl + " aq_dtls on aq_mast.aqsl_no=aq_dtls.aqsl_no"
                        + " where bill_no=? and ad_amt>0"
                        + " group by ad_code order by ad_code");
                pstmt.setInt(1, Integer.parseInt(billNo));
                rs = pstmt.executeQuery();
                while (rs.next()) {
                    String adcode = rs.getString("ad_code");
                    if (!billadcodelist.contains("GPF") && (adcode.equals("GPF") || adcode.equals("GA"))) {
                        billadcodelist.add("GPF");
                    } else if (!billadcodelist.contains("TPF") && (adcode.equals("TPF") || adcode.equals("TPFGA"))) {
                        billadcodelist.add("TPF");
                    } else {
                        billadcodelist.add(adcode);
                    }
                }

                DataBaseFunctions.closeSqlObjects(rs, pstmt);

                //pstmt = con.prepareStatement("Select * from G_SCHEDULE where HAVEREPORT='Y' AND BILL_TYPE =? AND BILL_FOR='R' and ref_ad_code is not null order by sl_no");
                pstmt = con.prepareStatement("Select *,report_ref_slno,unsigned_pdf_path,signed_pdf_path,id_esign_log,unsigned_pdf_file,signed_pdf_file from G_SCHEDULE "
                        + "  LEFT OUTER JOIN esign_log ON esign_log.report_ref_slno=G_SCHEDULE.SL_NO AND esign_log.bill_no=? "
                        + "  where HAVEREPORT='Y' AND BILL_TYPE =? AND BILL_FOR='R' and ref_ad_code is not null order by sl_no");
                pstmt.setInt(1, Integer.parseInt(billNo));
                pstmt.setString(2, billType);
                //  pstmt.setString(1, billType);
                rs = pstmt.executeQuery();
                rlhb = null;
                while (rs.next()) {
                    String refadcode = rs.getString("ref_ad_code");
                    if (billadcodelist.contains(refadcode)) {
                        rlhb = new ReportList();
                        rlhb.setSlNo(rs.getString("SL_NO"));
                        rlhb.setReportName(rs.getString("SCHEDULE_DESC"));

                        if (rs.getString("REPORT_PATH") != null && !rs.getString("REPORT_PATH").equals("")) {
                            rlhb.setActionPath(rs.getString("REPORT_PATH") + "billNo=" + billNo);
                        } else {
                            rlhb.setActionPath("");
                        }

                        if (rs.getString("PDF_PATH") != null && !rs.getString("PDF_PATH").equals("")) {
                            rlhb.setPdfLink(rs.getString("PDF_PATH") + "billNo=" + billNo);
                        } else {
                            rlhb.setPdfLink("");
                        }
                        rlhb.setHidePrintOption(rs.getString("HIDE_PRINT_LINK"));
                        if (rs.getString("unsigned_pdf_path") != null && !rs.getString("unsigned_pdf_path").equals("")) {
                            rlhb.setUnsignedpdfPath(rs.getString("unsigned_pdf_path") + File.separator + rs.getString("unsigned_pdf_file"));
                        } else {
                            rlhb.setUnsignedpdfPath("");
                        }
                        if (rs.getString("signed_pdf_path") != null && !rs.getString("signed_pdf_path").equals("")) {
                            rlhb.setSignedpdfpath(rs.getString("signed_pdf_path") + File.separator + rs.getString("signed_pdf_file"));
                        } else {
                            rlhb.setSignedpdfpath("");
                        }
                        if (rs.getString("id_esign_log") != null && !rs.getString("id_esign_log").equals("")) {
                            rlhb.setEsignLogId(rs.getString("id_esign_log"));
                        } else {
                            rlhb.setSignedpdfpath("");
                        }
                        if (rs.getString("report_ref_slno") != null && !rs.getString("report_ref_slno").equals("")) {
                            //  System.out.println("report_ref_slno===="+);
                            rlhb.setReportRefSlno(rs.getString("report_ref_slno"));
                        } else {
                            rlhb.setReportRefSlno("");
                        }

                        if (billType.equalsIgnoreCase("PAY")) {
                            if (mapSize > 0) {
                                if (reqRepo.containsKey(rs.getString("SL_NO"))) {
                                    list.add(rlhb);
                                }
                            } else {
                                list.add(rlhb);
                            }
                        } else {
                            list.add(rlhb);
                        }

                    }
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            DataBaseFunctions.closeSqlObjects(rs, pstmt);
            DataBaseFunctions.closeSqlObjects(con);
        }
        return list;
    }

    @Override
    public QuaterRent[] getRentData(int month, int year) {
        List<QuaterRent> rentdata = new ArrayList();
        Connection conn = null;
        ResultSet result = null;
        PreparedStatement statement = null;
        try {
            conn = dataSource.getConnection();
            String SQL = "select hrmsid,gpfno,ddocode,hra,wtax,swtax,dt_realn,tvno,tvdate,HRMS_EQUATER_DATA.dos,f_name,m_name,l_name,mobile,dob,quarter_no from HRMS_EQUATER_DATA INNER JOIN EMP_MAST ON HRMS_EQUATER_DATA.hrmsid= EMP_MAST.emp_id where aq_month=? and aq_year=?";
            statement = conn.prepareStatement(SQL);
            statement.setInt(1, month - 1);
            statement.setInt(2, year);
            result = statement.executeQuery();
            while (result.next()) {
                QuaterRent qRent = new QuaterRent();
                qRent.setHrmsid(result.getString("hrmsid"));
                qRent.setGpfno(result.getString("gpfno"));
                qRent.setDdocode(result.getString("ddocode"));
                qRent.setHra(result.getInt("hra"));
                qRent.setWtax(result.getInt("wtax"));
                qRent.setSwtax(result.getInt("swtax"));
                qRent.setDateOfRealn(result.getString("dt_realn"));
                qRent.setTvno(result.getString("tvno"));
                qRent.setTvdate(result.getString("tvdate"));
                qRent.setDos(result.getString("dos"));
                qRent.setDob(result.getString("dob"));
                qRent.setFname(result.getString("f_name"));
                qRent.setMname(result.getString("m_name"));
                qRent.setLname(result.getString("l_name"));
                qRent.setMobile(result.getString("mobile"));
                qRent.setQuarterNo(result.getString("quarter_no"));
                rentdata.add(qRent);
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {

            DataBaseFunctions.closeSqlObjects(result, statement);
            DataBaseFunctions.closeSqlObjects(conn);

        }

        QuaterRent quaterRent[] = rentdata.toArray(new QuaterRent[rentdata.size()]);
        return quaterRent;
    }

    @Override
    public WaterRent[] getWaterRentData(int month, int year, String ddocode) {
        List<WaterRent> rentdata = new ArrayList();
        Connection conn = null;
        ResultSet result = null;
        PreparedStatement statement = null;
        try {
            conn = dataSource.getConnection();
            String SQL = "select hrmsid,gpfno,ddocode,hra,wtax,swtax,dt_realn,tvno,tvdate,HRMS_EQUATER_DATA.dos,f_name,m_name,l_name,mobile,dob"
                    + ",quarter_no,consumerno,bldg_no,qrtr_type,qrtr_unit from HRMS_EQUATER_DATA "
                    + "INNER JOIN EMP_MAST ON HRMS_EQUATER_DATA.hrmsid= EMP_MAST.emp_id where aq_month=? and aq_year=? and ddocode=?";
            statement = conn.prepareStatement(SQL);
            statement.setInt(1, month - 1);
            statement.setInt(2, year);
            statement.setString(3, ddocode);
            result = statement.executeQuery();
            while (result.next()) {
                WaterRent wRent = new WaterRent();
                wRent.setHrmsid(result.getString("hrmsid"));
                wRent.setGpfno(result.getString("gpfno"));
                wRent.setWtax(result.getInt("wtax"));
                wRent.setSwtax(result.getInt("swtax"));
                wRent.setTvno(result.getString("tvno"));
                wRent.setTvdate(result.getString("tvdate"));
                wRent.setFname(result.getString("f_name"));
                wRent.setMname(result.getString("m_name"));
                wRent.setLname(result.getString("l_name"));
                wRent.setMobile(result.getString("mobile"));
                wRent.setQuarterNo(result.getString("bldg_no"));
                wRent.setQrtrtype(result.getString("qrtr_type"));
                wRent.setQrtrunit(result.getString("qrtr_unit"));
                wRent.setConsumerNo(result.getString("consumerno"));
                rentdata.add(wRent);
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {

            DataBaseFunctions.closeSqlObjects(result, statement);
            DataBaseFunctions.closeSqlObjects(conn);

        }
        WaterRent waterRent[] = rentdata.toArray(new WaterRent[rentdata.size()]);
        return waterRent;
    }

    @Override
    public WaterRent[] getWaterRentData(String empid) {
        List<WaterRent> rentdata = new ArrayList();
        Connection conn = null;
        ResultSet result = null;
        PreparedStatement statement = null;
        try {
            conn = dataSource.getConnection();
            String SQL = "select hrmsid,gpfno,ddocode,hra,wtax,swtax,dt_realn,tvno,to_char(tvdate,'DD-MM-YYYY') as tvdate,HRMS_EQUATER_DATA.dos,"
                    + "f_name,m_name,l_name,mobile,dob,bldg_no,consumerno,qrtr_unit,qrtr_type,off_en,date_of_allotment,aq_month,aq_year from HRMS_EQUATER_DATA "
                    + "INNER JOIN EMP_MAST ON HRMS_EQUATER_DATA.hrmsid= EMP_MAST.emp_id where HRMS_EQUATER_DATA.hrmsid=? ORDER BY aq_year DESC, aq_month DESC";
            statement = conn.prepareStatement(SQL);
            statement.setString(1, empid);
            result = statement.executeQuery();
            while (result.next()) {
                WaterRent wRent = new WaterRent();
                wRent.setHrmsid(result.getString("hrmsid"));
                wRent.setGpfno(result.getString("gpfno"));
                wRent.setWtax(result.getInt("wtax"));
                wRent.setSwtax(result.getInt("swtax"));
                wRent.setTvno(result.getString("tvno"));
                wRent.setTvdate(result.getString("tvdate"));
                wRent.setFname(result.getString("f_name"));
                wRent.setMname(result.getString("m_name"));
                wRent.setLname(result.getString("l_name"));
                wRent.setMobile(result.getString("mobile"));
                wRent.setConsumerNo(result.getString("consumerno"));
                wRent.setDdocode(result.getString("ddocode"));
                wRent.setOfficename(result.getString("off_en"));
                wRent.setRecoverymonth((result.getInt("aq_month") + 1) + "");
                wRent.setRecoveryyear(result.getInt("aq_year") + "");
                wRent.setQuarterNo(result.getString("bldg_no"));
                wRent.setQrtrtype(result.getString("qrtr_type"));
                wRent.setQrtrunit(result.getString("qrtr_unit"));
                wRent.setOfficename(result.getString("off_en"));
                wRent.setDateofallotment(result.getString("date_of_allotment"));
                rentdata.add(wRent);
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            DataBaseFunctions.closeSqlObjects(result, statement);
            DataBaseFunctions.closeSqlObjects(conn);
        }
        WaterRent waterRent[] = rentdata.toArray(new WaterRent[rentdata.size()]);
        return waterRent;
    }

    @Override
    public WaterRent[] getWaterRentData(int month, int year) {
        List<WaterRent> rentdata = new ArrayList();
        Connection conn = null;
        ResultSet result = null;
        PreparedStatement statement = null;
        try {
            conn = dataSource.getConnection();
            String SQL = "select hrmsid,gpfno,ddocode,hra,wtax,swtax,dt_realn,tvno,to_char(tvdate,'DD-MM-YYYY') as tvdate,HRMS_EQUATER_DATA.dos,"
                    + "f_name,m_name,l_name,mobile,dob,bldg_no,consumerno,qrtr_unit,qrtr_type,off_en,date_of_allotment from HRMS_EQUATER_DATA "
                    + "INNER JOIN EMP_MAST ON HRMS_EQUATER_DATA.hrmsid= EMP_MAST.emp_id where aq_month=? and aq_year=?";
            statement = conn.prepareStatement(SQL);
            statement.setInt(1, month - 1);
            statement.setInt(2, year);
            result = statement.executeQuery();
            while (result.next()) {
                WaterRent wRent = new WaterRent();
                wRent.setHrmsid(result.getString("hrmsid"));
                wRent.setGpfno(result.getString("gpfno"));
                wRent.setWtax(result.getInt("wtax"));
                wRent.setSwtax(result.getInt("swtax"));
                wRent.setTvno(result.getString("tvno"));
                wRent.setTvdate(result.getString("tvdate"));
                wRent.setFname(result.getString("f_name"));
                wRent.setMname(result.getString("m_name"));
                wRent.setLname(result.getString("l_name"));
                wRent.setMobile(result.getString("mobile"));
                wRent.setConsumerNo(result.getString("consumerno"));
                wRent.setDdocode(result.getString("ddocode"));
                wRent.setOfficename(result.getString("off_en"));
                wRent.setRecoverymonth(month + "");
                wRent.setRecoveryyear(year + "");
                wRent.setQuarterNo(result.getString("bldg_no"));
                wRent.setQrtrtype(result.getString("qrtr_type"));
                wRent.setQrtrunit(result.getString("qrtr_unit"));
                wRent.setOfficename(result.getString("off_en"));
                wRent.setDateofallotment(result.getString("date_of_allotment"));
                rentdata.add(wRent);
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {

            DataBaseFunctions.closeSqlObjects(result, statement);
            DataBaseFunctions.closeSqlObjects(conn);

        }
        WaterRent waterRent[] = rentdata.toArray(new WaterRent[rentdata.size()]);
        return waterRent;
    }

    @Override
    public GPFScheduleBean getGPFScheduleHeaderDetails(String billno) {
        Connection con = null;
        Statement stmt = null;
        ResultSet rs = null;
        GPFScheduleBean gpfBean = new GPFScheduleBean();
        int month = 0;
        String year = "";
        try {
            con = this.repodataSource.getConnection();

            stmt = con.createStatement();
            PayrollCommonFunction prcf = new PayrollCommonFunction();
            CommonReportParamBean bean = prcf.getCommonReportParameter(con, billno);

            gpfBean.setOfficeName(bean.getOfficeen());
            gpfBean.setDdoDesg(bean.getDdoname());
            gpfBean.setBillDesc(bean.getBilldesc());
            gpfBean.setBillNo(billno);

            rs = stmt.executeQuery("SELECT AQ_MONTH, AQ_YEAR FROM BILL_MAST WHERE BILL_NO = '" + billno + "'");
            if (rs.next()) {
                month = rs.getInt("AQ_MONTH");
                gpfBean.setBillMonth(CalendarCommonMethods.getFullMonthAsString(month));
                gpfBean.setBillYear(rs.getString("AQ_YEAR"));
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            DataBaseFunctions.closeSqlObjects(rs, stmt);
            DataBaseFunctions.closeSqlObjects(con);
        }
        return gpfBean;
    }

    @Override
    public List getGPFScheduleAbstractList(String billno, int aqmonth, int aqyear) {

        Connection con = null;
        Statement stmt = null;
        ResultSet rs = null;

        ArrayList gpfAbstractList = new ArrayList();
        GPFScheduleBean gpfBean = null;
        String aqDtlsTbl = "";

        try {
            con = dataSource.getConnection();
            stmt = con.createStatement();

            aqDtlsTbl = getAqDtlsTableName(billno);
            String gpfAbstQry1 = "SELECT gpf_type, sum(ad_amt) amt FROM AQ_MAST AM INNER JOIN " + aqDtlsTbl + " AD on AM.aqsl_no = AD.aqsl_no WHERE BILL_NO='" + billno + "' "
                    + " AND AM.aq_month=" + aqmonth + " AND AM.aq_year=" + aqyear + " AND ((AD_CODE='GPF' and DED_TYPE='S') or (AD_CODE='GA' AND DED_TYPE='L') or (AD_CODE='GPDD' AND DED_TYPE='S') or "
                    + " (AD_CODE='GPIR' AND DED_TYPE='S')) group by gpf_type order by gpf_type";

            rs = stmt.executeQuery(gpfAbstQry1);
            while (rs.next()) {
                gpfBean = new GPFScheduleBean();

                gpfBean.setGpfType(rs.getString("GPF_TYPE"));
                gpfBean.setTotalAmount(rs.getString("amt"));

                gpfAbstractList.add(gpfBean);
            }

        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            DataBaseFunctions.closeSqlObjects(rs, stmt);
            DataBaseFunctions.closeSqlObjects(con);
        }
        return gpfAbstractList;
    }

    @Override
    public List getGPFScheduleTypeList(String billno, int aqmonth, int aqyear) {

        Connection con = null;
        PreparedStatement pst = null;
        ResultSet rs = null;
        ArrayList gpfTypeList = new ArrayList();
        ScheduleHelper scHelperBean = null;
        int pageno = 0;
        try {
            con = dataSource.getConnection();

            int releaseTot = 0;
            String releaseTotFig = null;
            String gpfQry = "SELECT GPF_TYPE FROM AQ_MAST WHERE BILL_NO=? AND GPF_TYPE IS NOT NULL  AND aq_month=? AND aq_year=? GROUP BY GPF_TYPE ORDER BY GPF_TYPE";
            pst = con.prepareStatement(gpfQry);
            pst.setInt(1, Integer.parseInt(billno));
            pst.setInt(2, aqmonth);
            pst.setInt(3, aqyear);
            rs = pst.executeQuery();

            while (rs.next()) {
                pageno += 1;
                releaseTot = 0;
                scHelperBean = new ScheduleHelper();
                String gpfType = rs.getString("GPF_TYPE");
                scHelperBean.setGpfType(gpfType);
                scHelperBean.setPageheaderparent(reportPageHeader(con, "GPF", gpfType, billno, null) + "");
                ArrayList al = getEmpGpfDetails(gpfType, billno, con, scHelperBean);
                scHelperBean.setHelperList(al);

                GPFScheduleBean obj1 = null;
                if (al != null && al.size() > 0) {
                    obj1 = new GPFScheduleBean();
                    for (int i = 0; i < al.size(); i++) {
                        obj1 = (GPFScheduleBean) al.get(i);
                        releaseTot = releaseTot + obj1.getTotalReleased();
                        releaseTotFig = Numtowordconvertion.convertNumber((int) releaseTot);
                    }
                }
                scHelperBean.setReleaseTot(releaseTot);
                scHelperBean.setReleaseTotFig(releaseTotFig);
                scHelperBean.setEmpNo(scHelperBean.getHelperList().size());
                scHelperBean.setPagebreakparent("<input type=\"button\" name=\"pagebreak1\" style=\"page-break-before: always;width: 0;height: 0\"/>");
                gpfTypeList.add(scHelperBean);
            }

        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            DataBaseFunctions.closeSqlObjects(rs, pst);
            DataBaseFunctions.closeSqlObjects(con);
        }
        return gpfTypeList;
    }

    @Override
    public PrivateLoanScheduleBean getPrivateLoanScheduleDetails(String billno) {
        Connection con = null;
        Statement stmt = null;
        ResultSet rs = null;
        PrivateLoanScheduleBean loanBean = new PrivateLoanScheduleBean();

        String year = "";
        String month = "";
        String billdesc = "";
        String billdate = "";
        String ddoacctno = "";

        try {
            con = dataSource.getConnection();
            stmt = con.createStatement();
            PayrollCommonFunction prcf = new PayrollCommonFunction();
            CommonReportParamBean bean = prcf.getCommonReportParameter(con, billno);

            String loanQry = "SELECT AQ_MONTH,AQ_YEAR,BILL_DESC,BILL_DATE,DDO_CUR_ACC_NO FROM(SELECT AQ_MONTH,AQ_YEAR,BILL_DESC,BILL_DATE,OFF_CODE FROM "
                    + "BILL_MAST WHERE BILL_NO='" + billno + "')BILLMAST INNER JOIN G_OFFICE ON BILLMAST.OFF_CODE = G_OFFICE.OFF_CODE";

            rs = stmt.executeQuery(loanQry);
            if (rs.next()) {
                year = rs.getString("AQ_YEAR");
                month = rs.getString("AQ_MONTH");
                billdesc = rs.getString("BILL_DESC");
                ddoacctno = rs.getString("DDO_CUR_ACC_NO");
                if (rs.getString("BILL_DATE") != null && !rs.getString("BILL_DATE").equals("")) {
                    billdate = CommonFunctions.getFormattedOutputDate1(rs.getDate("BILL_DATE"));
                }
            }
            loanBean.setOfficeName(bean.getOfficename());
            loanBean.setBillDesc(billdesc);
            loanBean.setYear(bean.getAqyear());
            loanBean.setMonth(new CalendarCommonMethods().getMonthAsString(bean.getAqmonth()));
            loanBean.setDdoAccountNo(ddoacctno);

        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            DataBaseFunctions.closeSqlObjects(rs, stmt);
            DataBaseFunctions.closeSqlObjects(con);
        }
        return loanBean;
    }

    @Override
    public List getCmrfScheduleEmpDetails(String billno, int aqMonth, int aqYear) {
        Connection con = null;
        Statement stmt = null;
        ResultSet rs = null;

        ArrayList ploanScheduleList = new ArrayList();
        ScheduleHelper scHelperBean = null;
        PrivateLoanScheduleBean loanBean = null;
        ArrayList amtList = null;
        int slno = 1;
        int deductAmt = 0;

        String aqDTLS = "";
        try {
            con = dataSource.getConnection();
            stmt = con.createStatement();

            aqDTLS = getAqDtlsTableName(billno);
            String pLoanQry = "                    select aq_mast.emp_code, emp_name, cur_desg, ad_amt, AD_DESC from aq_mast "
                    + "                    inner join " + aqDTLS + " aq_dtls on aq_mast.aqsl_no=aq_dtls.aqsl_no "
                    + "                    where aq_mast.bill_no=" + billno + "  and aq_mast.aq_year=" + aqYear + " and aq_mast.aq_month=" + aqMonth + "  and aq_dtls.ad_code='CMRF' and aq_dtls.ad_amt>0\n"
                    + "                    ORDER BY POST_SL_NO";
            rs = stmt.executeQuery(pLoanQry);
            while (rs.next()) {
                if (rs.getString("EMP_NAME") != null && !rs.getString("EMP_NAME").equals("")) {
                    amtList = new ArrayList();
                    scHelperBean = new ScheduleHelper();

                    scHelperBean.setSlno(slno);
                    slno = slno + 1;
                    scHelperBean.setEmpname(rs.getString("EMP_NAME"));
                    scHelperBean.setEmpdesg(rs.getString("CUR_DESG"));

                    loanBean = new PrivateLoanScheduleBean();
                    int dedAmt = rs.getInt("AD_AMT");
                    deductAmt = deductAmt + dedAmt;
                    scHelperBean.setPageTotalPLS(String.valueOf(deductAmt));
                    loanBean.setDeductedAmt(dedAmt);
                    loanBean.setDeductedAmtDesc(rs.getString("AD_DESC"));
                    amtList.add(loanBean);

                    scHelperBean.setHelperList(amtList);
                    scHelperBean.setDeductAmt(deductAmt);

                    if (slno % 20 == 0) {
                        scHelperBean.setPagebreakPLS("<input type=\"button\" name=\"pagebreak1\" style=\"page-break-before: always;width: 0;height: 0\"/>");
                        scHelperBean.setPageHeaderPLS(reportPageHeader(con, "PLS", null, billno, "") + "");
                    } else {
                        scHelperBean.setPagebreakPLS("");
                        scHelperBean.setPageHeaderPLS("");
                    }

                    ploanScheduleList.add(scHelperBean);
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            DataBaseFunctions.closeSqlObjects(rs, stmt);
            DataBaseFunctions.closeSqlObjects(con);
        }
        return ploanScheduleList;
    }

    @Override
    public List getPrivateLoanScheduleEmpDetails(String billno, int aqMonth, int aqYear) {

        Connection con = null;
        Statement stmt = null;
        ResultSet rs = null;
        Statement stmt1 = null;
        ResultSet rs1 = null;

        ArrayList ploanScheduleList = new ArrayList();
        ScheduleHelper scHelperBean = null;
        PrivateLoanScheduleBean loanBean = null;
        ArrayList amtList = null;
        int slno = 1;
        int deductAmt = 0;
        String empcode = "";
        String aqslno = "";
        String aqDTLS = "";
        try {
            con = dataSource.getConnection();
            stmt = con.createStatement();
            stmt1 = con.createStatement();

            aqDTLS = getAqDtlsTableName(billno);
            String pLoanQry = "select aq_mast.EMP_CODE,aq_mast.AQSL_NO,EMP_NAME,CUR_DESG from aq_mast"
                    + " inner join " + aqDTLS + " on aq_mast.emp_code=" + aqDTLS + ".emp_code where "
                    + "BILL_NO='" + billno + "' and aq_mast.aq_year=" + aqYear + " and aq_mast.aq_month=" + aqMonth + " and ad_code<>'CMRF' and (" + aqDTLS + ".SCHEDULE='PVTL' OR " + aqDTLS + ".SCHEDULE='PVTD') "
                    + "AND " + aqDTLS + ".AD_TYPE='D' and ad_amt>0 group by aq_mast.EMP_CODE,aq_mast.AQSL_NO,EMP_NAME,CUR_DESG ORDER BY POST_SL_NO";
            rs = stmt.executeQuery(pLoanQry);
            while (rs.next()) {
                if (rs.getString("EMP_NAME") != null && !rs.getString("EMP_NAME").equals("")) {
                    amtList = new ArrayList();
                    scHelperBean = new ScheduleHelper();

                    scHelperBean.setSlno(slno);
                    slno = slno + 1;
                    scHelperBean.setEmpname(rs.getString("EMP_NAME"));
                    scHelperBean.setEmpdesg(rs.getString("CUR_DESG"));
                    empcode = rs.getString("EMP_CODE");
                    aqslno = rs.getString("AQSL_NO");
                    scHelperBean.setAqslNo(aqslno);
                    String ploanQry1 = "SELECT AD_AMT,AD_DESC FROM " + aqDTLS + " WHERE (SCHEDULE='PVTL' OR SCHEDULE='PVTD') and ad_code<>'CMRF' "
                            + "AND EMP_CODE='" + empcode + "' AND AQSL_NO = '" + aqslno + "' AND AQ_MONTH=" + aqMonth + " "
                            + "AND AQ_YEAR=" + aqYear + " AND AD_AMT>0";
                    rs1 = stmt1.executeQuery(ploanQry1);
                    while (rs1.next()) {
                        loanBean = new PrivateLoanScheduleBean();
                        int dedAmt = rs1.getInt("AD_AMT");
                        deductAmt = deductAmt + dedAmt;
                        scHelperBean.setPageTotalPLS(String.valueOf(deductAmt));
                        loanBean.setDeductedAmt(dedAmt);
                        loanBean.setDeductedAmtDesc(rs1.getString("AD_DESC"));
                        amtList.add(loanBean);
                    }
                    scHelperBean.setHelperList(amtList);
                    scHelperBean.setDeductAmt(deductAmt);

                    if (slno % 20 == 0) {
                        scHelperBean.setPagebreakPLS("<input type=\"button\" name=\"pagebreak1\" style=\"page-break-before: always;width: 0;height: 0\"/>");
                        scHelperBean.setPageHeaderPLS(reportPageHeader(con, "PLS", null, billno, "") + "");
                    } else {
                        scHelperBean.setPagebreakPLS("");
                        scHelperBean.setPageHeaderPLS("");
                    }
                    ploanScheduleList.add(scHelperBean);
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            DataBaseFunctions.closeSqlObjects(rs, stmt);
            DataBaseFunctions.closeSqlObjects(rs1, stmt1);
            DataBaseFunctions.closeSqlObjects(con);
        }
        return ploanScheduleList;
    }

    @Override
    public AuditRecoveryBean getAuditRecoveryScheduleDetails(String billno) {
        Connection con = null;
        AuditRecoveryBean auditBean = new AuditRecoveryBean();
        try {
            con = dataSource.getConnection();
            PayrollCommonFunction prcf = new PayrollCommonFunction();
            CommonReportParamBean bean = prcf.getCommonReportParameter(con, billno);

            auditBean.setAqMonth(CalendarCommonMethods.getFullMonthAsString(bean.getAqmonth()) + "");
            auditBean.setOfficeName(bean.getOfficename());
            auditBean.setBillDesc(bean.getBilldesc());

        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            DataBaseFunctions.closeSqlObjects(con);
        }
        return auditBean;
    }

    @Override
    public List getAuditRecoveryScheduleEmpDetails(String billno, int aqYear, int aqMonth) {

        Connection con = null;
        Statement stmt = null;
        ResultSet rs = null;

        ArrayList auditRepotScheduleList = new ArrayList();
        AuditRecoveryBean auditBean = null;
        int slno = 0;
        String aqDtlsTbl = "";
        int cfDedAmt = 0;
        try {
            con = dataSource.getConnection();
            stmt = con.createStatement();
            aqDtlsTbl = getAqDtlsTableName(billno);
            String auditQry = "SELECT * from (SELECT AQ_MAST.EMP_NAME,AQ_MAST.CUR_DESG,AQSL_NO from AQ_MAST where AQ_MAST.BILL_NO='" + billno + "') "
                    + "AQ_MAST INNER JOIN (SELECT EMP_CODE,AD_CODE,SCHEDULE,AQSL_NO,AD_AMT,TOT_REC_AMT,REF_DESC,AD_REF_ID from " + aqDtlsTbl + " where "
                    + "AD_CODE = 'AUDR' AND AQ_MONTH =" + aqMonth + " AND AQ_YEAR=" + aqYear + " AND AD_AMT > 0) AQ_DTLS ON AQ_MAST.AQSL_NO = AQ_DTLS.AQSL_NO LEFT OUTER JOIN "
                    + "(SELECT LOANID,P_ORG_AMT,LOAN_TP,EMP_ID FROM EMP_LOAN_SANC)EMP_LOAN_SANC ON AQ_DTLS.AD_REF_ID = EMP_LOAN_SANC.LOANID";

            rs = stmt.executeQuery(auditQry);
            while (rs.next()) {
                slno++;
                auditBean = new AuditRecoveryBean();

                auditBean.setSlno(slno);
                auditBean.setEmpname(rs.getString("EMP_NAME"));
                auditBean.setEmpdesg(rs.getString("CUR_DESG"));
                if (rs.getString("TOT_REC_AMT") != null && !rs.getString("TOT_REC_AMT").equals("")) {
                    auditBean.setAmtRec(rs.getString("TOT_REC_AMT"));
                } else {
                    auditBean.setAmtRec("&nbsp;");
                }

                int dedAmt = Integer.parseInt(rs.getString("AD_AMT"));
                auditBean.setAmtDeduct(String.valueOf(dedAmt));
                cfDedAmt = cfDedAmt + dedAmt;
                auditBean.setCarryFordAmt(String.valueOf(cfDedAmt));

                auditBean.setNoofInstallment(rs.getString("REF_DESC"));
                if (rs.getString("P_ORG_AMT") != null && rs.getString("TOT_REC_AMT") != null) {
                    auditBean.setBalance(Integer.parseInt(rs.getString("P_ORG_AMT")) - Integer.parseInt(rs.getString("TOT_REC_AMT")));
                }
                auditBean.setAuditReport("");
                auditBean.setHod("");
                auditBean.setRemarks("");

                auditRepotScheduleList.add(auditBean);

                if (slno % 19 == 0) {
                    auditBean.setPagebreakAR("<input type=\"button\" name=\"pagebreak1\" style=\"page-break-before: always;width: 0;height: 0\"/>");
                    auditBean.setPageHeaderAR(reportPageHeader(con, "AR", null, billno, "") + "");
                } else {
                    auditBean.setPagebreakAR("");
                    auditBean.setPageHeaderAR("");
                }

            }

        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            DataBaseFunctions.closeSqlObjects(rs, stmt);
            DataBaseFunctions.closeSqlObjects(con);
        }
        return auditRepotScheduleList;
    }

    @Override
    public List getEmployeeWiseTPFList(String billNo) {

        Connection con = null;
        PreparedStatement pstmt = null;
        ResultSet rs = null;
        ArrayList tpfList = new ArrayList();
        TpfTypeBean tpfBean = null;

        try {
            con = dataSource.getConnection();
            String tpfQuery = "SELECT GPF_TYPE FROM AQ_MAST WHERE BILL_NO ='" + billNo + "' AND ACCT_TYPE='TPF' AND GPF_TYPE IS NOT NULL "
                    + "GROUP BY GPF_TYPE ORDER BY GPF_TYPE";
            pstmt = con.prepareStatement(tpfQuery);
            rs = pstmt.executeQuery();
            while (rs.next()) {

                tpfBean = new TpfTypeBean();
                tpfBean.setGpfType(rs.getString("GPF_TYPE"));
                tpfBean.setEmpGpfList(getEmpTPFDetails(tpfBean.getGpfType(), billNo, con));
                tpfBean.setEmpno(tpfBean.getEmpGpfList().size());
                tpfList.add(tpfBean);
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            DataBaseFunctions.closeSqlObjects(rs, pstmt);
            DataBaseFunctions.closeSqlObjects(con);
        }
        return tpfList;
    }

    @Override
    public List getTPFAbstractList(String billNo) {

        Connection con = null;
        PreparedStatement pstmt = null;
        ResultSet rs = null;
        ArrayList tpfabstractList = new ArrayList();
        TPFScheduleBean tpfTypeBean = null;

        double sal = 0.0;
        String empCode = "";
        double amt = 0.0;
        double amt1 = 0.0;
        String tot = null;
        String tot1 = null;

        String aqdtlsTblName = getAqDtlsTableName(billNo);
        try {
            con = dataSource.getConnection();
            String tpfQuery = "SELECT GPF_TYPE,SUM(AD_AMT) AMT FROM (SELECT AQ_MAST.AQSL_NO,GPF_TYPES.GPF_TYPE,AD_AMT FROM (SELECT AQ_MAST.AQSL_NO,GPF_TYPE FROM AQ_MAST where BILL_NO = '" + billNo + "')AQ_MAST"
                    + " INNER JOIN (SELECT GPF_TYPE from AQ_MAST where BILL_NO ='" + billNo + "' group by GPF_TYPE) GPF_TYPES ON GPF_TYPES.GPF_TYPE = AQ_MAST.GPF_TYPE"
                    + " INNER JOIN (SELECT AQSL_NO,AD_AMT FROM " + aqdtlsTblName + " WHERE (AD_CODE = 'TPF' and DED_TYPE ='S') or (AD_CODE='TPFGA' AND DED_TYPE='L') or (AD_CODE='GPDD' AND DED_TYPE='S') or (AD_CODE='GPIR' AND DED_TYPE='S'))AQ_DTLS ON AQ_MAST.AQSL_NO = AQ_DTLS.AQSL_NO)TEMP GROUP BY GPF_TYPE ORDER BY GPF_TYPE";
            pstmt = con.prepareStatement(tpfQuery);
            rs = pstmt.executeQuery();
            while (rs.next()) {
                tpfTypeBean = new TPFScheduleBean();
                tpfTypeBean.setPfcode(rs.getString("GPF_TYPE"));
                tpfTypeBean.setTotalamt(rs.getString("AMT"));
                sal = rs.getDouble("AMT");
                amt = amt + sal;
                amt1 = amt + 1;
                tpfTypeBean.setCarryForward((int) amt + "");
                tpfTypeBean.setCarryForward1((int) amt1 + "");
                tot = Numtowordconvertion.convertNumber((int) amt);
                tpfTypeBean.setAmountInWords(tot.toUpperCase());
                tot1 = Numtowordconvertion.convertNumber((int) amt1);
                tpfTypeBean.setAmountInWords1(tot1.toUpperCase());
                if (sal > 0) {
                    tpfabstractList.add(tpfTypeBean);
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            DataBaseFunctions.closeSqlObjects(rs, pstmt);
            DataBaseFunctions.closeSqlObjects(con);
        }
        return tpfabstractList;
    }

    public ArrayList getEmpTPFDetails(String gpfType, String billNo, Connection con) {

        Statement stmt = null;
        ResultSet rs = null;
        Statement stmt1 = null;
        ResultSet rs1 = null;
        Statement stmt2 = null;
        ResultSet rs2 = null;
        Statement stmt3 = null;
        ResultSet rs3 = null;

        TPFEmployeeScheduleBean empSchBean = null;
        ArrayList empGpfList = new ArrayList();

        String noofinst = "";
        int releasedAmount = 0;
        int total = 0;
        String dob = null;
        String dob1 = null;
        String dob2 = null;
        String dob3 = null;
        String dob4 = null;
        String dos = null;
        String dos1 = null;
        String dos2 = null;
        String dos3 = null;
        String dos4 = null;
        String doe = null;
        String doe1 = null;
        String doe2 = null;
        String doe3 = null;
        String doe4 = null;

        String aqdtlsTblName = getAqDtlsTableName(billNo);
        try {
            stmt = con.createStatement();
            String query = "SELECT * FROM (SELECT GPF_ACC_NO,regexp_replace(EMP_MAST.GPF_NO, '\\d', '', 'g') SERIES,EMP_MAST.DOE_GOV,EMP_MAST.DOB,"
                    + "EMP_MAST.DOS,AQ_MAST.EMP_CODE,AQ_MAST.EMP_NAME,AQ_MAST.CUR_DESG,AQ_MAST.BANK_ACC_NO,AQ_MAST.CUR_BASIC,AQ_MAST.PAY_SCALE,"
                    + "AQ_MAST.AQSL_NO,POST_SL_NO,F_NAME from (SELECT EMP_CODE,EMP_NAME,CUR_DESG,BANK_ACC_NO,CUR_BASIC,PAY_SCALE,AQSL_NO,"
                    + "POST_SL_NO,GPF_ACC_NO from AQ_MAST WHERE GPF_TYPE ='" + gpfType + "' AND BILL_NO ='" + billNo + "' AND ACCT_TYPE='TPF' "
                    + "order by GPF_ACC_NO) AQ_MAST left outer join EMP_MAST on AQ_MAST.EMP_CODE =EMP_MAST.EMP_ID ) TPF_DETAILS ORDER BY SERIES,F_NAME";
            rs = stmt.executeQuery(query);
            while (rs.next()) {
                empSchBean = new TPFEmployeeScheduleBean();
                if (rs.getString("EMP_NAME") != null && !rs.getString("EMP_NAME").equals("")) {

                    empSchBean.setName(rs.getString("EMP_NAME"));
                    empSchBean.setDesignation(rs.getString("CUR_DESG"));
                    empSchBean.setAccNo(rs.getString("GPF_ACC_NO"));
                    empSchBean.setBasicPay(rs.getString("CUR_BASIC"));
                    empSchBean.setScaleOfPay(rs.getString("PAY_SCALE"));
                    noofinst = CommonScheduleMethods.getNoOfInst2(rs.getString("AQSL_NO"), aqdtlsTblName, con);
                    empSchBean.setNoOfInst(noofinst);
                    if (rs.getString("DOE_GOV") != null && !rs.getString("DOE_GOV").trim().equals("")) {
                        doe = rs.getString("DOE_GOV");
                        doe1 = doe.substring(0, 4);
                        doe2 = doe.substring(5, 7);
                        doe3 = doe.substring(8, 10);
                        doe4 = doe3 + "/" + doe2 + "/" + doe1;
                        empSchBean.setDateOfEntry(doe4);
                    }
                    if (rs.getString("DOB") != null && !rs.getString("DOB").trim().equals("")) {
                        dob = rs.getString("DOB");

                        dob1 = dob.substring(0, 4);
                        dob2 = dob.substring(5, 7);
                        dob3 = dob.substring(8, 10);
                        dob4 = dob3 + "/" + dob2 + "/" + dob1;
                        empSchBean.setDob(dob4);
                    }
                    if (rs.getString("DOS") != null && !rs.getString("DOS").trim().equals("")) {
                        dos = rs.getString("DOS");
                        dos1 = dos.substring(0, 4);
                        dos2 = dos.substring(5, 7);
                        dos3 = dos.substring(8, 10);
                        dos4 = dos3 + "/" + dos2 + "/" + dos1;
                        empSchBean.setDor(dos4);
                    }

                    stmt1 = con.createStatement();
                    query = "SELECT " + aqdtlsTblName + ".AD_AMT MONTHLYSUB FROM " + aqdtlsTblName + " WHERE " + aqdtlsTblName + ".AD_TYPE = 'D' AND EMP_CODE='" + rs.getString("EMP_CODE") + "' AND " + aqdtlsTblName + ".DED_TYPE = 'S' AND " + aqdtlsTblName + ".SCHEDULE = 'TPF' AND AQSL_NO = '" + rs.getString("AQSL_NO") + "'";
                    rs1 = stmt1.executeQuery(query);
                    if (rs1.next()) {
                        empSchBean.setMonthlySub(rs1.getInt("MONTHLYSUB"));
                    }

                    stmt2 = con.createStatement();
                    query = "SELECT " + aqdtlsTblName + ".AD_AMT TOWARDSLOAN FROM " + aqdtlsTblName + " WHERE " + aqdtlsTblName + ".AD_TYPE = 'D' AND EMP_CODE='" + rs.getString("EMP_CODE") + "' AND " + aqdtlsTblName + ".DED_TYPE = 'L' AND " + aqdtlsTblName + ".SCHEDULE = 'TPFGA' AND AQSL_NO = '" + rs.getString("AQSL_NO") + "'";
                    rs2 = stmt2.executeQuery(query);
                    if (rs2.next()) {
                        empSchBean.setTowardsLoan(rs2.getInt("TOWARDSLOAN"));
                    }

                    stmt3 = con.createStatement();
                    query = "SELECT SUM(" + aqdtlsTblName + ".AD_AMT) TOWARDSOTHER FROM " + aqdtlsTblName + " WHERE " + aqdtlsTblName + ".AD_TYPE = 'D' AND EMP_CODE='" + rs.getString("EMP_CODE") + "' AND (" + aqdtlsTblName + ".AD_CODE = 'GPDD' OR " + aqdtlsTblName + ".AD_CODE = 'GPIR') AND AQSL_NO = '" + rs.getString("AQSL_NO") + "'";
                    rs3 = stmt3.executeQuery(query);
                    if (rs3.next()) {
                        empSchBean.setOtherdeposits(rs3.getInt("TOWARDSOTHER"));
                    }

                    releasedAmount = empSchBean.getMonthlySub() + empSchBean.getTowardsLoan() + empSchBean.getOtherdeposits();
                    empSchBean.setTotalReleased(releasedAmount);
                    total += releasedAmount;

                    empSchBean.setCarryForward(total + "");
                    //if (total > 0) {
                    empGpfList.add(empSchBean);
                    //}
                }
                if (total > 0) {
                    empSchBean.setAmountInWords(Numtowordconvertion.convertNumber((int) total).toUpperCase());
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            DataBaseFunctions.closeSqlObjects(rs1, rs2, rs3);
            DataBaseFunctions.closeSqlObjects(rs, stmt);
        }
        return empGpfList;
    }

    @Override
    public OTC84Bean getOTC84ScheduleDetails(String billno, int aqYear, int aqMonth, CommonReportParamBean bean) {

        Connection con = null;
        OTC84Bean otc84Bean = new OTC84Bean();
        Statement stmt = null;
        ResultSet rs = null;
        String month = "";
        String aqDTLS = "";

        try {
            con = dataSource.getConnection();
            stmt = con.createStatement();
            aqDTLS = getAqDtlsTableName(billno);

            //PayrollCommonFunction prcf = new PayrollCommonFunction();
            //CommonReportParamBean bean = prcf.getCommonReportParameter(con, billno);
            // == OLD WAY
//            String arr1[] = new CommonScheduleMethods().getTotalAmount(con, billno, aqDTLS, aqYear, aqMonth);
//            String arr[] = new CommonScheduleMethods().getGrossTotalAmount(con, billno);
//            otc84Bean.setNetAmount(arr1[0]);
//            otc84Bean.setGross(Double.valueOf(arr[0]).longValue() + "");
//            otc84Bean.setGrossAmountWord(Numtowordconvertion.convertNumber((int) Double.parseDouble(otc84Bean.getGross())));
            int grossAmt = bean.getBillGrossAmt();
            int netAmount = grossAmt - bean.getBillDedAmt();

            otc84Bean.setNetAmount(netAmount + "");
            otc84Bean.setGross(Double.valueOf(grossAmt).longValue() + "");
            otc84Bean.setGrossAmountWord(Numtowordconvertion.convertNumber((int) grossAmt));

            otc84Bean.setBillDesc(bean.getBilldesc());
            otc84Bean.setOffName(bean.getOfficename());
            otc84Bean.setBillDate(bean.getBilldate());
            otc84Bean.setBillMonth("" + bean.getAqmonth());
            month = new CalendarCommonMethods().getMonthAsString(bean.getAqmonth());
            otc84Bean.setBillMonth(month);
            otc84Bean.setBillYear(bean.getAqyear() + "");
            otc84Bean.setTreasuryOffice(bean.getTreasuryname());
            otc84Bean.setBranchManager(bean.getBranchmanager());
            otc84Bean.setBranchName(bean.getBranchname());

        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            DataBaseFunctions.closeSqlObjects(rs, stmt);
            DataBaseFunctions.closeSqlObjects(con);
        }
        return otc84Bean;
    }

    @Override
    public ExcessPayBean getExcessPayScheduleHeaderDetails(String billno) {

        Connection con = null;
        ExcessPayBean excessBean = new ExcessPayBean();
        Statement stmt = null;
        ResultSet rs = null;

        String yearVal = "";
        int monthVal = 0;
        String monthStr = "";
        String result = "";
        try {
            con = dataSource.getConnection();
            stmt = con.createStatement();

            PayrollCommonFunction prcf = new PayrollCommonFunction();
            CommonReportParamBean bean = prcf.getCommonReportParameter(con, billno);

            String excessQry = "SELECT AQ_MONTH,AQ_YEAR FROM BILL_MAST WHERE BILL_NO='" + billno + "'";
            rs = stmt.executeQuery(excessQry);
            while (rs.next()) {
                yearVal = rs.getString("AQ_YEAR");
                monthVal = rs.getInt("AQ_MONTH");
                monthStr = CalendarCommonMethods.getFullMonthAsString(monthVal);
                result = monthStr + "-" + yearVal;
            }
            excessBean.setMonthYear(result);
            excessBean.setBillNo(bean.getBilldesc());
            excessBean.setDeptName(bean.getDeptname());
            excessBean.setOffName(bean.getOfficename());
            excessBean.setDdoDegn(bean.getDdoname());
            excessBean.setBillDesc(bean.getBilldesc());

        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            DataBaseFunctions.closeSqlObjects(rs, stmt);
            DataBaseFunctions.closeSqlObjects(con);
        }
        return excessBean;
    }

    @Override
    public List getExcessPayScheduleEmpDetails(String billno, int aqYear, int aqMonth) {

        Connection con = null;
        Statement stmt = null;
        ResultSet rs = null;
        Statement stmt1 = null;
        ResultSet rs1 = null;

        ArrayList excessPayScheduleList = new ArrayList();
        ExcessPayBean excessBean = null;
        int carryForwardTax = 0;
        int totalGross = 0;
        int basicSal = 0;
        String empCode = "";

        String gross = "";
        int slNo = 0;
        String aqDtlsTbl = "";
        try {
            con = dataSource.getConnection();
            stmt = con.createStatement();
            stmt1 = con.createStatement();

            PayrollCommonFunction prcf = new PayrollCommonFunction();
            CommonReportParamBean bean = prcf.getCommonReportParameter(con, billno);
            aqDtlsTbl = getAqDtlsTableName(billno);

            String excessQry = "select c.EMP_CODE, c.EMP_NAME, c.CUR_DESG, c.CUR_BASIC, a.AD_AMT from " + aqDtlsTbl + " a, BILL_MAST b, AQ_MAST c where "
                    + "b.bill_no = '" + billno + "' and a.aqsl_no = c.aqsl_no and a.aq_year = c.aq_year and a.aq_month = c.aq_month and "
                    + "b.bill_no = c.bill_no and SCHEDULE='EP' AND AD_TYPE='D' AND AD_AMT >0 and a.aq_month = " + aqMonth + " and "
                    + "a.aq_year = " + aqYear + " order by POST_SL_NO";

            rs = stmt.executeQuery(excessQry);
            while (rs.next()) {
                slNo++;
                excessBean = new ExcessPayBean();
                excessBean.setSlno(slNo);

                excessBean.setEmpName(rs.getString("EMP_NAME"));
                excessBean.setEmpDegn(rs.getString("CUR_DESG"));
                if (rs.getString("AD_AMT") != null && !rs.getString("AD_AMT").equals("")) {
                    excessBean.setEmpTaxOnProffesion(rs.getString("AD_AMT"));
                } else {
                    excessBean.setEmpTaxOnProffesion("0");
                }
                carryForwardTax = carryForwardTax + rs.getInt("AD_AMT");
                excessBean.setTotalTax(carryForwardTax + "");
                empCode = rs.getString("EMP_CODE");
                basicSal = rs.getInt("CUR_BASIC");

                String excessQry1 = "select AD_AMT,AD_DESC from " + aqDtlsTbl + " a, AQ_MAST b where b.bill_no ='" + billno + "' and b.EMP_CODE ='" + empCode + "' "
                        + "and a.aqsl_no = b.aqsl_no and a.aq_year = b.aq_year and a.aq_month = b.aq_month and AD_TYPE='A' and "
                        + "a.aq_month = " + aqMonth + " and a.aq_year = " + aqYear + "";

                rs1 = stmt1.executeQuery(excessQry1);
                int totalAllowance = 0;
                while (rs1.next()) {
                    totalAllowance = totalAllowance + rs1.getInt("AD_AMT");
                }
                gross = basicSal + totalAllowance + "";
                totalGross = totalGross + Integer.parseInt(gross);

                excessBean.setTotalGross(totalGross + "");
                excessBean.setEmpGrossSal(gross);

                if (slNo % 20 == 0) {
                    excessBean.setPagebreakEP("<input type=\"button\" name=\"pagebreak1\" style=\"page-break-before: always;width: 0;height: 0\"/>");
                    excessBean.setPageHeaderEP(reportPageHeader(con, "EP", null, billno, "") + "");
                } else {
                    excessBean.setPagebreakEP("");
                    excessBean.setPageHeaderEP("");
                }
                excessPayScheduleList.add(excessBean);

            }

        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            DataBaseFunctions.closeSqlObjects(rs, stmt);
            DataBaseFunctions.closeSqlObjects(rs1, stmt1);
            DataBaseFunctions.closeSqlObjects(con);
        }
        return excessPayScheduleList;
    }

    @Override
    public ComputerTokenReportBean getCompTokenRepotScheduleDetails(String billno, int aqYear, int aqMonth) {

        Connection con = null;
        ComputerTokenReportBean tokenBean = new ComputerTokenReportBean();
        Statement stmt = null;
        ResultSet rs = null;
        Statement stmt1 = null;
        ResultSet rs1 = null;
        Statement stmt2 = null;
        ResultSet rs2 = null;
        String aqDTLS = "";
        String acct_type = null;
        double basicPay = 0;
        try {
            con = dataSource.getConnection();
            stmt = con.createStatement();
            stmt1 = con.createStatement();
            stmt2 = con.createStatement();
            aqDTLS = getAqDtlsTableName(billno);

            PayrollCommonFunction prcf = new PayrollCommonFunction();
            CommonReportParamBean bean = prcf.getCommonReportParameter(con, billno);
            String tokenQry1 = "SELECT TAB.*,POST,TR_NAME FROM(SELECT BILL_MAST.*,SECTOR_DESC,POST_TYPE,DDO_POST FROM (SELECT BILL_DATE,BILL_TYPE,"
                    + "BILL_DESC,DDO_CODE,DEMAND_NO,MAJOR_HEAD,SUB_MAJOR_HEAD,MINOR_HEAD,SUB_MINOR_HEAD1,SUB_MINOR_HEAD2,PLAN,SUB_MINOR_HEAD3,SECTOR,"
                    + "TR_CODE,BEN_REF_NO,TOKEN_NO FROM BILL_MAST WHERE BILL_NO='" + billno + "') BILL_MAST LEFT OUTER JOIN G_SECTOR ON BILL_MAST.SECTOR="
                    + "G_SECTOR.SECTOR_CODE LEFT OUTER JOIN G_POST_TYPE ON BILL_MAST.PLAN=G_POST_TYPE.POST_CODE INNER JOIN G_OFFICE ON "
                    + "BILL_MAST.DDO_CODE=G_OFFICE.DDO_CODE)TAB LEFT OUTER JOIN G_POST ON TAB.DDO_POST=G_POST.POST_CODE LEFT OUTER JOIN "
                    + "G_TREASURY ON TAB.TR_CODE=G_TREASURY.TR_CODE";
            rs = stmt.executeQuery(tokenQry1);
            if (rs.next()) {
                tokenBean.setBillDate(CommonFunctions.getFormattedOutputDate1(rs.getDate("BILL_DATE")));
                tokenBean.setBillType(rs.getString("BILL_TYPE"));
                tokenBean.setBillDesc(rs.getString("BILL_DESC"));
                tokenBean.setDdoCode(rs.getString("DDO_CODE"));
                tokenBean.setDdoName(rs.getString("POST"));
                tokenBean.setDemandNo(rs.getString("DEMAND_NO"));
                tokenBean.setMajorHead(rs.getString("MAJOR_HEAD"));
                tokenBean.setSubMajorHead(rs.getString("SUB_MAJOR_HEAD"));
                tokenBean.setMinor(rs.getString("MINOR_HEAD"));
                tokenBean.setSub(rs.getString("SUB_MINOR_HEAD1"));

                tokenBean.setDetail(rs.getString("SUB_MINOR_HEAD2"));
                tokenBean.setPlanOrNonPlan(rs.getString("PLAN"));
                tokenBean.setChargedOrVoted(rs.getString("SUB_MINOR_HEAD3"));
                tokenBean.setSector(rs.getString("SECTOR"));
                tokenBean.setSectorDesc(rs.getString("SECTOR_DESC"));
                tokenBean.setTreasuryName(rs.getString("TR_NAME"));
                tokenBean.setBenRefNo(rs.getString("BEN_REF_NO"));
                tokenBean.setTokenNo(rs.getString("TOKEN_NO"));
            }
            BillAmtDetails billAmtDetail = AqFunctionalities.BillAmt(con, billno, aqDTLS, aqYear, aqMonth);
            tokenBean.setGrossAmt(Double.valueOf(billAmtDetail.getBillGross() + "").longValue() + "");
            tokenBean.setNetAmt(Double.valueOf(billAmtDetail.getBillNet() + "").longValue() + "");
            tokenBean.setByTransferAmt(billAmtDetail.getBillDeduction());

            String tokenQry2 = "select SUM(CUR_BASIC) AMT from AQ_MAST where bill_no=" + billno;
            rs1 = stmt1.executeQuery(tokenQry2);
            if (rs1.next()) {
                basicPay = rs1.getDouble("AMT");
            }

            rs2 = stmt2.executeQuery("SELECT DISTINCT ACCT_TYPE FROM AQ_MAST WHERE BILL_NO='" + billno + "'");
            if (rs2.next()) {
                acct_type = rs2.getString("ACCT_TYPE");
            }

            tokenBean.setAllowanceList(getAllowanceList(con, "A", billno, basicPay, acct_type, aqYear, aqMonth));// Object List
            tokenBean.setDeductionList(getDeductionList(con, "D", billno, acct_type, aqYear, aqMonth)); // Deduction List

        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            DataBaseFunctions.closeSqlObjects(rs, stmt);
            DataBaseFunctions.closeSqlObjects(rs1, stmt1);
            DataBaseFunctions.closeSqlObjects(rs2, stmt2);
            DataBaseFunctions.closeSqlObjects(con);
        }
        return tokenBean;
    }

    @Override
    public ComputerTokenReportBean getArrCompTokenRepotScheduleDetails(String billno, int aqYear, int aqMonth) {
        Connection con = null;
        ComputerTokenReportBean tokenBean = new ComputerTokenReportBean();
        PreparedStatement pstmt = null;
        ResultSet rs = null;
        Statement stmt1 = null;
        ResultSet rs1 = null;
        Statement stmt2 = null;
        ResultSet rs2 = null;
        String aqDTLS = "";
        String acct_type = null;
        double basicPay = 0;
        try {
            con = dataSource.getConnection();
            stmt1 = con.createStatement();
            stmt2 = con.createStatement();
            aqDTLS = getAqDtlsTableName(billno);

            PayrollCommonFunction prcf = new PayrollCommonFunction();
            CommonReportParamBean bean = prcf.getCommonReportParameter(con, billno);
            String tokenQry1 = "SELECT TAB.*,POST,TR_NAME FROM(SELECT BILL_MAST.*,SECTOR_DESC,POST_TYPE,DDO_POST FROM (SELECT BILL_DATE,BILL_TYPE,"
                    + "BILL_DESC,DDO_CODE,DEMAND_NO,MAJOR_HEAD,SUB_MAJOR_HEAD,MINOR_HEAD,SUB_MINOR_HEAD1,SUB_MINOR_HEAD2,PLAN,SUB_MINOR_HEAD3,SECTOR,"
                    + "TR_CODE,BEN_REF_NO,TOKEN_NO FROM BILL_MAST WHERE BILL_NO=?) BILL_MAST LEFT OUTER JOIN G_SECTOR ON BILL_MAST.SECTOR="
                    + "G_SECTOR.SECTOR_CODE LEFT OUTER JOIN G_POST_TYPE ON BILL_MAST.PLAN=G_POST_TYPE.POST_CODE INNER JOIN G_OFFICE ON "
                    + "BILL_MAST.DDO_CODE=G_OFFICE.DDO_CODE)TAB LEFT OUTER JOIN G_POST ON TAB.DDO_POST=G_POST.POST_CODE LEFT OUTER JOIN "
                    + "G_TREASURY ON TAB.TR_CODE=G_TREASURY.TR_CODE";
            pstmt = con.prepareStatement(tokenQry1);
            pstmt.setInt(1, Integer.parseInt(billno));
            rs = pstmt.executeQuery();
            if (rs.next()) {
                tokenBean.setBillDate(CommonFunctions.getFormattedOutputDate1(rs.getDate("BILL_DATE")));
                tokenBean.setBillType(rs.getString("BILL_TYPE"));
                tokenBean.setBillDesc(rs.getString("BILL_DESC"));
                tokenBean.setDdoCode(rs.getString("DDO_CODE"));
                tokenBean.setDdoName(rs.getString("POST"));
                tokenBean.setDemandNo(rs.getString("DEMAND_NO"));
                tokenBean.setMajorHead(rs.getString("MAJOR_HEAD"));
                tokenBean.setSubMajorHead(rs.getString("SUB_MAJOR_HEAD"));
                tokenBean.setMinor(rs.getString("MINOR_HEAD"));
                tokenBean.setSub(rs.getString("SUB_MINOR_HEAD1"));

                tokenBean.setDetail(rs.getString("SUB_MINOR_HEAD2"));
                tokenBean.setPlanOrNonPlan(rs.getString("PLAN"));
                tokenBean.setChargedOrVoted(rs.getString("SUB_MINOR_HEAD3"));
                tokenBean.setSector(rs.getString("SECTOR"));
                tokenBean.setSectorDesc(rs.getString("SECTOR_DESC"));
                tokenBean.setTreasuryName(rs.getString("TR_NAME"));
                tokenBean.setBenRefNo(rs.getString("BEN_REF_NO"));
                tokenBean.setTokenNo(rs.getString("TOKEN_NO"));
            }
            /*BillAmtDetails billAmtDetail = AqFunctionalities.BillAmt(con, billno, aqDTLS, aqYear, aqMonth);
             tokenBean.setGrossAmt(Double.valueOf(billAmtDetail.getBillGross() + "").longValue() + "");
             tokenBean.setNetAmt(Double.valueOf(billAmtDetail.getBillNet() + "").longValue() + "");
             tokenBean.setByTransferAmt(billAmtDetail.getBillDeduction());

             String tokenQry2 = "select SUM(CUR_BASIC) AMT from AQ_MAST where bill_no=" + billno;
             rs1 = stmt1.executeQuery(tokenQry2);
             if (rs1.next()) {
             basicPay = rs1.getDouble("AMT");
             }

             rs2 = stmt2.executeQuery("SELECT DISTINCT ACCT_TYPE FROM AQ_MAST WHERE BILL_NO='" + billno + "'");
             if (rs2.next()) {
             acct_type = rs2.getString("ACCT_TYPE");
             }

             tokenBean.setAllowanceList(getAllowanceList(con, "A", billno, basicPay, acct_type, aqYear, aqMonth));// Object List
             tokenBean.setDeductionList(getDeductionList(con, "D", billno, acct_type)); // Deduction List*/

        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            DataBaseFunctions.closeSqlObjects(rs, pstmt);
            DataBaseFunctions.closeSqlObjects(rs1, stmt1);
            DataBaseFunctions.closeSqlObjects(rs2, stmt2);
            DataBaseFunctions.closeSqlObjects(con);
        }
        return tokenBean;
    }

    @Override
    public OtcForm82Bean getOTCForm82ScheduleDetails(String billno) {

        Connection con = null;
        OtcForm82Bean otcBean = new OtcForm82Bean();
        Statement stmt = null;
        ResultSet rs = null;
        Statement stmt1 = null;
        ResultSet rs1 = null;
        Statement stmt2 = null;
        ResultSet rs2 = null;
        Statement stmt3 = null;
        ResultSet rs3 = null;
        Statement stmt4 = null;
        ResultSet rs4 = null;
        Statement stmt5 = null;
        ResultSet rs5 = null;
        String aqDtlsTbl = "";
        int curbasic = 0;
        int sum = 0;
        int sum1 = 0;
        int gross = 0;
        int net = 0;

        try {
            con = dataSource.getConnection();
            stmt = con.createStatement();
            stmt1 = con.createStatement();
            stmt2 = con.createStatement();
            stmt3 = con.createStatement();
            stmt4 = con.createStatement();
            stmt5 = con.createStatement();

            PayrollCommonFunction prcf = new PayrollCommonFunction();
            aqDtlsTbl = getAqDtlsTableName(billno);
            String otcQry1 = "SELECT AQ_YEAR,AQ_MONTH,BILL_DESC,TR_NAME,BEN_REF_NO FROM (SELECT AQ_YEAR,AQ_MONTH,BILL_DESC,TR_CODE,BEN_REF_NO FROM BILL_MAST WHERE "
                    + "BILL_NO='" + billno + "') BILL_MAST LEFT OUTER JOIN G_TREASURY ON BILL_MAST.TR_CODE=G_TREASURY.TR_CODE";
            rs = stmt.executeQuery(otcQry1);
            if (rs.next()) {

                otcBean.setYear(StringUtils.defaultString(rs.getString("AQ_YEAR")));
                int monthVal = rs.getInt("AQ_MONTH");
                otcBean.setMonthinNum(monthVal);
                otcBean.setMonth(CalendarCommonMethods.getFullMonthAsString(monthVal));
                otcBean.setBillDesc(StringUtils.defaultString(rs.getString("BILL_DESC")));
                otcBean.setTreasuryName(StringUtils.defaultString(rs.getString("TR_NAME")));

                if (rs.getString("BEN_REF_NO") != null && !rs.getString("BEN_REF_NO").equals("")) {
                    otcBean.setBenRefNo(rs.getString("BEN_REF_NO"));
                } else {
                    otcBean.setBenRefNo("..............");
                }
            }

            DataBaseFunctions.closeSqlObjects(rs, stmt);

            String otcQry2 = "SELECT SUM(CUR_BASIC) CUR_BASIC FROM AQ_MAST WHERE AQ_MAST.BILL_NO='" + billno + "'";
            rs1 = stmt1.executeQuery(otcQry2);
            if (rs1.next()) {
                curbasic = rs1.getInt("CUR_BASIC");
            }

            DataBaseFunctions.closeSqlObjects(rs1, stmt1);

            String otcQry3 = "SELECT SUM(AD_AMT) AD_AMT FROM (SELECT AQSL_NO FROM AQ_MAST WHERE BILL_NO='" + billno + "' and aq_year=" + otcBean.getYear() + " and aq_month=" + otcBean.getMonthinNum() + ") AQ_MAST INNER JOIN "
                    + "(SELECT AD_AMT,AQSL_NO FROM " + aqDtlsTbl + " WHERE AD_TYPE='A' AND AQ_MONTH=" + otcBean.getMonthinNum() + " AND "
                    + "AQ_YEAR=" + otcBean.getYear() + ") AQ_DTLS ON AQ_MAST.AQSL_NO=AQ_DTLS.AQSL_NO";
            rs2 = stmt2.executeQuery(otcQry3);
            if (rs2.next()) {
                sum = rs2.getInt("AD_AMT");
            }

            DataBaseFunctions.closeSqlObjects(rs2, stmt2);

            String otcQry4 = "SELECT SUM(AD_AMT) AD_AMT FROM (SELECT AQSL_NO FROM AQ_MAST WHERE BILL_NO='" + billno + "'and aq_year=" + otcBean.getYear() + " and aq_month=" + otcBean.getMonthinNum() + ") AQ_MAST INNER JOIN "
                    + "(SELECT AD_AMT,AQSL_NO FROM " + aqDtlsTbl + " WHERE AD_TYPE='D' AND AQ_MONTH=" + otcBean.getMonthinNum() + " AND AQ_YEAR=" + otcBean.getYear() + ") "
                    + "AQ_DTLS ON AQ_MAST.AQSL_NO=AQ_DTLS.AQSL_NO";
            rs3 = stmt3.executeQuery(otcQry4);
            if (rs3.next()) {
                sum1 += rs3.getInt("AD_AMT");
            }

            DataBaseFunctions.closeSqlObjects(rs3, stmt3);

            String otcQry5 = "SELECT SUM(AD_AMT) AD_AMT FROM (SELECT AQSL_NO FROM AQ_MAST WHERE BILL_NO='" + billno + "' and aq_year=" + otcBean.getYear() + " and aq_month=" + otcBean.getMonthinNum() + ") AQ_MAST INNER JOIN "
                    + "(SELECT AD_AMT,AQSL_NO FROM " + aqDtlsTbl + " WHERE AD_TYPE='D' AND (SCHEDULE ='PVTD' OR SCHEDULE ='PVTL') AND AQ_MONTH=" + otcBean.getMonthinNum() + " "
                    + "AND AQ_YEAR=" + otcBean.getYear() + ") AQ_DTLS ON AQ_MAST.AQSL_NO=AQ_DTLS.AQSL_NO";
            rs4 = stmt4.executeQuery(otcQry5);
            int toDDOAccount = 0;
            if (rs4.next()) {
                toDDOAccount = rs4.getInt("AD_AMT");
            }
            gross = curbasic + sum;
            net = gross - sum1;
            otcBean.setNetPay(Double.valueOf("" + net).longValue() + "");
            otcBean.setNetPayWord(Numtowordconvertion.convertNumber(net));
            otcBean.setToDdoAccount(toDDOAccount);

            DataBaseFunctions.closeSqlObjects(rs4, stmt4);

            String otcQry6 = "SELECT COUNT(*) NOOFEMP FROM AQ_MAST WHERE BILL_NO=" + billno + " AND EMP_CODE IS NOT NULL";
            rs5 = stmt5.executeQuery(otcQry6);
            if (rs5.next()) {
                otcBean.setNoofEmp(rs5.getString("NOOFEMP"));
            }

            DataBaseFunctions.closeSqlObjects(rs5, stmt5);

            SimpleDateFormat formatter = new SimpleDateFormat("dd.MM.yyyy");
            Calendar aCal = Calendar.getInstance();
            aCal.set(Integer.parseInt(otcBean.getYear()), otcBean.getMonthinNum(), 1);
            aCal.add(aCal.DAY_OF_MONTH, -1);
            aCal.set(aCal.DATE, aCal.getActualMaximum(aCal.DATE));
            if (otcBean.getMonthinNum() == 0) {
                aCal.add(aCal.DAY_OF_YEAR, -1);
            }
            Date lastDate = aCal.getTime();
            String df = DateFormat.getDateInstance().format(lastDate);
            otcBean.setLastDate(df);

            double gradepay = getGPandDA(con, billno, "GP", otcBean.getMonthinNum(), otcBean.getYear());
            int spAmt = getSpecialPayAmount(billno, otcBean.getMonthinNum(), otcBean.getYear());
            int irAmt = getIrAmount(billno, otcBean.getMonthinNum(), otcBean.getYear());
            gradepay = gradepay + curbasic + spAmt + irAmt;

            double da = getGPandDA(con, billno, "DA", otcBean.getMonthinNum(), otcBean.getYear());
            double hra = getGPandDA(con, billno, "HRA", otcBean.getMonthinNum(), otcBean.getYear());
            String otherAllowance = getOtherAllowance(con, billno, otcBean.getMonthinNum(), otcBean.getYear());

            otcBean.setGradePayAmt(gradepay + "");
            if (da > 0) {
                otcBean.setDaAmt(da + "");
            } else {
                otcBean.setDaAmt("");
            }
            if (hra > 0) {
                otcBean.setHraAmt(hra + "");
            } else {
                otcBean.setHraAmt("");
            }
            otcBean.setOtherAllowanceAmt(otherAllowance);

        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            DataBaseFunctions.closeSqlObjects(rs, stmt);
            DataBaseFunctions.closeSqlObjects(rs1, stmt1);
            DataBaseFunctions.closeSqlObjects(rs2, stmt2);
            DataBaseFunctions.closeSqlObjects(rs3, stmt3);
            DataBaseFunctions.closeSqlObjects(rs4, stmt4);
            DataBaseFunctions.closeSqlObjects(rs5, stmt5);
            DataBaseFunctions.closeSqlObjects(con);
        }
        return otcBean;
    }

    public double getGPandDA(Connection con, String billNo, String adcode, int aqMonth, String aqyear) throws Exception {

        Statement stmt = null;
        ResultSet rs = null;
        double data = 0;
        String aqDtlsTbl = "";
        try {
            stmt = con.createStatement();
            aqDtlsTbl = hrms.common.AqFunctionalities.getAQBillDtlsTable(aqMonth, Integer.parseInt(aqyear));
            rs = stmt.executeQuery("Select sum(AQ_DTLS.AD_AMT) AD_AMT from( (Select AQ_MAST.AQSL_NO from AQ_MAST where AQ_MAST.BILL_NO = '" + billNo + "' "
                    + " and AQ_MAST.aq_month=" + aqMonth + " and AQ_MAST.aq_year='" + aqyear + "' ) AQ_MAST inner join (Select AQ_DTLS.AQSL_NO,AQ_DTLS.AD_AMT "
                    + "from " + aqDtlsTbl + " AQ_DTLS where SCHEDULE ='" + adcode + "') AQ_DTLS on AQ_MAST.AQSL_NO = AQ_DTLS.AQSL_NO)");
            if (rs.next()) {
                data = rs.getDouble("AD_AMT");
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            DataBaseFunctions.closeSqlObjects(rs, stmt);
        }
        return data;
    }

    public String getOtherAllowance(Connection con, String billNo, int aqMonth, String aqyear) throws Exception {

        Statement stmt = null;
        ResultSet rs = null;
        String otherAllowance = "";
        String aqDtlsTbl = "";
        try {
            stmt = con.createStatement();
            aqDtlsTbl = getAqDtlsTableName(billNo + "");
            String oaQry = "Select sum(AQ_DTLS.AD_AMT) AD_AMT from( (Select AQ_MAST.AQSL_NO from AQ_MAST where AQ_MAST.BILL_NO = '" + billNo + "' "
                    + " and AQ_MAST.aq_month=" + aqMonth + " and AQ_MAST.aq_year='" + aqyear + "' )AQ_MAST inner join "
                    + "(Select AQ_DTLS.AQSL_NO,AQ_DTLS.AD_AMT from " + aqDtlsTbl + " AQ_DTLS where AQ_DTLS.SCHEDULE = 'OA' AND AD_CODE !='SP' AND AD_CODE !='IR')"
                    + " AQ_DTLS on AQ_MAST.AQSL_NO = AQ_DTLS.AQSL_NO)";
            rs = stmt.executeQuery(oaQry);
            if (rs.next()) {
                otherAllowance = rs.getString("AD_AMT");
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            DataBaseFunctions.closeSqlObjects(rs, stmt);
        }
        return otherAllowance;
    }

    public int getSpecialPayAmount(String billNo, int aqMonth, String aqyear) {

        Connection con = null;
        ResultSet rs = null;
        PreparedStatement pstmt = null;
        String aqDtlsTbl = "";
        int amount = 0;
        try {
            con = dataSource.getConnection();
            aqDtlsTbl = getAqDtlsTableName(billNo + "");
            String spQry = "Select sum(AQ_DTLS.AD_AMT) AD_AMT from( (Select AQ_MAST.AQSL_NO from AQ_MAST where AQ_MAST.BILL_NO = ? and AQ_MAST.aq_month=" + aqMonth + " and AQ_MAST.aq_year='" + aqyear + "' )AQ_MAST "
                    + "inner join (Select AQ_DTLS.AQSL_NO,AQ_DTLS.AD_AMT from " + aqDtlsTbl + " AQ_DTLS where AQ_DTLS.SCHEDULE = 'OA'  AND AD_CODE ='SP') AQ_DTLS "
                    + "on AQ_MAST.AQSL_NO = AQ_DTLS.AQSL_NO )";
            pstmt = con.prepareStatement(spQry);
            pstmt.setInt(1, Integer.parseInt(billNo));
            rs = pstmt.executeQuery();
            while (rs.next()) {
                amount = rs.getInt("AD_AMT");
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            DataBaseFunctions.closeSqlObjects(rs, pstmt);
            DataBaseFunctions.closeSqlObjects(con);
        }
        return amount;
    }

    public int getIrAmount(String billNo, int aqMonth, String aqyear) {

        Connection con = null;
        ResultSet rs = null;
        PreparedStatement pstmt = null;
        String aqDtlsTbl = "";
        int amount = 0;
        try {
            aqDtlsTbl = getAqDtlsTableName(billNo + "");

            con = dataSource.getConnection();
            String irQry = "Select sum(AQ_DTLS.AD_AMT) AD_AMT from( (Select AQ_MAST.AQSL_NO from AQ_MAST where AQ_MAST.BILL_NO = ? and AQ_MAST.aq_month=" + aqMonth + " and AQ_MAST.aq_year='" + aqyear + "' )AQ_MAST "
                    + "inner join (Select AQ_DTLS.AQSL_NO,AQ_DTLS.AD_AMT from " + aqDtlsTbl + " AQ_DTLS where AQ_DTLS.SCHEDULE = 'OA'  AND AD_CODE ='IR') AQ_DTLS "
                    + "on AQ_MAST.AQSL_NO = AQ_DTLS.AQSL_NO )";
            pstmt = con.prepareStatement(irQry);
            pstmt.setInt(1, Integer.parseInt(billNo));
            rs = pstmt.executeQuery();
            while (rs.next()) {
                amount = rs.getInt("AD_AMT");
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            DataBaseFunctions.closeSqlObjects(rs, pstmt);
            DataBaseFunctions.closeSqlObjects(con);
        }
        return amount;
    }

    @Override
    public void OTC82SchedulePDF(Document document, String billNo, OtcForm82Bean otcBean) {

        try {

            Font textFont = new Font(Font.FontFamily.TIMES_ROMAN, 9f, Font.NORMAL, BaseColor.BLACK);
            Font boldTextFontU = new Font(Font.FontFamily.TIMES_ROMAN, 9f, Font.BOLD | Font.UNDERLINE, BaseColor.BLACK);
            Font boldTextFont = new Font(Font.FontFamily.TIMES_ROMAN, 8.7f, Font.BOLD, BaseColor.BLACK);
            Font hdrTextFont = new Font(Font.FontFamily.TIMES_ROMAN, 10f, Font.BOLD, BaseColor.BLACK);

            PdfPTable table = new PdfPTable(5);
            table.setWidths(new int[]{3, 2, 1, 1, 1});
            table.setWidthPercentage(100);

            PdfPCell cell = null;

            cell = new PdfPCell(new Phrase("OTC-82", hdrTextFont));
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setColspan(5);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("For the month of " + otcBean.getMonth() + " - " + otcBean.getYear(), hdrTextFont));
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setColspan(5);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            cell = new PdfPCell();
            cell.setFixedHeight(10);
            cell.setColspan(5);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("To", textFont));
            cell.setColspan(5);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell();
            cell.setFixedHeight(10);
            cell.setColspan(5);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("    The Treasury Officer", textFont));
            cell.setColspan(5);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell();
            cell.setFixedHeight(20);
            cell.setColspan(5);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("    MANAGER RBI PAD AND CePC", boldTextFont));
            cell.setColspan(5);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell();
            cell.setFixedHeight(10);
            cell.setColspan(5);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("    Bhubaneswar", boldTextFont));
            cell.setColspan(5);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell();
            cell.setFixedHeight(10);
            cell.setColspan(5);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("Sir,", textFont));
            cell.setColspan(5);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell();
            cell.setFixedHeight(10);
            cell.setColspan(5);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            Chunk c1 = new Chunk("    Please pay Bill No  ", textFont);
            Chunk c2 = new Chunk(otcBean.getBillDesc() + " - " + otcBean.getYear(), boldTextFont);
            Chunk c3 = new Chunk(" as per statement enclosed.", textFont);

            Phrase p1 = new Phrase();
            p1.add(c1);
            p1.add(c2);
            p1.add(c3);

            cell = new PdfPCell(p1);
            cell.setColspan(5);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell();
            cell.setFixedHeight(20);
            cell.setColspan(5);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            PdfPTable innertable = new PdfPTable(2);
            innertable.setWidths(new float[]{0.1f, 4});
            innertable.setWidthPercentage(100);

            PdfPCell innercell = null;

            innercell = new PdfPCell(new Phrase("A", boldTextFont));
            innercell.setBorder(Rectangle.NO_BORDER);
            innercell.setHorizontalAlignment(Element.ALIGN_CENTER);
            innertable.addCell(innercell);

            Chunk c4 = new Chunk(" Please Pay Rs. ", textFont);
            Chunk c5 = new Chunk(otcBean.getNetPay() + " ( " + Numtowordconvertion.convertNumber(Integer.parseInt(otcBean.getNetPay())) + " )", boldTextFont);
            Chunk c6 = new Chunk(" by transfer credit to the saving bank Accounts of ", textFont);
            Chunk c7 = new Chunk(otcBean.getNoofEmp(), boldTextFont);
            Chunk c8 = new Chunk(" no of employees. ", textFont);

            Phrase p2 = new Phrase();
            p2.add(c4);
            p2.add(c5);
            p2.add(c6);
            p2.add(c7);
            p2.add(c8);

            innercell = new PdfPCell(p2);
            innercell.setBorder(Rectangle.NO_BORDER);
            innertable.addCell(innercell);

            cell = new PdfPCell(innertable);
            cell.setColspan(5);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            cell = new PdfPCell();
            cell.setFixedHeight(10);
            cell.setColspan(5);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            innertable = new PdfPTable(2);
            innertable.setWidths(new float[]{0.1f, 4});
            innertable.setWidthPercentage(100);

            innercell = new PdfPCell(new Phrase("B", boldTextFont));
            innercell.setBorder(Rectangle.NO_BORDER);
            innercell.setHorizontalAlignment(Element.ALIGN_CENTER);
            innertable.addCell(innercell);

            innercell = new PdfPCell(new Phrase("Please Pay " + StringUtils.repeat(".", 20) + " by transfer credit to the Drawing and Disbursing Officer's "
                    + "current Account, acc no " + StringUtils.repeat(".", 50) + " towards payment of cheques  no. of employees having no account in "
                    + "the bank.", textFont));
            innercell.setBorder(Rectangle.NO_BORDER);
            innertable.addCell(innercell);

            cell = new PdfPCell(innertable);
            cell.setColspan(5);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell();
            cell.setFixedHeight(10);
            cell.setColspan(5);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            innertable = new PdfPTable(2);
            innertable.setWidths(new float[]{0.1f, 4});
            innertable.setWidthPercentage(100);

            innercell = new PdfPCell(new Phrase("C", boldTextFont));
            innercell.setBorder(Rectangle.NO_BORDER);
            innercell.setHorizontalAlignment(Element.ALIGN_CENTER);
            innertable.addCell(innercell);

            innercell = new PdfPCell(new Phrase("Please Pay " + otcBean.getToDdoAccount() + " by transfer credit to the Drawing and Disbursing "
                    + "Officer's current Account, acc no " + StringUtils.repeat(".", 50) + " towards recovery of loan from Bank and financial "
                    + "Institutions in respect of " + StringUtils.repeat(" ", 5) + " no. of employees", textFont));
            innercell.setBorder(Rectangle.NO_BORDER);
            innertable.addCell(innercell);

            cell = new PdfPCell(innertable);
            cell.setColspan(5);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell();
            cell.setFixedHeight(20);
            cell.setColspan(5);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase(" I authorise " + StringUtils.repeat(" ", 50) + "Name", textFont));
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setColspan(5);
            table.addCell(cell);

            cell = new PdfPCell();
            cell.setFixedHeight(20);
            cell.setColspan(5);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("District Office", textFont));
            cell.setColspan(5);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell();
            cell.setFixedHeight(10);
            cell.setColspan(5);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("to collect above statement and instruments duly signed by you.", textFont));
            cell.setColspan(5);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell();
            cell.setColspan(5);
            cell.setFixedHeight(60);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("Signature Attested" + StringUtils.repeat(" ", 95) + "Yours Faithfully", textFont));
            cell.setColspan(5);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell();
            cell.setFixedHeight(20);
            cell.setColspan(5);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("Signature of" + StringUtils.repeat(" ", 95) + "Drawing and Disbursment Officer", textFont));
            cell.setColspan(5);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell();
            cell.setColspan(5);
            cell.setFixedHeight(20);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("Drawing and Disbursment Officer", textFont));
            cell.setColspan(5);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase(" ", textFont));
            cell.setColspan(5);
            cell.setFixedHeight(100);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase(" ", textFont));
            cell.setColspan(5);
            cell.setFixedHeight(100);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase(" ", textFont));
            cell.setColspan(5);
            cell.setFixedHeight(50);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

//            document.add(table);
//            document.newPage();
//
//            table = new PdfPTable(1);
//            table.setWidths(new int[]{5});
//            table.setWidthPercentage(100);
            cell = new PdfPCell(new Phrase("1. Certified that upto date Electric Bill has been paid in respect of the establishment, the salary is being drawn in this bill.", textFont));
            cell.setColspan(5);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase(" ", textFont));
            cell.setColspan(5);
            cell.setFixedHeight(25);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("2. Certified that the G.I.S Premium has been deposited according to the basic pay of all employees and a discripency if any be found later on I shall be held responsible.", textFont));
            cell.setColspan(5);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase(" ", textFont));
            cell.setColspan(5);
            cell.setFixedHeight(25);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("3. Certified that all money drawn in Cash/B.D upto the period " + otcBean.getLastDate() + " has been fully disbursed and no money is lying un-disbursed with me.", textFont));
            cell.setColspan(5);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase(" ", textFont));
            cell.setFixedHeight(25);
            cell.setColspan(5);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("4. Certified that the net claim of this Bill will be transferred electronically into the Bank account of the beneficiaries and the correct Bank details of the beneficiaries have been furnised in a seperate list after due verification and uploaded in the Treasury Portal bearing Reference ID :" + otcBean.getBenRefNo(), textFont));
            cell.setColspan(5);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase(" ", textFont));
            cell.setColspan(5);
            cell.setFixedHeight(25);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("5. Certified that neccessary certificate from the employees whose HRA is claimed in this bill has been obtained and kept in office for ready reference.", textFont));
            cell.setColspan(5);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase(" ", textFont));
            cell.setColspan(5);
            cell.setFixedHeight(25);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("6. Certified that the proceeds of the bill is to be paid electronically to the accounts of the beneficiaries a per the list enclosed or the D.D.O.s current accounts, suspense head in case of unsuccessful payments.", textFont));
            cell.setColspan(5);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase(" ", textFont));
            cell.setColspan(5);
            cell.setFixedHeight(25);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("7. Certified that the net claim of the bill will be transferred electronically in to the bank accounts of beneficiaries and the correct bank details of the beneficiaries have been furnished in a separate list after due verification and uploaded in the Treasury Portal bearing reference No :" + otcBean.getBenRefNo() + "\n\n", textFont));
            cell.setColspan(5);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase(" ", textFont));
            cell.setColspan(5);
            cell.setFixedHeight(25);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("UNIT", boldTextFontU));
            cell.setFixedHeight(40);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("PAY/GRADE PAY", boldTextFontU));
            cell.setFixedHeight(40);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("D.A", boldTextFontU));
            cell.setFixedHeight(40);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("HRA", boldTextFontU));
            cell.setFixedHeight(40);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("OA", boldTextFontU));
            cell.setFixedHeight(40);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("ALLOTMENT RECEIVED DURING ", boldTextFont));
            cell.setFixedHeight(30);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
            table.addCell(cell);
            cell = new PdfPCell();
            table.addCell(cell);
            cell = new PdfPCell();
            table.addCell(cell);
            cell = new PdfPCell();
            table.addCell(cell);
            cell = new PdfPCell();
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("EXPDT. INCLUDING THIS BILL", boldTextFont));
            cell.setFixedHeight(30);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase(StringUtils.defaultString(otcBean.getGradePayAmt()), textFont));
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase(StringUtils.defaultString(otcBean.getDaAmt()), textFont));
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase(StringUtils.defaultString(otcBean.getHraAmt()), textFont));
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase(StringUtils.defaultString(otcBean.getOtherAllowanceAmt()), textFont));
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("BALANCE", boldTextFont));
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            cell = new PdfPCell();
            table.addCell(cell);

            cell = new PdfPCell();
            table.addCell(cell);

            cell = new PdfPCell();
            table.addCell(cell);

            cell = new PdfPCell();
            table.addCell(cell);

            document.add(table);

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    @Override
    public OtcPlanForm40Bean getOTCForm40ScheduleDetails(String billno, int aqYear, int aqMonth, int totGpAmt, CommonReportParamBean crb) {

        Connection con = null;
        Statement stmt = null;
        ResultSet rs = null;
        Statement stmt1 = null;
        ResultSet rs1 = null;
        OtcPlanForm40Bean otcBean = new OtcPlanForm40Bean();
        int netunder = 0;
        int basic = 0;
        String empcnt = "";
        int totda = 0;
        int totgpf = 0;
        int totga = 0;
        int grandtotgpf = 0;
        String aqDtlsTbl = "";

        try {
            con = dataSource.getConnection();
            stmt = con.createStatement();
            stmt1 = con.createStatement();

            aqDtlsTbl = getAqDtlsTableName(billno);
            String otcQuery = "SELECT * FROM(select G_TREASURY.TR_NAME,G_BANK.BANK_NAME,G_BRANCH.BRANCH_NAME,(BILL_MAST.GROSS_AMT - BILL_MAST.DED_AMT) "
                    + "NET_AMOUNT,BILL_MAST.REC_BY,BILL_MAST.DESG,G_POST.POST,BILL_MAST.GROSS_AMT,DEMAND_NO,MAJOR_HEAD,SUB_MAJOR_HEAD,MINOR_HEAD,"
                    + "SUB_MINOR_HEAD1,SUB_MINOR_HEAD2,SUB_MINOR_HEAD3,BEN_REF_NO,TOKEN_NO,PLAN,BILL_MAST.DDO_CODE from (select * from bill_mast WHERE "
                    + "BILL_NO='" + billno + "' and aq_month=" + aqMonth + " and aq_year=" + aqYear + ") bill_mast LEFT OUTER join G_POST "
                    + "on bill_mast.OFF_DDO=G_POST.POST_CODE LEFT OUTER JOIN G_BANK ON "
                    + "bill_mast.BANK_CODE=G_BANK.BANK_CODE LEFT OUTER join G_BRANCH ON bill_mast.BRANCH_CODE=G_BRANCH.BRANCH_CODE LEFT OUTER join "
                    + "G_TREASURY ON bill_mast.TR_CODE=G_TREASURY.TR_CODE)TAB LEFT OUTER JOIN G_PLAN_STATUS ON TAB.PLAN=G_PLAN_STATUS.DESCRIPTION";
            rs = stmt.executeQuery(otcQuery);
            while (rs.next()) {
                if (rs.getString("BEN_REF_NO") != null && !rs.getString("BEN_REF_NO").equals("")) {
                    otcBean.setBenRefNo(rs.getString("BEN_REF_NO"));
                }
                otcBean.setOtcCode(rs.getString("PLAN_STATUS"));
                otcBean.setOtcStatus(rs.getString("PLAN_DESCPN"));

                otcBean.setTreasuryName(rs.getString("TR_NAME"));
                otcBean.setDemandNo(rs.getString("DEMAND_NO"));
                otcBean.setMajorHead(rs.getString("MAJOR_HEAD"));
                otcBean.setSubMajorHead(rs.getString("SUB_MAJOR_HEAD"));
                otcBean.setMinorHead(rs.getString("MINOR_HEAD"));
                otcBean.setSubMinorHead(rs.getString("SUB_MINOR_HEAD1"));
                otcBean.setSubMinorHead2(rs.getString("SUB_MINOR_HEAD2"));
                otcBean.setSubMinorHead3(rs.getString("SUB_MINOR_HEAD3"));
                otcBean.setDdoCode(rs.getString("DDO_CODE"));
                otcBean.setToken(rs.getString("TOKEN_NO"));
            }

            String qry2 = "select sum(AQ_MAST.CUR_BASIC) basic,count(AQ_MAST.EMP_CODE) employees from AQ_MAST where BILL_NO='" + billno + "'";
            rs1 = stmt1.executeQuery(qry2);
            while (rs1.next()) {
                if (rs1.getString("basic") != null && !rs1.getString("basic").equals("")) {
                    basic = Integer.parseInt(rs1.getString("basic"));
                }
                empcnt = rs1.getString("employees");
            }

            BillAmtDetails billAmtDetail = AqFunctionalities.BillAmt(con, billno, aqDtlsTbl, aqYear, aqMonth);
            otcBean.setNetAmount("" + (int) billAmtDetail.getBillNet());
            otcBean.setDeductTot("" + (int) billAmtDetail.getBillDeduction());
            otcBean.setGrossTot("" + (int) billAmtDetail.getBillGross());
            netunder = (int) billAmtDetail.getBillNet() + 1;
            otcBean.setNetAmtUnder("" + netunder);
            if (otcBean.getNetAmount() != null && !otcBean.getNetAmount().equals("")) {
                otcBean.setNetAmountWord(Numtowordconvertion.convertNumber(Integer.parseInt(otcBean.getNetAmount())).toUpperCase());
            }
            otcBean.setNetAmtUnderWord(Numtowordconvertion.convertNumber(netunder).toUpperCase());
            otcBean.setBasicPlusGp(Integer.toString(basic + totGpAmt));
            otcBean.setTotalDa(Integer.toString(totda));
            grandtotgpf = totgpf + totga;
            otcBean.setTotalGpf(Integer.toString(grandtotgpf));
            otcBean.setGrandTotinWord(Numtowordconvertion.convertNumber((int) billAmtDetail.getBillGross()).toUpperCase());

            if (crb.getBilldesc() != null && !crb.getBilldesc().equals("")) {
                otcBean.setBillDesc(crb.getBilldesc());
            }
            if (crb.getBilldate() != null && !crb.getBilldate().equals("")) {
                otcBean.setBillDate(crb.getBilldate());
            }
            if (crb.getDdoname() != null && !crb.getDdoname().equals("")) {
                otcBean.setDdoName(crb.getDdoname());
            }
            otcBean.setBillMonth(CalendarCommonMethods.getMonthAsString(crb.getAqmonth()));
            otcBean.setBillYear("" + crb.getAqyear());
            otcBean.setOfficeName(crb.getOfficename());
            otcBean.setTanNo(crb.getTanno());
            otcBean.setPayhead(new CommonScheduleMethods().getADCodeHead(con, billno, "GP", aqDtlsTbl, aqMonth, aqYear));
            otcBean.setDahead(new CommonScheduleMethods().getADCodeHead(con, billno, "DA", aqDtlsTbl, aqMonth, aqYear));

        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            DataBaseFunctions.closeSqlObjects(rs, stmt);
            DataBaseFunctions.closeSqlObjects(rs1, stmt1);
            DataBaseFunctions.closeSqlObjects(con);
        }
        return otcBean;
    }

    @Override
    public List getOTCForm40ScheduleEmpList(String billno, int aqYear, int aqMonth) {

        Connection con = null;
        Statement stmt = null;
        ResultSet rs = null;
        ArrayList otc40ScheduleList = new ArrayList();
        ScheduleHelper otcBean = new ScheduleHelper();
        String aqDtlsTbl = "";

        try {
            con = dataSource.getConnection();
            stmt = con.createStatement();
            aqDtlsTbl = getAqDtlsTableName(billno);

            otcBean.setDeductionList(new CommonScheduleMethods().allowanceDeductionList(con, aqMonth, aqYear + "", "D", billno, aqDtlsTbl));
            otcBean.setAllowanceList(new CommonScheduleMethods().allowanceDeductionList(con, aqMonth, aqYear + "", "A", billno, aqDtlsTbl));

            otcBean.setPagebreakOTC("<input type=\"button\" name=\"pagebreak1\" style=\"page-break-before: always;width: 0;height: 0\"/>");
            otc40ScheduleList.add(otcBean);

        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            DataBaseFunctions.closeSqlObjects(rs, stmt);
            DataBaseFunctions.closeSqlObjects(con);
        }
        return otc40ScheduleList;
    }

    @Override
    public OtcFormBean getOTCForm52ScheduleDetails(String billno, int year, int month) {

        Connection con = null;
        PreparedStatement pstmt = null;
        ResultSet rs = null;
        Statement stmt1 = null;
        ResultSet rs1 = null;
        Statement stmt2 = null;
        OtcFormBean otcBean = new OtcFormBean();

        int basic = 0;
        String empcnt = "";
        String sqlAllowance = "";
        String sqlDeduction = "";
        int allowance = 0;
        int deduction = 0;
        String net = "";
        String gross = "";
        String aqDtlsTbl = "";
        try {
            con = dataSource.getConnection();
            stmt1 = con.createStatement();
            stmt2 = con.createStatement();

            aqDtlsTbl = getAqDtlsTableName(billno);
            String otcQry1 = "SELECT BILL_DESC,BILL_DATE,AQ_YEAR,AQ_MONTH,G_OFFICE.OFF_EN,DIST_NAME,STATE_NAME, G_POST.POST,G_OFFICE.OFF_EN,"
                    + "G_OFFICE.DDO_REG_NO,G_DEPARTMENT.DEPARTMENT_NAME,TAN_NO FROM (SELECT OFF_CODE,BILL_DESC,AQ_YEAR,AQ_MONTH,BILL_DATE FROM "
                    + "BILL_MAST WHERE BILL_NO=?) BILL_NO INNER JOIN G_OFFICE ON BILL_NO.OFF_CODE = G_OFFICE.OFF_CODE LEFT OUTER JOIN G_POST ON "
                    + "G_OFFICE.DDO_POST=G_POST.POST_CODE LEFT OUTER JOIN G_DEPARTMENT ON G_OFFICE.DEPARTMENT_CODE =G_DEPARTMENT.DEPARTMENT_CODE LEFT OUTER "
                    + "JOIN G_DISTRICT ON G_OFFICE.DIST_CODE=G_DISTRICT.DIST_CODE LEFT OUTER JOIN G_STATE ON G_OFFICE.STATE_CODE=G_STATE.STATE_CODE";
            pstmt = con.prepareStatement(otcQry1);
            pstmt.setInt(1, Integer.parseInt(billno));
            rs = pstmt.executeQuery();
            if (rs.next()) {
                otcBean.setBillDesc(rs.getString("BILL_DESC"));
                otcBean.setBillDate(CommonFunctions.getFormattedOutputDate1(rs.getDate("BILL_DATE")));
            }

            String otcQry2 = "select G_TREASURY.TR_NAME,G_BANK.BANK_NAME,G_BRANCH.BRANCH_NAME,(BILL_MAST.GROSS_AMT - BILL_MAST.DED_AMT) NET_AMOUNT,"
                    + "BILL_MAST.REC_BY,BILL_MAST.DESG,G_POST.POST,BILL_MAST.GROSS_AMT from (select * from bill_mast where BILL_NO=?) "
                    + "bill_mast LEFT OUTER join G_POST on bill_mast.OFF_DDO=G_POST.POST_CODE LEFT OUTER join G_BANK ON bill_mast.BANK_CODE="
                    + "G_BANK.BANK_CODE LEFT OUTER join G_BRANCH ON bill_mast.BRANCH_CODE=G_BRANCH.BRANCH_CODE LEFT OUTER join G_TREASURY ON "
                    + "bill_mast.TR_CODE=G_TREASURY.TR_CODE";
            pstmt = con.prepareStatement(otcQry2);
            pstmt.setInt(1, Integer.parseInt(billno));
            rs = pstmt.executeQuery();
            while (rs.next()) {
                otcBean.setTreasuryOffice(rs.getString("TR_NAME"));
                otcBean.setBranchManager(rs.getString("BANK_NAME"));
                otcBean.setBranchName(rs.getString("BRANCH_NAME"));
                otcBean.setNetAmount(rs.getString("NET_AMOUNT"));

                if (otcBean.getNetAmount() != null && !otcBean.getNetAmount().equals("")) {
                    otcBean.setNetAmountWord(Numtowordconvertion.convertNumber(Integer.parseInt(otcBean.getNetAmount())));
                } else {

                    stmt1 = con.createStatement();
                    String otcQry3 = "select sum(AQ_MAST.CUR_BASIC) basic,count(AQ_MAST.EMP_CODE) employees from AQ_MAST where BILL_NO='" + billno + "'";

                    rs1 = stmt1.executeQuery(otcQry3);
                    while (rs1.next()) {
                        if (rs1.getString("basic") != null && !rs1.getString("basic").equals("")) {
                            basic = Integer.parseInt(rs1.getString("basic"));
                        }
                        empcnt = rs1.getString("employees");
                    }
                    sqlAllowance = "select sum(AQ_DTLS.AD_AMT) allowance from (select AQSL_NO from AQ_MAST where BILL_NO='" + billno + "' and aq_year='" + year + "' and aq_month='" + month + "') AQ_MAST "
                            + "left outer join (select AQSL_NO,AD_AMT from " + aqDtlsTbl + " where AQ_DTLS.AD_TYPE='A') AQ_DTLS on AQ_MAST.AQSL_NO=AQ_DTLS.AQSL_NO";

                    sqlDeduction = "select sum(AQ_DTLS.AD_AMT) allowance from (select AQSL_NO from AQ_MAST where BILL_NO='" + billno + "' and aq_year='" + year + "' and aq_month='" + month + "') AQ_MAST "
                            + "left outer join (select AQSL_NO,AD_AMT from " + aqDtlsTbl + " where AQ_DTLS.AD_TYPE='D') AQ_DTLS on AQ_MAST.AQSL_NO=AQ_DTLS.AQSL_NO";

                    stmt2 = con.createStatement();
                    allowance = new CommonScheduleMethods().getAllowanceOrDeduction(stmt2, sqlAllowance);
                    deduction = new CommonScheduleMethods().getAllowanceOrDeduction(stmt2, sqlDeduction);
                    net = Integer.toString(basic + allowance - deduction);
                    gross = Integer.toString(basic + allowance);
                    otcBean.setNetAmount(net);
                    otcBean.setNetAmountWord(Numtowordconvertion.convertNumber(Integer.parseInt(otcBean.getNetAmount())).toUpperCase());
                }
                otcBean.setDdoSignature(rs.getString("POST"));
                otcBean.setBillNo(billno);
            }

        } catch (Exception e) {
            e.printStackTrace();
        } finally {

            DataBaseFunctions.closeSqlObjects(rs1, stmt2);
            DataBaseFunctions.closeSqlObjects(con);
        }
        return otcBean;
    }

    @Override
    public OtcFormBean getArrOTCForm52ScheduleDetails(int billno) {
        Connection con = null;
        PreparedStatement pstmt = null;
        ResultSet rs = null;

        OtcFormBean otcBean = new OtcFormBean();

        int basic = 0;
        String empcnt = "";
        String sqlAllowance = "";
        String sqlDeduction = "";
        int allowance = 0;
        int deduction = 0;
        String net = "";
        String gross = "";

        try {
            con = dataSource.getConnection();
            String otcQry1 = "SELECT BILL_DESC,BILL_DATE,AQ_YEAR,AQ_MONTH,G_OFFICE.OFF_EN,DIST_NAME,STATE_NAME, G_POST.POST,G_OFFICE.OFF_EN,"
                    + "G_OFFICE.DDO_REG_NO,G_DEPARTMENT.DEPARTMENT_NAME,TAN_NO FROM (SELECT OFF_CODE,BILL_DESC,AQ_YEAR,AQ_MONTH,BILL_DATE FROM "
                    + "BILL_MAST WHERE BILL_NO=?) BILL_NO INNER JOIN G_OFFICE ON BILL_NO.OFF_CODE = G_OFFICE.OFF_CODE LEFT OUTER JOIN G_POST ON "
                    + "G_OFFICE.DDO_POST=G_POST.POST_CODE LEFT OUTER JOIN G_DEPARTMENT ON G_OFFICE.DEPARTMENT_CODE =G_DEPARTMENT.DEPARTMENT_CODE LEFT OUTER "
                    + "JOIN G_DISTRICT ON G_OFFICE.DIST_CODE=G_DISTRICT.DIST_CODE LEFT OUTER JOIN G_STATE ON G_OFFICE.STATE_CODE=G_STATE.STATE_CODE";
            pstmt = con.prepareStatement(otcQry1);
            pstmt.setInt(1, billno);
            rs = pstmt.executeQuery();
            if (rs.next()) {
                otcBean.setBillDesc(rs.getString("BILL_DESC"));
                otcBean.setBillDate(CommonFunctions.getFormattedOutputDate1(rs.getDate("BILL_DATE")));
            }

            String otcQry2 = "select G_TREASURY.TR_NAME,G_BANK.BANK_NAME,G_BRANCH.BRANCH_NAME,(BILL_MAST.GROSS_AMT - BILL_MAST.DED_AMT) NET_AMOUNT,"
                    + "BILL_MAST.REC_BY,BILL_MAST.DESG,G_POST.POST,BILL_MAST.GROSS_AMT from (select * from bill_mast where BILL_NO=?) "
                    + "bill_mast LEFT OUTER join G_POST on bill_mast.OFF_DDO=G_POST.POST_CODE LEFT OUTER join G_BANK ON bill_mast.BANK_CODE="
                    + "G_BANK.BANK_CODE LEFT OUTER join G_BRANCH ON bill_mast.BRANCH_CODE=G_BRANCH.BRANCH_CODE LEFT OUTER join G_TREASURY ON "
                    + "bill_mast.TR_CODE=G_TREASURY.TR_CODE";
            pstmt = con.prepareStatement(otcQry2);
            pstmt.setInt(1, billno);
            rs = pstmt.executeQuery();
            while (rs.next()) {
                otcBean.setTreasuryOffice(rs.getString("TR_NAME"));
                otcBean.setBranchManager(rs.getString("BANK_NAME"));
                otcBean.setBranchName(rs.getString("BRANCH_NAME"));
                otcBean.setNetAmount(rs.getString("NET_AMOUNT"));
                otcBean.setDdoSignature(rs.getString("POST"));
                otcBean.setBillNo(billno + "");
            }

            /*Calculate Net Amount*/
            if (otcBean.getNetAmount() != null && !otcBean.getNetAmount().equals("")) {
                otcBean.setNetAmountWord(Numtowordconvertion.convertNumber(Integer.parseInt(otcBean.getNetAmount())));
            } else {

                String otcQry3 = "select sum(AQ_MAST.CUR_BASIC) basic,count(AQ_MAST.EMP_CODE) employees from AQ_MAST where BILL_NO=?";
                pstmt = con.prepareStatement(otcQry3);
                pstmt.setInt(1, billno);
                rs = pstmt.executeQuery();
                if (rs.next()) {
                    if (rs.getString("basic") != null && !rs.getString("basic").equals("")) {
                        basic = Integer.parseInt(rs.getString("basic"));
                    }
                    empcnt = rs.getString("employees");
                }

                sqlAllowance = "select sum(AQ_DTLS.AD_AMT) allowance from (select AQSL_NO from ARR_MAST where BILL_NO=?) AQ_MAST "
                        + "left outer join ARR_DTLS on ARR_MAST.AQSL_NO=ARR_DTLS.AQSL_NO";
                pstmt = con.prepareStatement(sqlAllowance);
                pstmt.setInt(1, billno);
                rs = pstmt.executeQuery();
                if (rs.next()) {
                    if (rs.getString(1) != null && !rs.getString(1).equals("")) {
                        allowance = Integer.parseInt(rs.getString(1));
                    }
                }

                net = Integer.toString(basic + allowance - deduction);
                gross = Integer.toString(basic + allowance);
                otcBean.setNetAmount(net);
                otcBean.setNetAmountWord(Numtowordconvertion.convertNumber(Integer.parseInt(otcBean.getNetAmount())).toUpperCase());
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            DataBaseFunctions.closeSqlObjects(rs, pstmt);
            DataBaseFunctions.closeSqlObjects(con);
        }
        return otcBean;
    }

    @Override
    public VoucherSlipBean getVoucherSlipScheduleDetails(String billno, int aqYear, int aqMonth) {

        Connection con = null;
        Statement stmt = null;
        ResultSet rs = null;
        VoucherSlipBean voucherBean = new VoucherSlipBean();

        int month = 0;
        String year = "";
        String billdesc = "";
        String demandNo = "";
        String majorHead = "";
        String minorHeadDesc = "";
        String minorHead = "";
        String smHead1Desc = "";
        String postType = "";
        String smHead2Desc = "";
        String smHead3 = "";
        String treasuryCode = "";
        double billGrossAmt = 0.0;
        double billDeductionAmt = 0.0;
        double billNetAmt = 0.0;
        String aqDtlsTbl = "";

        Statement stmt1 = null;
        ResultSet rs1 = null;

        Statement stmt2 = null;

        int basic = 0;
        int allowance = 0;
        int deduction = 0;
        String net = "";
        String gross = "";

        try {
            con = dataSource.getConnection();
            stmt = con.createStatement();
            aqDtlsTbl = getAqDtlsTableName(billno);
            PayrollCommonFunction prcf = new PayrollCommonFunction();
            CommonReportParamBean bean = prcf.getCommonReportParameter(con, billno);

            voucherBean.setDdoName(bean.getDdoname());
            voucherBean.setOfficeName(bean.getOfficename());

            stmt = con.createStatement();
            String voucherQry1 = "SELECT G_TREASURY.TR_NAME,Bill_mast.BILL_DATE,Bill_mast.BILL_DESC,Bill_mast.AQ_MONTH,Bill_mast.AQ_YEAR from "
                    + "(select * from Bill_mast where bill_no='" + billno + "') Bill_mast LEFT OUTER JOIN G_TREASURY on "
                    + "Bill_mast.TR_CODE=G_TREASURY.TR_CODE";

            rs = stmt.executeQuery(voucherQry1);
            if (rs.next()) {
                month = Integer.parseInt(rs.getString("AQ_MONTH"));
                year = rs.getString("AQ_YEAR");
                billdesc = rs.getString("BILL_DESC");
            }
            voucherBean.setMonth((month + 1) + "");
            voucherBean.setYear(year);
            voucherBean.setBillDesc(billdesc);

            DataBaseFunctions.closeSqlObjects(rs, stmt);

            stmt = con.createStatement();
            String voucherQry2 = "SELECT gross_amt,ded_amt,DEMAND_NO,MAJOR_HEAD,MINOR_HEAD_DESC,MINOR_HEAD,SUB_MINOR_HEAD1_DESC,POST_TYPE,SUB_MINOR_HEAD2_DESC,"
                    + "SUB_MINOR_HEAD3,TR_CODE FROM (SELECT gross_amt,ded_amt,DEMAND_NO,MAJOR_HEAD,MINOR_HEAD_DESC,MINOR_HEAD,SUB_MINOR_HEAD1_DESC,PLAN,"
                    + "SUB_MINOR_HEAD2_DESC,SUB_MINOR_HEAD3,TR_CODE FROM BILL_MAST WHERE BILL_NO='" + billno + "')billmast left outer join G_POST_TYPE "
                    + "on G_POST_TYPE.POST_CODE=billmast.PLAN";

            rs = stmt.executeQuery(voucherQry2);
            if (rs.next()) {
                if (rs.getString("DEMAND_NO") != null && !rs.getString("DEMAND_NO").equals("")) {
                    demandNo = rs.getString("DEMAND_NO");
                } else {
                    demandNo = "";
                }
                if (rs.getString("MAJOR_HEAD") != null && !rs.getString("MAJOR_HEAD").equals("")) {
                    majorHead = rs.getString("MAJOR_HEAD");
                } else {
                    majorHead = "";
                }
                if (rs.getString("MINOR_HEAD_DESC") != null && !rs.getString("MINOR_HEAD_DESC").equals("")) {
                    minorHeadDesc = rs.getString("MINOR_HEAD_DESC");
                } else {
                    minorHeadDesc = "";
                }
                if (rs.getString("MINOR_HEAD") != null && !rs.getString("MINOR_HEAD").equals("")) {
                    minorHead = rs.getString("MINOR_HEAD");
                } else {
                    minorHead = "";
                }
                if (rs.getString("SUB_MINOR_HEAD1_DESC") != null && !rs.getString("SUB_MINOR_HEAD1_DESC").equals("")) {
                    smHead1Desc = rs.getString("SUB_MINOR_HEAD1_DESC");
                } else {
                    smHead1Desc = "";
                }
                if (rs.getString("POST_TYPE") != null && !rs.getString("POST_TYPE").equals("")) {
                    postType = rs.getString("POST_TYPE");
                } else {
                    postType = "";
                }
                if (rs.getString("SUB_MINOR_HEAD2_DESC") != null && !rs.getString("SUB_MINOR_HEAD2_DESC").equals("")) {
                    smHead2Desc = rs.getString("SUB_MINOR_HEAD2_DESC");
                } else {
                    smHead2Desc = "";
                }
                if (rs.getString("SUB_MINOR_HEAD3") != null && !rs.getString("SUB_MINOR_HEAD3").equals("")) {
                    smHead3 = rs.getString("SUB_MINOR_HEAD3");
                } else {
                    smHead3 = "";
                }
                if (rs.getString("TR_CODE") != null && !rs.getString("TR_CODE").equals("")) {
                    treasuryCode = rs.getString("TR_CODE");
                }
                billGrossAmt = rs.getInt("gross_amt");
                billDeductionAmt = rs.getInt("ded_amt");

                billNetAmt = billGrossAmt - billDeductionAmt;

                if (billNetAmt == 0.0) {
                    stmt1 = con.createStatement();
                    String otcQry3 = "select sum(AQ_MAST.CUR_BASIC) basic,count(AQ_MAST.EMP_CODE) employees from AQ_MAST where BILL_NO='" + billno + "'";

                    rs1 = stmt1.executeQuery(otcQry3);
                    while (rs1.next()) {
                        if (rs1.getString("basic") != null && !rs1.getString("basic").equals("")) {
                            basic = Integer.parseInt(rs1.getString("basic"));
                        }
                    }
                    String sqlAllowance = "select sum(AQ_DTLS.AD_AMT) allowance from (select * from AQ_MAST where BILL_NO='" + billno + "' AND AQ_MONTH=" + aqMonth + " AND AQ_year=" + aqYear + " ) AQ_MAST "
                            + "left outer join (select * from " + aqDtlsTbl + " where AD_TYPE='A'  AND AQ_MONTH=" + aqMonth + " AND AQ_YEAR=" + aqYear + " ) AQ_DTLS on AQ_MAST.AQSL_NO=AQ_DTLS.AQSL_NO";

                    String sqlDeduction = "select sum(AQ_DTLS.AD_AMT) allowance from (select * from AQ_MAST where BILL_NO='" + billno + "'  AND AQ_MONTH=" + aqMonth + " AND AQ_year=" + aqYear + " ) AQ_MAST "
                            + "left outer join (select * from " + aqDtlsTbl + " where AD_TYPE='D'  AND AQ_MONTH=" + aqMonth + " AND AQ_YEAR=" + aqYear + " ) AQ_DTLS on AQ_MAST.AQSL_NO=AQ_DTLS.AQSL_NO";

                    stmt2 = con.createStatement();
                    allowance = new CommonScheduleMethods().getAllowanceOrDeduction(stmt2, sqlAllowance);
                    deduction = new CommonScheduleMethods().getAllowanceOrDeduction(stmt2, sqlDeduction);
                    net = Integer.toString(basic + allowance - deduction);
                    gross = Integer.toString(basic + allowance);

                    billGrossAmt = Double.parseDouble(gross);
                    billNetAmt = Double.parseDouble(net);
                }

                voucherBean.setGrossAmount(Double.valueOf(billGrossAmt + "").longValue() + "");
                voucherBean.setNetAmount(Double.valueOf(billNetAmt + "").longValue() + "");
            }
            voucherBean.setDemandno(demandNo);
            voucherBean.setMajorhead(majorHead);
            voucherBean.setMinorheaddesc(minorHeadDesc);
            voucherBean.setMinorhead(minorHead);
            voucherBean.setSubminorhead1desc(smHead1Desc);
            voucherBean.setPostType(postType);
            voucherBean.setSubminorhead2desc(smHead2Desc);
            voucherBean.setSubminorhead3(smHead3);
            voucherBean.setTreasuryCode(treasuryCode);

            voucherBean.setMonth((month + 1) + "");
            voucherBean.setYear(year);
            voucherBean.setBillDesc(billdesc);

            DataBaseFunctions.closeSqlObjects(rs, stmt);

            stmt = con.createStatement();
            String trName = "";
            if (!treasuryCode.equals("") && treasuryCode != null) {
                String selQry1 = "SELECT TR_NAME FROM G_TREASURY WHERE TR_CODE='" + treasuryCode + "'";
                rs = stmt.executeQuery(selQry1);
                if (rs.next()) {
                    if (rs.getString("TR_NAME") != null && !rs.getString("TR_NAME").equals("")) {
                        trName = rs.getString("TR_NAME");
                    } else {
                        trName = " ";
                    }
                }
            } else {
                trName = " ";
            }
            voucherBean.setTreasuryName(trName);

        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            DataBaseFunctions.closeSqlObjects(con);
        }
        return voucherBean;
    }

    @Override
    public List getPeriodicAbsenteeStatementScheduleEmpList(String billno) {

        Connection con = null;
        PreparedStatement pstmt = null;
        ResultSet rs = null;
        PreparedStatement pstmt1 = null;
        ResultSet rs1 = null;
        List absenteeStmtList = new ArrayList();

        ScheduleHelper sHelperBean = null;
        PeriodicAbsenteeStmtBean absentStmtBean = null;
        int mnth = 0;
        int cnt = 0;
        String perd = "";
        try {
            con = dataSource.getConnection();

            String absentQry = "select EMP_CODE,EMP_NAME,GPF_ACC_NO,AQ_MONTH,AQ_YEAR,CUR_BASIC,AQ_DAY,CUR_DESG from aq_mast where "
                    + "bill_no='" + billno + "' AND EMP_CODE IS NOT NULL ORDER BY SEC_SL_NO";
            pstmt = con.prepareStatement(absentQry);
            rs = pstmt.executeQuery();
            while (rs.next()) {
                sHelperBean = new ScheduleHelper();

                mnth = rs.getInt("AQ_MONTH");
                String absentQry1 = "SELECT ABS_FROM,ABS_TO FROM EMP_ABSENTEE WHERE EMP_ID='" + rs.getString("EMP_CODE") + "' AND MONTH='" + mnth + "' "
                        + "AND YEAR='" + rs.getString("AQ_YEAR") + "' order by ABS_FROM";
                pstmt1 = con.prepareStatement(absentQry1);
                rs1 = pstmt1.executeQuery();
                ArrayList localList = new ArrayList();
                cnt = 0;

                while (rs1.next()) {
                    cnt++;
                    absentStmtBean = new PeriodicAbsenteeStmtBean();

                    absentStmtBean.setNameofAbsentee(rs.getString("EMP_NAME"));
                    absentStmtBean.setGpfNo(rs.getString("GPF_ACC_NO"));

                    if (rs.getString("CUR_BASIC") != null && !rs.getString("CUR_BASIC").equals("")) {
                        absentStmtBean.setRateofPay("" + rs.getInt("CUR_BASIC") / rs.getInt("AQ_DAY"));
                    }
                    absentStmtBean.setEmpname(rs.getString("EMP_NAME"));
                    absentStmtBean.setSubPost(rs.getString("CUR_DESG"));

                    if (rs1.getString("ABS_FROM") != null && !rs1.getString("ABS_FROM").equals("")) {
                        perd = CommonFunctions.getFormattedOutputDate1(rs1.getDate("ABS_FROM"));
                    }
                    if (rs1.getString("ABS_TO") != null && !rs1.getString("ABS_TO").equals("")) {
                        perd = perd + " to " + CommonFunctions.getFormattedOutputDate1(rs1.getDate("ABS_TO"));
                    }
                    absentStmtBean.setPeriod(perd);
                    localList.add(absentStmtBean);
                }
                sHelperBean.setRowspan("" + cnt);
                sHelperBean.setHelperList(localList);
            }
            absenteeStmtList.add(sHelperBean);

        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            DataBaseFunctions.closeSqlObjects(rs, pstmt);
            DataBaseFunctions.closeSqlObjects(rs1, pstmt1);
            DataBaseFunctions.closeSqlObjects(con);
        }
        return absenteeStmtList;
    }

    @Override
    public BillContributionRepotBean getBillContributionRepotScheduleHeaderDetails(String annexure, String billno) {

        Connection con = null;
        int billmonth = 0;
        Statement stmt = null;
        ResultSet rs = null;
        BillContributionRepotBean billContBean = new BillContributionRepotBean();
        try {
            con = dataSource.getConnection();
            stmt = con.createStatement();
            PayrollCommonFunction prcf = new PayrollCommonFunction();
            CommonReportParamBean bean = prcf.getCommonReportParameter(con, billno);

            if (bean.getBilldesc() != null && !bean.getBilldesc().equals("")) {
                billContBean.setBillDesc(bean.getBilldesc());
            }
            if (bean.getBilldate() != null && !bean.getBilldate().equals("")) {
                billContBean.setBillDate(bean.getBilldate());
            }
            if (bean.getDdoname() != null && !bean.getDdoname().equals("")) {
                billContBean.setDdoName(bean.getDdoname());
            }
            if (bean.getDdoregno() != null && !bean.getDdoregno().equals("")) {
                billContBean.setDdoRegdNo(bean.getDdoregno());
            }
            if (bean.getDtoregno() != null && !bean.getDtoregno().equals("")) {
                billContBean.setDtoRegdNo(bean.getDtoregno());
            }
            billmonth = bean.getAqmonth();
            billContBean.setAqMonth(String.valueOf(billmonth++));
            billContBean.setBillMonth("" + billmonth);
            billContBean.setBillYear("" + bean.getAqyear());
            billContBean.setOffName(bean.getOfficename());
            billContBean.setBillNo(billno);
            billContBean.setAnnexure(annexure);

            String trNameQry = "SELECT TR_NAME FROM (SELECT TR_CODE FROM BILL_MAST WHERE BILL_NO='" + billno + "') BILL_MAST INNER JOIN G_TREASURY ON "
                    + "BILL_MAST.TR_CODE=G_TREASURY.TR_CODE";
            rs = stmt.executeQuery(trNameQry);
            if (rs.next()) {
                billContBean.setTreasuryName(rs.getString("TR_NAME"));
            }

        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            DataBaseFunctions.closeSqlObjects(con);
        }
        return billContBean;
    }

    @Override
    public List getBillContributionRepotScheduleEmpList(String annexure, String billno, int aqYear, int aqMonth) {

        Connection con = null;
        Statement stmt = null;
        ResultSet rs = null;
        ArrayList billContScheduleList = new ArrayList();
        BillContributionRepotBean billContBean = null;
        String arrearAmt = null;
        String arrearInst = null;
        int gtotal = 0;
        int slno = 0;
        int cpfPlusGcpf = 0;
        int totCpfPlusGcpf = 0;
        int annexeTotalGcpf = 0;
        int annexeTotalCpf = 0;
        double basic = 0.0;
        double gp = 0.0;
        double da = 0.0;
        double cpf = 0.0;
        double cp = 0.0;
        double gcpf = 0.0;
        double total = 0.0;
        double totalannex3 = 0.0;
        double grandtotal = 0;
        int cpfCaryFrd = 0;
        int totCaryFrd = 0;
        double anx3CaryFrd = 0;
        String aqDtlsTbl = "";

        int gtotal14 = 0;

        try {
            con = dataSource.getConnection();
            stmt = con.createStatement();
            aqDtlsTbl = getAqDtlsTableName(billno);
            String query = "SELECT TAB1.*,G_POST.POST  FROM(SELECT AQ_MAST.*,G_SPC.GPC  FROM (SELECT CUR_SPC, GPF_ACC_NO,AQ_MAST.EMP_CODE,AQ_MAST.EMP_NAME,"
                    + "AQ_MAST.CUR_DESG,AQ_MAST.BANK_ACC_NO,AQ_MAST.CUR_BASIC,AQ_MAST.AQSL_NO,POST_SL_NO FROM AQ_MAST WHERE BILL_NO='" + billno + "' "
                    + "AND ACCT_TYPE='PRAN' ORDER BY EMP_NAME)AQ_MAST left outer JOIN G_SPC ON G_SPC.SPC=AQ_MAST.CUR_SPC)TAB1 LEFT OUTER JOIN G_POST "
                    + "ON G_POST.POST_CODE=TAB1.GPC";
            rs = stmt.executeQuery(query);
            while (rs.next()) {
                billContBean = new BillContributionRepotBean();
                slno++;
                billContBean.setSlno(slno);
                billContBean.setEmpname(rs.getString("EMP_NAME"));

                if (rs.getString("CUR_DESG") != null && !rs.getString("CUR_DESG").equals("")) {
                    billContBean.setEmpdesg(rs.getString("CUR_DESG"));
                }
                billContBean.setGpfNo(rs.getString("GPF_ACC_NO"));

                billContBean.setEmpBasicSal(rs.getString("CUR_BASIC"));
                billContBean.setEmpGradepay(new CommonScheduleMethods().getGradePay(rs.getString("AQSL_NO"), con, aqDtlsTbl, aqYear, aqMonth));
                billContBean.setEmpPersonalpay(new CommonScheduleMethods().getPpay(rs.getString("AQSL_NO"), con, aqDtlsTbl, aqYear, aqMonth));
                billContBean.setEmpDearnespay(new CommonScheduleMethods().getDearnessAllowence(rs.getString("AQSL_NO"), con, aqDtlsTbl, aqYear, aqMonth));
                String cpfCF = new CommonScheduleMethods().getCpf(rs.getString("AQSL_NO"), con, aqDtlsTbl, aqYear, aqMonth);

                if (cpfCF != null && !cpfCF.equals("")) {
                    cpfCaryFrd = cpfCaryFrd + Integer.parseInt(cpfCF);
                } else {
                    cpfCaryFrd = cpfCaryFrd;
                }
                billContBean.setCpfCaryFrd(String.valueOf(cpfCaryFrd));
                billContBean.setEmpCpf(cpfCF);

                if ((aqMonth >= 9 && aqYear == 2021) || aqYear > 2021) {
                    gtotal14 = getCPFGovernmentContribution14Percent(rs.getString("AQSL_NO"), aqDtlsTbl);
                    billContBean.setEmpGcpf("" + gtotal14);

                    totCaryFrd = totCaryFrd + gtotal14;

                    arrearAmt = new CommonScheduleMethods().getNpsl(rs.getString("AQSL_NO"), con, aqDtlsTbl, aqYear, aqMonth);
                    arrearInst = new CommonScheduleMethods().getArrInstalment(rs.getString("AQSL_NO"), con, aqDtlsTbl, aqYear, aqMonth);
                } else {
                    arrearAmt = new CommonScheduleMethods().getNpsl(rs.getString("AQSL_NO"), con, aqDtlsTbl, aqYear, aqMonth);
                    arrearInst = new CommonScheduleMethods().getArrInstalment(rs.getString("AQSL_NO"), con, aqDtlsTbl, aqYear, aqMonth);
                    if (billContBean.getEmpCpf() != null) {
                        if (arrearAmt != null) {
                            gtotal = Integer.parseInt(billContBean.getEmpCpf()) + Integer.parseInt(arrearAmt);
                        } else {
                            gtotal = Integer.parseInt(billContBean.getEmpCpf());
                        }
                    }
                    billContBean.setEmpGcpf("" + gtotal);
                    totCaryFrd = totCaryFrd + gtotal;
                }
                billContBean.setTotCaryFrd(String.valueOf(totCaryFrd));
                //billContBean.setEmpGcpf("" + gtotal);

                if (billContBean.getEmpCpf() != null && billContBean.getEmpGcpf() != null) {
                    cpfPlusGcpf = Integer.parseInt(billContBean.getEmpCpf()) + Integer.parseInt(billContBean.getEmpGcpf());
                    billContBean.setCpfPlusGcpf(cpfPlusGcpf + "");
                    totCpfPlusGcpf = totCpfPlusGcpf + cpfPlusGcpf;
                }
                billContBean.setCpfPlusGcpf(cpfPlusGcpf + "");
                billContBean.setTotCpfPlusGcpf(totCpfPlusGcpf + "");
                cpfPlusGcpf = 0;
                gtotal = 0;
                gtotal14 = 0;

                if (billContBean.getEmpGcpf() != null) {
                    annexeTotalGcpf = annexeTotalGcpf + Integer.parseInt(billContBean.getEmpGcpf());
                }
                billContBean.setTotGcpf("" + annexeTotalGcpf);

                if (annexeTotalGcpf > 0) {
                    billContBean.setTotGcpfWord(Numtowordconvertion.convertNumber(annexeTotalGcpf).toUpperCase());
                }
                if (billContBean.getEmpCpf() != null) {
                    annexeTotalCpf = annexeTotalCpf + Integer.parseInt(billContBean.getEmpCpf());
                }
                billContBean.setTotCpf("" + annexeTotalCpf);

                if (annexeTotalCpf > 0) {
                    billContBean.setTotCpfWord(Numtowordconvertion.convertNumber(annexeTotalCpf).toUpperCase());
                }
                if (billContBean.getEmpBasicSal() != null && !billContBean.getEmpBasicSal().equals("")) {
                    basic = Integer.parseInt(billContBean.getEmpBasicSal());
                }
                if (billContBean.getEmpGradepay() != null && !billContBean.getEmpGradepay().equals("")) {
                    gp = Integer.parseInt(billContBean.getEmpGradepay());
                }
                if (billContBean.getEmpDearnespay() != null && !billContBean.getEmpDearnespay().equals("")) {
                    da = Integer.parseInt(billContBean.getEmpDearnespay());
                }
                if (billContBean.getEmpCpf() != null) {
                    cpf = Integer.parseInt(billContBean.getEmpCpf());
                } else {
                    billContBean.setEmpCpf("" + cp);
                }
                if (billContBean.getEmpGcpf() != null) {
                    gcpf = Integer.parseInt(billContBean.getEmpGcpf());
                } else {
                    billContBean.setEmpGcpf("" + cp);
                }
                total = basic + gp + da;
                billContBean.setTotal("" + total);

                if (arrearAmt != null) {
                    totalannex3 = cpf + gcpf + Integer.parseInt(arrearAmt);
                } else {
                    totalannex3 = cpf + gcpf;
                }
                if (totalannex3 != 0.0) {
                    billContBean.setTotalAnnexure3("" + totalannex3);
                } else {
                    billContBean.setTotalAnnexure3("" + 0.0);
                }
                anx3CaryFrd = anx3CaryFrd + totalannex3;
                billContBean.setAnx3CaryFrd("" + anx3CaryFrd);
                billContBean.setTotalAnnexure3("" + totalannex3);
                cpf = 0;
                if (arrearInst != null) {
                    billContBean.setArrInstalment(arrearInst);
                } else {
                    billContBean.setArrInstalment("0");
                }
                if (arrearAmt != null) {
                    billContBean.setArrearAmt(arrearAmt);
                } else {
                    billContBean.setArrearAmt("0");
                }
                if (billContBean.getTotCpf() != null) {
                    billContBean.setGrandTotal("" + Integer.parseInt(billContBean.getTotCpf()));
                }
                if (billContBean.getTotGcpf() != null) {
                    grandtotal = grandtotal + totalannex3;
                    billContBean.setGrandTotal("" + grandtotal);
                }

                if (slno % 13 == 0) {
                    billContBean.setPagebreakAnx("<input type=\"button\" name=\"pagebreak1\" style=\"page-break-before: always;width: 0;height: 0\"/>");
                    billContBean.setPageHeaderAnx(reportPageHeader(con, annexure, null, billno, "") + "");
                } else {
                    billContBean.setPagebreakAnx("");
                    billContBean.setPageHeaderAnx("");
                }

                billContScheduleList.add(billContBean);
                gp = 0.0;
                da = 0.0;
            }

        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            DataBaseFunctions.closeSqlObjects(con);
        }
        return billContScheduleList;
    }

    @Override
    public BillBackPageBean getBillBackPgScheduleHeaderDetails(String billno, int aqYear, int aqMonth) {

        Connection con = null;
        ResultSet rs = null;
        Statement stmt = null;
        long tot = 0;
        BillBackPageBean backPageBean = new BillBackPageBean();
        String aqDtlsTbl = "";

        try {
            con = dataSource.getConnection();
            stmt = con.createStatement();
            aqDtlsTbl = getAqDtlsTableName(billno);

            Map<String, Integer> map = new HashMap<String, Integer>();
            map = getAllowanceSum(stmt, billno, aqYear, aqMonth);
            Iterator<Map.Entry<String, Integer>> entries = map.entrySet().iterator();
            while (entries.hasNext()) {
                Map.Entry<String, Integer> entry = entries.next();
                String keySchdule = StringUtils.defaultString(entry.getKey());
                int valueSumAMt = entry.getValue();

                if (keySchdule.equals("DA")) {
                    tot = tot + valueSumAMt;

                } else if (keySchdule.equals("GP")) {
                    tot = tot + valueSumAMt;

                } else if (keySchdule.equals("PPAY")) {
                    tot = tot + valueSumAMt;

                } else if (keySchdule.equals("HRA")) {
                    tot = tot + valueSumAMt;

                } else if (keySchdule.equals("OA")) {
                    tot = tot + valueSumAMt;
                }
            }

            backPageBean.setTxtPay(new CommonScheduleMethods().getPayAmt(con, billno, aqMonth, aqYear));
            backPageBean.setTxtDearnessPay(new CommonScheduleMethods().getDearnessPay(con, billno, aqMonth, aqYear, aqDtlsTbl));

            if (backPageBean.getTxtPay() != null && !backPageBean.getTxtPay().equals("")) {
                tot = tot + Long.parseLong(backPageBean.getTxtPay());
            }
            if (backPageBean.getTxtDearnessPay() != null && !backPageBean.getTxtDearnessPay().equals("")) {
                tot = tot + Long.parseLong(backPageBean.getTxtDearnessPay());
            }
            backPageBean.setTotalPaise(tot + "");

        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            DataBaseFunctions.closeSqlObjects(con);
        }
        return backPageBean;
    }

    public Map getAllowanceSum(Statement stmt, String billno, int aqYear, int aqMonth) {

        String aqDtlsTbl = "";
        Map<String, Integer> map = new HashMap<String, Integer>();
        try {
            aqDtlsTbl = getAqDtlsTableName(billno);
            String qry = "select schedule, sum(ad_amt) sumAmt from " + aqDtlsTbl + " a, aq_mast b where a.aqsl_no=b.aqsl_no and b.aq_month= '" + aqMonth + "' and b.aq_year= '" + aqYear + "' and b.bill_no='" + billno + "' group by schedule";
            ResultSet rs = stmt.executeQuery(qry);
            while (rs.next()) {
                map.put(rs.getString("schedule"), rs.getInt("sumAmt"));
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return map;
    }

    @Override
    public List getBillBackPgScheduleEmpList(String billno, int aqYear, int aqMonth) {

        Connection con = null;
        ResultSet rs = null;
        Statement stmt = null;
        ArrayList backPageScheduleList = new ArrayList();
        BillBackPageBean backPageBean = null;
        String aqDtlsTbl = "";
        try {
            con = dataSource.getConnection();
            stmt = con.createStatement();
            aqDtlsTbl = getAqDtlsTableName(billno);

            String billBackPgQry = "select schedule, now_dedn,sum(ad_amt) totSum, bt_id from " + aqDtlsTbl + " a, aq_mast b "
                    + "where a.aqsl_no=b.aqsl_no "
                    + "and b.aq_month='" + aqMonth + "' and b.aq_year='" + aqYear + "' and b.bill_no='" + billno + "' and ad_type='D' and schedule != 'PVTL' "
                    + "and schedule!='PVTD' and ad_amt >0 GROUP BY a.schedule, ded_type, now_dedn, ad_code, bt_id";
            rs = stmt.executeQuery(billBackPgQry);
            while (rs.next()) {
                String schedule = rs.getString("SCHEDULE");
                if (schedule.equals("GPF")) {
                    backPageBean = new BillBackPageBean();
                    backPageBean.setScheduleName("GPF");
                    backPageBean.setObjectHead(StringUtils.defaultString(rs.getString("BT_ID")));
                    backPageBean.setSchAmount(rs.getString("totSum"));

                } else if (schedule.equals("GA")) {
                    backPageBean = new BillBackPageBean();
                    backPageBean.setScheduleName("GA");
                    backPageBean.setObjectHead(StringUtils.defaultString(rs.getString("BT_ID")));
                    backPageBean.setSchAmount(rs.getString("totSum"));

                } else if (schedule.equals("TPF") || schedule.equals("TPFGA")) {
                    backPageBean = new BillBackPageBean();
                    backPageBean.setScheduleName("TPF");
                    backPageBean.setObjectHead(StringUtils.defaultString(rs.getString("BT_ID")));
                    backPageBean.addSchAmount(rs.getInt("totSum"));

                } else if (schedule.equals("CPF") || schedule.equals("NPSL")) {
                    backPageBean = new BillBackPageBean();
                    backPageBean.setScheduleName("CPF");
                    backPageBean.setObjectHead(StringUtils.defaultString(rs.getString("BT_ID")));
                    backPageBean.addSchAmount(rs.getInt("totSum"));

                } else {
                    backPageBean = new BillBackPageBean();
                    backPageBean.setObjectHead(StringUtils.defaultString(rs.getString("BT_ID")));
                    if (rs.getString("NOW_DEDN") != null && !rs.getString("NOW_DEDN").equals("")) {
                        backPageBean.setScheduleName(rs.getString("SCHEDULE") + " (" + rs.getString("NOW_DEDN") + ")");
                    } else {
                        backPageBean.setScheduleName(rs.getString("SCHEDULE"));
                    }
                    backPageBean.setSchAmount(rs.getString("totSum"));
                }
                backPageScheduleList.add(backPageBean);
            }

        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            DataBaseFunctions.closeSqlObjects(rs, stmt);
            DataBaseFunctions.closeSqlObjects(con);
        }
        return backPageScheduleList;
    }

    @Override
    public BankAcountScheduleBean getBankAcountScheduleHeaderDetails(String billno) {

        Connection con = null;
        BankAcountScheduleBean bankAcountBean = new BankAcountScheduleBean();
        try {
            con = dataSource.getConnection();

            PayrollCommonFunction prcf = new PayrollCommonFunction();
            CommonReportParamBean bean = prcf.getCommonReportParameter(con, billno);

            bankAcountBean.setBilldesc(bean.getBilldesc());
            bankAcountBean.setDdoDesg(bean.getDdoname());
            bankAcountBean.setOffName(bean.getOfficename());
            bankAcountBean.setMonth(CalendarCommonMethods.getFullMonthAsString(bean.getAqmonth()));
            bankAcountBean.setYear(bean.getAqyear() + "");

        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            DataBaseFunctions.closeSqlObjects(con);
        }
        return bankAcountBean;
    }

    @Override
    public List getBankAcountScheduleEmpList(String billno, int aqYear, int aqMonth) {

        Connection con = null;
        ResultSet rs = null;
        Statement stmt = null;
        ArrayList bankAccScheduleList = new ArrayList();
        BankAcountScheduleBean bankAcountBean = null;
        int pagetotal = 0;
        int pagetotalddo = 0;
        int slno = 0;
        int netCfTot = 0;
        String aqDtlsTbl = "";
        try {
            con = dataSource.getConnection();
            stmt = con.createStatement();
            aqDtlsTbl = getAqDtlsTableName(billno);

            String bankQuery = "SELECT AQSL_NO,EMP_NAME,GPF_ACC_NO,CUR_DESG,PAY_SCALE,BANK_ACC_NO,CUR_BASIC,SPC_ORD_NO,SPC_ORD_DATE,"
                    + "GPF_ACC_NO FROM AQ_MAST WHERE BILL_NO='" + billno + "' AND EMP_NAME IS NOT NULL order by post_sl_no";
            rs = stmt.executeQuery(bankQuery);
            while (rs.next()) {
                bankAcountBean = new BankAcountScheduleBean();
                slno++;
                bankAcountBean.setSlno(slno);
                bankAcountBean.setDesignation(rs.getString("CUR_DESG"));
                bankAcountBean.setAccountNo(rs.getString("BANK_ACC_NO"));
                bankAcountBean.setEmpname(rs.getString("EMP_NAME"));
                bankAcountBean.setGpfNo(rs.getString("GPF_ACC_NO"));

                int privatededuction = new CommonScheduleMethods().getPrivateDeductionLoanForEmp(con, rs.getString("AQSL_NO"), aqDtlsTbl, aqYear, aqMonth);
                int privateloan = new CommonScheduleMethods().getPrivateLoan(con, rs.getString("AQSL_NO"), aqDtlsTbl, aqYear, aqMonth);
                int grosspay = new CommonScheduleMethods().getGrossPay(con, rs.getString("AQSL_NO"), aqDtlsTbl, aqYear, aqMonth);
                int totaldedn = new CommonScheduleMethods().getTotalDedn(con, rs.getString("AQSL_NO"), aqDtlsTbl, aqYear, aqMonth);

                int netPay = grosspay - totaldedn;
                //pagetotal = (pagetotal + netPay) - (privatededuction + privateloan);
                //pagetotalddo = pagetotalddo + privatededuction + privateloan;

                bankAcountBean.setNetAmount(netPay + "");
                netCfTot = netCfTot + netPay;
                bankAcountBean.setNetCfTot(String.valueOf(netCfTot));

                bankAcountBean.setTowardsLoan(privatededuction);
                //bankAcountBean.setTotalReleased(grosspay - (totaldedn + privatededuction + privateloan));
                bankAcountBean.setTotalReleased(netPay - bankAcountBean.getTowardsLoan());

                pagetotal = pagetotal + bankAcountBean.getTotalReleased();
                pagetotalddo = pagetotalddo + bankAcountBean.getTowardsLoan();

                bankAcountBean.setOtherDeposits(privatededuction);

                bankAcountBean.setCarryForward(pagetotal + "");
                bankAcountBean.setCarryForwardDDO(pagetotalddo + "");

                bankAccScheduleList.add(bankAcountBean);

                if (slno % 13 == 0) {
                    bankAcountBean.setPagebreakBS("<input type=\"button\" name=\"pagebreak1\" style=\"page-break-before: always;width: 0;height: 0\"/>");
                    bankAcountBean.setPageHeaderBS(reportPageHeader(con, "BS", null, billno, "") + "");
                } else {
                    bankAcountBean.setPagebreakBS("");
                    bankAcountBean.setPageHeaderBS("");
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            DataBaseFunctions.closeSqlObjects(rs, stmt);
            DataBaseFunctions.closeSqlObjects(con);
        }
        return bankAccScheduleList;
    }

    @Override
    public List getBankNameScheduleList(String billno, int aqYear, int aqMonth) {

        Connection con = null;
        ResultSet rs = null;
        Statement stmt = null;
        ArrayList bankNameScheduleList = new ArrayList();
        BankAcountScheduleBean bankAcountBean = null;
        String totamt = "0";
        String aqDtlsTbl = "";

        try {
            con = dataSource.getConnection();
            stmt = con.createStatement();
            aqDtlsTbl = getAqDtlsTableName(billno);

            String bankQry = "SELECT BANK_NAME from AQ_MAST WHERE BILL_NO='" + billno + "' and DEFAULT_BANK= 1 OR DEFAULT_BANK = 0 GROUP BY BANK_NAME";
            rs = stmt.executeQuery(bankQry);
            while (rs.next()) {
                bankAcountBean = new BankAcountScheduleBean();

                if (rs.getString("BANK_NAME") != null && !rs.getString("BANK_NAME").equals("")) {
                    bankAcountBean.setBankName(rs.getString("BANK_NAME"));
                    totamt = new CommonScheduleMethods().getEmpSalDetails(con, rs.getString("BANK_NAME"), billno, true, aqDtlsTbl, aqYear, aqMonth);
                } else {
                    bankAcountBean.setBankName("DDO Current");
                    totamt = new CommonScheduleMethods().getEmpSalDetails(con, null, billno, false, aqDtlsTbl, aqYear, aqMonth);
                }
                bankAcountBean.setNetAmt(totamt);
                bankNameScheduleList.add(bankAcountBean);
            }
            String arr[] = new CommonScheduleMethods().getTotalAmount(con, billno, aqDtlsTbl, aqYear, aqMonth);
            bankAcountBean.setNetAmtNumbers(arr[0]);
            bankAcountBean.setAmountInWords(Numtowordconvertion.convertNumber((int) Double.parseDouble(bankAcountBean.getNetAmtNumbers())));

        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            DataBaseFunctions.closeSqlObjects(rs, stmt);
            DataBaseFunctions.closeSqlObjects(con);
        }
        return bankNameScheduleList;
    }

    @Override
    public AbsenteeStatementScheduleBean getAbsntStmtScheduleHeaderDetails(String billno) {

        Connection con = null;
        AbsenteeStatementScheduleBean absStmtBean = new AbsenteeStatementScheduleBean();
        String btid = "";
        try {
            con = dataSource.getConnection();

            PayrollCommonFunction prcf = new PayrollCommonFunction();
            CommonReportParamBean bean = prcf.getCommonReportParameter(con, billno);

            absStmtBean.setBillNo(billno);
            absStmtBean.setOffName(bean.getOfficename());

        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            DataBaseFunctions.closeSqlObjects(con);
        }
        return absStmtBean;
    }

    @Override
    public List getAbsntStmtScheduleEmpList(String billno) {

        Connection con = null;
        ResultSet rs = null;
        Statement stmt = null;
        ArrayList absStmtScheduleList = new ArrayList();
        AbsenteeStatementScheduleBean absStmtBean = null;
        int cnt = 0;
        int cnt1 = 0;

        try {
            con = dataSource.getConnection();
            stmt = con.createStatement();
            String absStmtQuery = "SELECT OFF_CODE,CUR_DESG,COUNT(*) CNT,PAY_SCALE,OFF_CODE FROM AQ_MAST WHERE BILL_NO='" + billno + "' AND EMP_CODE IS NULL "
                    + "GROUP BY CUR_DESG,PAY_SCALE,OFF_CODE";
            rs = stmt.executeQuery(absStmtQuery);
            while (rs.next()) {
                absStmtBean = new AbsenteeStatementScheduleBean();

                String desg = rs.getString("CUR_DESG");
                StringTokenizer stringTokenizer = new StringTokenizer(desg, ",");
                if (stringTokenizer.hasMoreTokens()) {
                    desg = stringTokenizer.nextToken().trim();
                }
                absStmtBean.setDesignation(desg);

                cnt = rs.getInt("CNT");
                cnt1 = cnt1 + cnt;
                absStmtBean.setPostno(cnt);
                if (rs.getString("PAY_SCALE") != null && !rs.getString("PAY_SCALE").equals("")) {
                    absStmtBean.setPayscale(rs.getString("PAY_SCALE"));
                } else {
                    absStmtBean.setPayscale("--");
                }
                absStmtBean.setGrandTotal(cnt1);

                absStmtScheduleList.add(absStmtBean);
            }

        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            DataBaseFunctions.closeSqlObjects(rs, stmt);
            DataBaseFunctions.closeSqlObjects(con);
        }
        return absStmtScheduleList;
    }

    @Override
    public LicScheduleBean getLICScheduleHeaderDetails(String billno) {

        Connection con = null;
        Statement stmt = null;
        ResultSet rs = null;
        Statement stmt1 = null;
        LicScheduleBean licBean = new LicScheduleBean();

        try {
            con = dataSource.getConnection();
            stmt = con.createStatement();
            stmt1 = con.createStatement();

            PayrollCommonFunction prcf = new PayrollCommonFunction();
            CommonReportParamBean bean = prcf.getCommonReportParameter(con, billno);

            licBean.setBilldesc(bean.getBilldesc());
            licBean.setOffName(bean.getOfficename());
            licBean.setAqYear(bean.getAqyear() + "");
            licBean.setDdoDesg(new CommonScheduleMethods().getDDODesignationList(stmt1, billno));
            licBean.setMonthYear(new CommonScheduleMethods().getMonthAndYear(con, billno));

        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            DataBaseFunctions.closeSqlObjects(rs, stmt);
            DataBaseFunctions.closeSqlObjects(stmt1);
            DataBaseFunctions.closeSqlObjects(con);
        }
        return licBean;
    }

    @Override
    public List getLICScheduleEmpList(String schedule, String billno, int aqMonth, int aqYear) {

        Connection con = null;
        ResultSet rs = null;
        Statement stmt = null;
        ResultSet rs1 = null;
        Statement stmt1 = null;
        PreparedStatement pstmt = null;
        ArrayList licScheduleList = new ArrayList();

        String query1 = "";
        LicScheduleBean licBean = null;
        LicSchedulePolicyBean licPolicyBean = null;
        int totAmount = 0;
        int carryForwardTotal = 0;
        String gross = "";
        String aqDtlsTbl = "";
        int slno = 1;
        try {
            con = dataSource.getConnection();
            stmt = con.createStatement();
            aqDtlsTbl = getAqDtlsTableName(billno);
            pstmt = con.prepareStatement("SELECT AQSL_NO,EMP_CODE,EMP_NAME,CUR_DESG,POST_SL_NO FROM AQ_MAST WHERE BILL_NO=? AND EMP_CODE IS NOT NULL");
            pstmt.setInt(1, Integer.parseInt(billno));
            rs = pstmt.executeQuery();
            while (rs.next()) {

                licBean = new LicScheduleBean();

                licBean.setSlno(slno);
                String aqslno = rs.getString("AQSL_NO");
                licBean.setAqSlno(aqslno);
                String empCode = rs.getString("EMP_CODE");
                licBean.setEmpcode(empCode);
                licBean.setEmpname(rs.getString("EMP_NAME"));
                licBean.setEmpdesg(rs.getString("CUR_DESG"));
                String postSlNo = rs.getString("POST_SL_NO");

                ArrayList licSchedulePoicyList = new ArrayList();
                totAmount = 0;
                query1 = "SELECT ACC_NO,REF_DESC,AD_AMT FROM " + aqDtlsTbl + " WHERE SCHEDULE='" + schedule + "' AND EMP_CODE='" + empCode + "' AND AQSL_NO='" + aqslno + "' AND AQ_MONTH=" + aqMonth + " AND AQ_YEAR=" + aqYear;
                stmt1 = con.createStatement();
                rs1 = stmt1.executeQuery(query1);
                while (rs1.next()) {

                    licPolicyBean = new LicSchedulePolicyBean();

                    licPolicyBean.setPolicyNo(rs1.getString("ACC_NO"));
                    licPolicyBean.setRecoveryMonth(rs1.getString("REF_DESC"));
                    licPolicyBean.setAmount(rs1.getString("AD_AMT"));
                    totAmount = totAmount + rs1.getInt("AD_AMT");

                    carryForwardTotal = carryForwardTotal + rs1.getInt("AD_AMT");
                    licSchedulePoicyList.add(licPolicyBean);
                }
                licBean.setPremiumDetails(licSchedulePoicyList);
                licBean.setTotal(totAmount + "");
                licBean.setCarryForward(carryForwardTotal + "");
                if (licSchedulePoicyList.size() > 0) {
                    slno++;
                    licScheduleList.add(licBean);
                }
                if (slno % 15 == 0) {
                    licBean.setPagebreakLIC("<input type=\"button\" name=\"pagebreak1\" style=\"page-break-before: always;width: 0;height: 0\"/>");
                    licBean.setPageHeaderLIC(reportPageHeader(con, "LIC", null, billno, "") + "");
                } else {
                    licBean.setPagebreakLIC("");
                    licBean.setPageHeaderLIC("");
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            DataBaseFunctions.closeSqlObjects(rs, stmt);
            DataBaseFunctions.closeSqlObjects(con);
        }
        return licScheduleList;
    }

    @Override
    public PLIScheduleBean getPLIScheduleHeaderDetails(String billno) {

        Connection con = null;
        Statement stmt = null;
        ResultSet rs = null;
        PLIScheduleBean pliBean = new PLIScheduleBean();

        try {
            con = dataSource.getConnection();
            stmt = con.createStatement();
            PayrollCommonFunction prcf = new PayrollCommonFunction();
            CommonReportParamBean bean = prcf.getCommonReportParameter(con, billno);

            pliBean.setBilldesc(bean.getBilldesc());
            pliBean.setOfficeName(bean.getOfficename());
            pliBean.setMonthYear(new CommonScheduleMethods().getMonthAndYear(con, billno));

        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            DataBaseFunctions.closeSqlObjects(rs, stmt);
            DataBaseFunctions.closeSqlObjects(con);
        }
        return pliBean;
    }

    @Override
    public List getPLIScheduleEmpList(String billno, int year, int month) {

        Connection con = null;
        ResultSet rs = null;
        Statement stmt = null;
        Statement stmt1 = null;
        ArrayList pliScheduleList = new ArrayList();
        PLIScheduleBean pliBean = null;
        String aqDtlsTbl = "";
        int slNo = 0;
        double amt = 0.0;
        double total = 0.0;
        int i = 1;
        int j = 0;
        double carryForward = 0.0;
        String test = "";
        try {
            con = dataSource.getConnection();
            stmt = con.createStatement();
            stmt1 = con.createStatement();

            aqDtlsTbl = getAqDtlsTableName(billno);
            /*String pliQuery = "SELECT  MAST.AQSL_NO,MAST.EMP_CODE,CUR_DESG,EMP_NAME,DTLS.ACC_NO,DTLS.AD_AMT,DTLS.REF_DESC FROM AQ_MAST MAST "
             + "INNER JOIN " + aqDtlsTbl + " DTLS ON MAST.AQSL_NO=DTLS.AQSL_NO AND DTLS.SCHEDULE='PLI' AND DTLS.AD_TYPE='D' "
             + "WHERE BILL_NO='" + billno + "' ORDER BY MAST.POST_SL_NO";*/
            String pliQuery = "SELECT  MAST.AQSL_NO,MAST.EMP_CODE,CUR_DESG,EMP_NAME,DTLS.ACC_NO,DTLS.AD_AMT,DTLS.REF_DESC FROM AQ_MAST MAST INNER JOIN AQ_DTLS DTLS"
                    + " ON MAST.AQSL_NO=DTLS.AQSL_NO WHERE DTLS.SCHEDULE='PLI' AND DTLS.AD_TYPE='D' AND BILL_NO='" + billno + "' AND MAST.AQ_YEAR=" + year + " AND MAST.AQ_MONTH=" + month + " ORDER BY MAST.POST_SL_NO";
            rs = stmt.executeQuery(pliQuery);
            while (rs.next()) {
                slNo++;
                pliBean = new PLIScheduleBean();

                pliBean.setSlno(slNo);
                pliBean.setEmpname(rs.getString("EMP_NAME"));
                pliBean.setEmpdesg(rs.getString("CUR_DESG"));
                String policyNo = rs.getString("ACC_NO");
                pliBean.setPolicyNo(policyNo);
                pliBean.setRecMonth(rs.getString("REF_DESC"));
                pliBean.setAmount(rs.getString("AD_AMT"));

                amt = rs.getDouble("AD_AMT");
                carryForward = carryForward + amt;
                pliBean.setCarryForward(carryForward + "");
                test = Numtowordconvertion.convertNumber((int) carryForward);
                pliBean.setTotFig(test);
                total = new CommonScheduleMethods().getTotalValue(stmt1, policyNo, rs.getString("EMP_CODE"), "PLI");
                pliBean.setTotal(total + "");

                pliScheduleList.add(pliBean);
            }

        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            DataBaseFunctions.closeSqlObjects(rs, stmt);
            DataBaseFunctions.closeSqlObjects(con);
        }
        return pliScheduleList;
    }

    @Override
    public GisAndFaScheduleBean getGisAndFaScheduleHeaderDetails(String schedule, String billno) {

        Connection con = null;
        Statement stmt = null;
        ResultSet rs = null;
        GisAndFaScheduleBean gisAndFaBean = new GisAndFaScheduleBean();

        try {
            con = dataSource.getConnection();
            stmt = con.createStatement();

            PayrollCommonFunction prcf = new PayrollCommonFunction();
            CommonReportParamBean bean = prcf.getCommonReportParameter(con, billno);

            gisAndFaBean.setReportName(prcf.getReportName(con, schedule));
            gisAndFaBean.setDeptName(bean.getDeptname());
            gisAndFaBean.setOffName(bean.getOfficename());
            gisAndFaBean.setBilldesc(bean.getBilldesc());

            gisAndFaBean.setDdoName(bean.getDdoname());
            gisAndFaBean.setSchedule(schedule);

            String gisAndFaQryHdr = "SELECT * FROM (select TR_CODE,AQ_MONTH,AQ_YEAR,OFF_DDO from BILL_MAST where BILL_NO='" + billno + "') BILL_MAST left outer join"
                    + " (SELECT POST_CODE,POST FROM G_POST) G_POST on BILL_MAST.OFF_DDO=G_POST.POST_CODE left outer join "
                    + "(SELECT TR_CODE,TR_NAME FROM G_TREASURY) G_TREASURY on BILL_MAST.TR_CODE=G_TREASURY.TR_CODE ";
            rs = stmt.executeQuery(gisAndFaQryHdr);
            while (rs.next()) {
                gisAndFaBean.setTreasuryName(rs.getString("TR_NAME"));
                gisAndFaBean.setDdoDesg(rs.getString("POST"));
                gisAndFaBean.setRecYear(rs.getString("AQ_YEAR"));
                String month = rs.getString("AQ_MONTH");
                gisAndFaBean.setRecMonth(month);
                if (month != null && !month.equals("")) {
                    gisAndFaBean.setRecMonth(CalendarCommonMethods.getFullMonthAsString(Integer.parseInt(month)));
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            DataBaseFunctions.closeSqlObjects(rs, stmt);
            DataBaseFunctions.closeSqlObjects(con);
        }
        return gisAndFaBean;
    }

    @Override
    public List getGISandFAScheduleEmpList(String schedule, String billno, int aqYear, int aqMonth) {

        Connection con = null;
        ResultSet rs = null;
        Statement stmt = null;
        ArrayList gisAndFaScheduleList = new ArrayList();
        GisAndFaScheduleBean gisAndFaBean = null;
        int slNo = 1;
        int amt1 = 0;
        int amt2 = 0;
        int tot = 0;
        String aqDTLS = "AQ_DTLS";
        int cfAmt = 0;
        try {
            con = dataSource.getConnection();
            stmt = con.createStatement();

            aqDTLS = hrms.common.AqFunctionalities.getAQBillDtlsTable(aqMonth, aqYear);
            String gisAndFaQry = "SELECT C.tr_code,A.EMP_NAME empname,A.CUR_DESG designation,A.BANK_ACC_NO ACCOUNTNO,A.AQSL_NO,POST_SL_NO,GPF_ACC_NO,"
                    + "A.EMP_CODE, B.REF_ORD,AD_CODE,SCHEDULE,B.ad_amt deductedamt,TOT_REC_AMT,B.acc_no, B.ref_desc, B.ad_ref_id,"
                    + "LOANID,VCH_NO,VCH_DATE,DED_ST_DATE,P_ORG_AMT,I_ORG_AMT, P_INSTL_AMT,I_INSTL_AMT,C.I_LAST_INSTL_NO,C.P_LAST_INSTL_NO,LOAN_TP,"
                    + "P_CUM_RECOVERED,I_CUM_RECOVERED FROM AQ_MAST A, " + aqDTLS + " B, EMP_LOAN_SANC C WHERE A.AQSL_NO=B.AQSL_NO AND A.AQ_MONTH=B.AQ_MONTH "
                    + "AND A.AQ_YEAR=B.AQ_YEAR AND B.aq_month = " + aqMonth + " and B.aq_year = " + aqYear + " AND B.AD_REF_ID = C.LOANID AND "
                    + "A.BILL_NO = '" + billno + "' AND B.AD_AMT>0 AND B.SCHEDULE = '" + schedule + "' ORDER BY POST_SL_NO";

            rs = stmt.executeQuery(gisAndFaQry);
            while (rs.next()) {
                gisAndFaBean = new GisAndFaScheduleBean();

                gisAndFaBean.setSlno(Integer.parseInt(slNo + ""));
                gisAndFaBean.setEmpname(rs.getString("empname"));
                gisAndFaBean.setCurDesg(rs.getString("designation"));
                gisAndFaBean.setRemark(rs.getString("GPF_ACC_NO"));
                gisAndFaBean.setTreasuryVoucherNo(rs.getString("VCH_NO"));
                gisAndFaBean.setTreasuryVoucherDate(CommonFunctions.getFormattedOutputDate1(rs.getDate("VCH_DATE")));
                gisAndFaBean.setTreasuryName(getTreasuryName(rs.getString("tr_code")));

                gisAndFaBean.setAccountno(rs.getString("ACC_NO"));

                if (rs.getString("I_ORG_AMT") != null && !rs.getString("I_ORG_AMT").equals("") && rs.getInt("I_ORG_AMT") > 0) {
                    gisAndFaBean.setOriginalAmount(rs.getString("I_ORG_AMT"));
                }
                if (rs.getString("P_ORG_AMT") != null && !rs.getString("P_ORG_AMT").equals("") && rs.getInt("P_ORG_AMT") > 0) {
                    gisAndFaBean.setOriginalAmount(rs.getString("P_ORG_AMT"));
                }
                if (rs.getString("I_LAST_INSTL_NO") != null && !rs.getString("I_LAST_INSTL_NO").equals("")) {
                    gisAndFaBean.setNoofInstallment(rs.getString("I_LAST_INSTL_NO"));
                }
                int instalment_of_recovery = rs.getInt("P_LAST_INSTL_NO") + 1;
                if (rs.getString("P_LAST_INSTL_NO") != null && !rs.getString("P_LAST_INSTL_NO").equals("")) {
                    gisAndFaBean.setNoofInstallment(rs.getString("REF_DESC"));
                }
                String dedAmt = rs.getString("deductedamt");
                gisAndFaBean.setDeductedAmount(dedAmt);
                cfAmt = cfAmt + Integer.parseInt(dedAmt);
                gisAndFaBean.setCarryFrdAmt(cfAmt);

                int cummulative_recovery = 0;
                if (rs.getString("TOT_REC_AMT") != null && !rs.getString("TOT_REC_AMT").equals("")) {
                    cummulative_recovery = rs.getInt("TOT_REC_AMT");
                    gisAndFaBean.setRecoveryUptoMonth(cummulative_recovery + "");
                }
                if (rs.getString("P_ORG_AMT") != null && !rs.getString("P_ORG_AMT").equals("") && rs.getInt("P_ORG_AMT") > 0) {
                    amt1 = Integer.parseInt(rs.getString("P_ORG_AMT"));
                }
                if (rs.getString("I_ORG_AMT") != null && !rs.getString("I_ORG_AMT").equals("") && rs.getInt("I_ORG_AMT") > 0) {
                    amt1 = Integer.parseInt(rs.getString("I_ORG_AMT"));
                }

                if (rs.getString("P_CUM_RECOVERED") != null && !rs.getString("P_CUM_RECOVERED").equals("")) {
                    amt2 = Integer.parseInt(rs.getString("P_CUM_RECOVERED"));
                }
                if (rs.getString("I_CUM_RECOVERED") != null && !rs.getString("I_CUM_RECOVERED").equals("")) {
                    amt2 = Integer.parseInt(rs.getString("I_CUM_RECOVERED"));
                }

                int bal = amt1 - cummulative_recovery;
                gisAndFaBean.setBalance(bal + "");

                if (rs.getString("DED_ST_DATE") != null && !rs.getString("DED_ST_DATE").equals("")) {
                    gisAndFaBean.setMonthdrawn(CommonFunctions.getFormattedOutputDate1(rs.getDate("DED_ST_DATE")));
                } else if (rs.getString("VCH_DATE") != null && !rs.getString("VCH_DATE").equals("")) {
                    gisAndFaBean.setMonthdrawn(CommonFunctions.getFormattedOutputDate1(rs.getDate("VCH_DATE")));
                }

                gisAndFaScheduleList.add(gisAndFaBean);
                slNo++;

                if (schedule.equals("FA") || schedule.equals("OR") || schedule.equals("ADVPAY")) {

                    if (slNo % 12 == 0) {
                        gisAndFaBean.setPagebreakFA("<input type=\"button\" name=\"pagebreak1\" style=\"page-break-before: always;width: 0;height: 0\"/>");
                        gisAndFaBean.setPageHeaderFA(reportPageHeader(con, schedule, null, billno, "") + "");
                    } else {
                        gisAndFaBean.setPagebreakFA("");
                        gisAndFaBean.setPageHeaderFA("");
                    }

                } else if (schedule.equals("GISA")) {

                    if (slNo % 7 == 0) {
                        gisAndFaBean.setPagebreakFA("<input type=\"button\" name=\"pagebreak1\" style=\"page-break-before: always;width: 0;height: 0\"/>");
                        gisAndFaBean.setPageHeaderFA(reportPageHeader(con, schedule, null, billno, "") + "");
                    } else {
                        gisAndFaBean.setPagebreakFA("");
                        gisAndFaBean.setPageHeaderFA("");
                    }
                }

            }

        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            DataBaseFunctions.closeSqlObjects(rs, stmt);
            DataBaseFunctions.closeSqlObjects(con);
        }
        return gisAndFaScheduleList;
    }

    @Override
    public List getLoanAdvanceSchedulePrincipalList(String schedule, String billno, int aqMonth, int aqYear) {

        Connection con = null;
        ResultSet rs = null;
        Statement stmt = null;
        ArrayList hbaSchldList = new ArrayList();
        LoanAdvanceScheduleBean loanBean = null;
        String empNameDesc = "";
        int sno = 1;
        double tot = 0.0;
        double amt1 = 0.0;
        double amt2 = 0.0;
        String drawingmonth = "";
        String drawingmonth1 = "";
        String aqDtlsTbl = "";
        try {
            con = dataSource.getConnection();
            stmt = con.createStatement();
            aqDtlsTbl = getAqDtlsTableName(billno);
            String loanQuery = "SELECT AQ_MAST.GPF_ACC_NO,AQ_MAST.EMP_NAME,AQ_MAST.CUR_DESG,AQ_DTLS.ACC_NO,AQ_DTLS.REF_DESC,AQ_DTLS.AD_AMT,"
                    + "EMP_LOAN_SANC.DED_ST_DATE,EMP_LOAN_SANC.I_LAST_INSTL_NO,EMP_LOAN_SANC.P_LAST_INSTL_NO,EMP_LOAN_SANC.P_CUM_RECOVERED,"
                    + "EMP_LOAN_SANC.I_CUM_RECOVERED,EMP_LOAN_SANC.VCH_NO,EMP_LOAN_SANC.VCH_DATE,EMP_LOAN_SANC.P_ORG_AMT,EMP_LOAN_SANC.I_ORG_AMT,"
                    + "EMP_LOAN_SANC.P_INSTL_AMT,EMP_LOAN_SANC.I_INSTL_AMT,(EMP_LOAN_SANC.P_ORG_AMT-AQ_DTLS.TOT_REC_AMT) BALANCE,POST_SL_NO,TOT_REC_AMT "
                    + "from (Select EMP_NAME,CUR_DESG,AQSL_NO,POST_SL_NO,GPF_ACC_NO from AQ_MAST where AQ_MAST.BILL_NO='" + billno + "'  AND aq_month=" + aqMonth + " AND aq_year=" + aqYear + ") AQ_MAST inner join "
                    + "(select ACC_NO,REF_DESC,AD_AMT,TOT_REC_AMT,AQSL_NO,AD_CODE,EMP_CODE,REF_ORD,REF_DATE,AD_REF_ID from " + aqDtlsTbl + " where "
                    + "SCHEDULE='" + schedule + "'  AND aq_month=" + aqMonth + " AND aq_year=" + aqYear + " and AD_TYPE='D' and DED_TYPE='L' AND AD_AMT >0 AND NOW_DEDN='P') AQ_DTLS on "
                    + "AQ_MAST.AQSL_NO=AQ_DTLS.AQSL_NO inner join EMP_LOAN_SANC on AQ_DTLS.AD_REF_ID=EMP_LOAN_SANC.LOANID  ORDER BY EMP_NAME";

            rs = stmt.executeQuery(loanQuery);
            while (rs.next()) {
                loanBean = new LoanAdvanceScheduleBean();

                if ((rs.getString("EMP_NAME") + "/\n" + rs.getString("CUR_DESG")).equals(empNameDesc)) {
                    loanBean.setEmpNameDesg("");
                } else {
                    empNameDesc = rs.getString("EMP_NAME") + "/\n" + rs.getString("CUR_DESG");
                    loanBean.setEmpNameDesg(empNameDesc);
                    loanBean.setSlno(sno);
                    sno++;
                }

                if (rs.getString("VCH_NO") != null && !rs.getString("VCH_NO").equals("")) {
                    loanBean.setVchNo(rs.getString("VCH_NO"));
                } else {
                    loanBean.setVchNo("");
                }

                if (rs.getString("VCH_DATE") != null && !rs.getString("VCH_DATE").equals("")) {
                    loanBean.setVchDate(CommonFunctions.getFormattedOutputDate1(rs.getDate("VCH_DATE")));
                } else {
                    loanBean.setVchDate("");
                }

                loanBean.setAccNo(rs.getString("ACC_NO"));
                loanBean.setEmpdesg(rs.getString("CUR_DESG"));

                if (rs.getString("P_ORG_AMT") != null && !rs.getString("P_ORG_AMT").equals("")) {
                    loanBean.setOriginalAmt(rs.getDouble("P_ORG_AMT"));
                }
                //piadv.setInstalmentRec(rs2.getString("REF_DESC"));
                if (rs.getString("I_LAST_INSTL_NO") != null && !rs.getString("I_LAST_INSTL_NO").equals("")) {
                    loanBean.setInstalmentRec(rs.getString("REF_DESC"));
                }
                if (rs.getString("REF_DESC") != null && !rs.getString("REF_DESC").equals("")) {
                    loanBean.setInstalmentRec(rs.getString("REF_DESC"));
                }
                loanBean.setDecutedAmt(rs.getDouble("AD_AMT"));
                tot = tot + loanBean.getDecutedAmt();
                loanBean.setTotal(tot);

                if (rs.getString("TOT_REC_AMT") != null && !rs.getString("TOT_REC_AMT").equals("")) {
                    loanBean.setRecAmt(rs.getDouble("TOT_REC_AMT"));
                }
                // piadv.setBalOutstanding(rs2.getString("BALANCE"));
                if (rs.getString("P_ORG_AMT") != null && !rs.getString("P_ORG_AMT").equals("")) {
                    amt1 = Integer.parseInt(rs.getString("P_ORG_AMT"));
                }
                if (rs.getString("TOT_REC_AMT") != null && !rs.getString("TOT_REC_AMT").equals("")) {
                    amt2 = Integer.parseInt(rs.getString("TOT_REC_AMT"));
                }
                if (rs.getString("GPF_ACC_NO") != null && !rs.getString("GPF_ACC_NO").equals("")) {
                    loanBean.setGpfNo(rs.getString("GPF_ACC_NO"));
                }

                drawingmonth = "";
                drawingmonth1 = "";
                if (rs.getDate("DED_ST_DATE") != null && !rs.getDate("DED_ST_DATE").equals("")) {
                    drawingmonth = CommonFunctions.getFormattedOutputDate1(rs.getDate("DED_ST_DATE"));
                    drawingmonth1 = drawingmonth.substring(3, drawingmonth.length());
                    loanBean.setDeductionStdate(drawingmonth);
                } else if (rs.getDate("VCH_DATE") != null && !rs.getDate("VCH_DATE").equals("")) {
                    drawingmonth1 = CommonFunctions.getFormattedOutputDate1(rs.getDate("VCH_DATE"));
                    loanBean.setVchDate(drawingmonth1);
                }

                loanBean.setDrawingmonth(drawingmonth1);
                double bal = amt1 - amt2;
                if (bal < 0) {
                    bal = 0;
                }
                loanBean.setBalOutstanding(bal);
                if (sno % 10 == 0) {
                    loanBean.setPagebreakLA("<input type=\"button\" name=\"pagebreak1\" style=\"page-break-before: always;width: 0;height: 0\"/>");
                    loanBean.setPageHeaderLA(reportPageHeader(con, schedule, null, billno, "P") + "");
                } else {
                    loanBean.setPagebreakLA("");
                    loanBean.setPageHeaderLA("");
                }
                hbaSchldList.add(loanBean);

            }

        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            DataBaseFunctions.closeSqlObjects(rs, stmt);
            DataBaseFunctions.closeSqlObjects(con);
        }
        return hbaSchldList;
    }

    @Override
    public List getLoanAdvanceScheduleInterestList(String schedule, String billno, int aqMonth, int aqYear) {

        Connection con = null;
        ResultSet rs = null;
        Statement stmt = null;
        ArrayList hbaSchldIntList = new ArrayList();
        LoanAdvanceScheduleBean loanBean = null;
        String empNmaeDesc = "";
        String aqDtlsTbl = "";
        int slNo = 1;
        double tot = 0.0;
        double amt1 = 0;
        double amt2 = 0;

        String drawingmonth = "";
        String drawingmonth1 = "";

        try {
            con = dataSource.getConnection();
            stmt = con.createStatement();
            aqDtlsTbl = getAqDtlsTableName(billno);

            String interestQry = "SELECT AQ_MAST.GPF_ACC_NO,AQ_MAST.EMP_NAME,AQ_MAST.CUR_DESG,AQ_DTLS.ACC_NO,AQ_DTLS.REF_DESC,AQ_DTLS.AD_AMT,"
                    + "EMP_LOAN_SANC.DED_ST_DATE,EMP_LOAN_SANC.I_LAST_INSTL_NO,EMP_LOAN_SANC.P_LAST_INSTL_NO,EMP_LOAN_SANC.P_CUM_RECOVERED,"
                    + "EMP_LOAN_SANC.I_CUM_RECOVERED,EMP_LOAN_SANC.VCH_NO,EMP_LOAN_SANC.VCH_DATE,EMP_LOAN_SANC.P_ORG_AMT,EMP_LOAN_SANC.I_ORG_AMT,"
                    + "EMP_LOAN_SANC.P_INSTL_AMT,EMP_LOAN_SANC.I_INSTL_AMT,(EMP_LOAN_SANC.I_ORG_AMT-AQ_DTLS.TOT_REC_AMT) BALANCE,POST_SL_NO,TOT_REC_AMT "
                    + "from (Select EMP_NAME,CUR_DESG,AQSL_NO,POST_SL_NO,GPF_ACC_NO from AQ_MAST where AQ_MAST.BILL_NO='" + billno + "' AND "
                    + "aq_month=" + aqMonth + " AND aq_year=" + aqYear + " ) AQ_MAST inner join (select ACC_NO,REF_DESC,AD_AMT,TOT_REC_AMT,AQSL_NO,"
                    + "AD_CODE,EMP_CODE,REF_ORD,REF_DATE,AD_REF_ID from " + aqDtlsTbl + " where SCHEDULE ='" + schedule + "' and "
                    + "AD_TYPE='D' and DED_TYPE='L' AND AD_AMT >0 AND NOW_DEDN='I') AQ_DTLS on AQ_MAST.AQSL_NO=AQ_DTLS.AQSL_NO inner join EMP_LOAN_SANC "
                    + "on AQ_DTLS.AD_REF_ID=EMP_LOAN_SANC.LOANID ORDER BY EMP_NAME";

            stmt = con.createStatement();
            rs = stmt.executeQuery(interestQry);
            empNmaeDesc = "";
            while (rs.next()) {

                loanBean = new LoanAdvanceScheduleBean();
                //loanBean.setEmpName(rs.getString("EMP_NAME"));

                if ((rs.getString("EMP_NAME") + "/\n" + rs.getString("CUR_DESG")).equals(empNmaeDesc)) {
                    loanBean.setEmpNameDesg("");
                } else {
                    empNmaeDesc = rs.getString("EMP_NAME") + "/\n" + rs.getString("CUR_DESG");
                    loanBean.setSlno(slNo);
                    loanBean.setEmpNameDesg(empNmaeDesc);
                    slNo++;
                }
                if (rs.getString("VCH_NO") != null && !rs.getString("VCH_NO").equals("")) {
                    loanBean.setVchNo(rs.getString("VCH_NO"));
                } else {
                    loanBean.setVchNo("");
                }

                if (rs.getString("VCH_DATE") != null && !rs.getString("VCH_DATE").equals("")) {
                    loanBean.setVchDate(CommonFunctions.getFormattedOutputDate1(rs.getDate("VCH_DATE")));
                } else {
                    loanBean.setVchDate("");
                }

                loanBean.setAccNo(rs.getString("ACC_NO"));
                if (rs.getString("I_ORG_AMT") != null && !rs.getString("I_ORG_AMT").equals("")) {
                    loanBean.setOriginalAmt(rs.getDouble("I_ORG_AMT"));
                }
                if (rs.getString("REF_DESC") != null && !rs.getString("REF_DESC").equals("")) {
                    loanBean.setInstalmentRec(rs.getString("REF_DESC"));
                }
                loanBean.setDecutedAmt(rs.getDouble("AD_AMT"));
                tot = tot + loanBean.getDecutedAmt();
                loanBean.setTotal(tot);

                if (rs.getString("TOT_REC_AMT") != null && !rs.getString("TOT_REC_AMT").equals("")) {
                    loanBean.setRecAmt(rs.getDouble("TOT_REC_AMT"));
                }
                if (rs.getString("I_ORG_AMT") != null && !rs.getString("I_ORG_AMT").equals("")) {
                    amt1 = Integer.parseInt(rs.getString("I_ORG_AMT"));
                }

                if (rs.getString("TOT_REC_AMT") != null && !rs.getString("TOT_REC_AMT").equals("")) {
                    amt2 = Integer.parseInt(rs.getString("TOT_REC_AMT"));
                }

                if (rs.getString("GPF_ACC_NO") != null && !rs.getString("GPF_ACC_NO").equals("")) {
                    loanBean.setGpfNo(rs.getString("GPF_ACC_NO"));
                }

                drawingmonth = "";
                drawingmonth1 = "";
                if (rs.getDate("DED_ST_DATE") != null && !rs.getDate("DED_ST_DATE").equals("")) {
                    drawingmonth = CommonFunctions.getFormattedOutputDate1(rs.getDate("DED_ST_DATE"));
                    drawingmonth1 = drawingmonth.substring(3, drawingmonth.length());
                } else if (rs.getDate("VCH_DATE") != null && !rs.getDate("VCH_DATE").equals("")) {
                    drawingmonth1 = CommonFunctions.getFormattedOutputDate1(rs.getDate("VCH_DATE"));
                }
                loanBean.setDrawingmonth(drawingmonth1);

                double bal = amt1 - amt2;
                if (bal < 0) {
                    bal = 0;
                }
                loanBean.setBalOutstanding(bal);
                if (slNo % 13 == 0) {
                    loanBean.setPagebreakLA("<input type=\"button\" name=\"pagebreak1\" style=\"page-break-before: always;width: 0;height: 0\"/>");
                    loanBean.setPageHeaderLA(reportPageHeader(con, schedule, null, billno, "I") + "");
                }
                hbaSchldIntList.add(loanBean);

            }

        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            DataBaseFunctions.closeSqlObjects(rs, stmt);
            DataBaseFunctions.closeSqlObjects(con);
        }
        return hbaSchldIntList;
    }

    @Override
    public LoanAdvanceScheduleBean getLoanAdvanceScheduleHeaderDetails(String schedule, String billno) {

        Connection con = null;
        Statement stmt1 = null;
        ResultSet rs1 = null;
        Statement stmt2 = null;
        ResultSet rs2 = null;
        LoanAdvanceScheduleBean loanBean = new LoanAdvanceScheduleBean();

        try {
            con = dataSource.getConnection();
            stmt1 = con.createStatement();
            stmt2 = con.createStatement();

            PayrollCommonFunction prcf = new PayrollCommonFunction();
            CommonReportParamBean bean = prcf.getCommonReportParameter(con, billno);

            loanBean.setDeptName(bean.getDeptname());
            loanBean.setOffName(bean.getOfficename());
            loanBean.setBilldesc(bean.getBilldesc());
            loanBean.setBillNo(billno);
            loanBean.setDdoName(bean.getDdoname());
            loanBean.setScheduleName(schedule);

            String loanQry1 = "SELECT SCHEDULE,SCHEDULE_DESC,DEMAND_NO from G_SCHEDULE where SCHEDULE='" + schedule + "'";
            rs1 = stmt1.executeQuery(loanQry1);
            if (rs1.next()) {
                loanBean.setScheduleOfRecovery(rs1.getString("SCHEDULE_DESC"));
                if (rs1.getString("DEMAND_NO") != null && !rs1.getString("DEMAND_NO").equals("")) {
                    loanBean.setDemandNo(rs1.getString("DEMAND_NO"));
                } else {
                    loanBean.setDemandNo("");
                }
            }

            String loanQuery2 = "select G_TREASURY.TR_NAME,Bill_mast.AQ_MONTH,Bill_mast.AQ_YEAR from (select * from Bill_mast where bill_no='" + billno + "') Bill_mast "
                    + "LEFT OUTER JOIN G_TREASURY on Bill_mast.TR_CODE=G_TREASURY.TR_CODE";
            rs2 = stmt2.executeQuery(loanQuery2);
            if (rs2.next()) {
                loanBean.setMonth(CalendarCommonMethods.getFullMonthAsString(rs2.getInt("AQ_MONTH")));
                loanBean.setYear(rs2.getString("AQ_YEAR"));
                loanBean.setTrName(rs2.getString("TR_NAME"));
            }

        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            DataBaseFunctions.closeSqlObjects(rs1, stmt1);
            DataBaseFunctions.closeSqlObjects(rs2, stmt2);
            DataBaseFunctions.closeSqlObjects(con);
        }
        return loanBean;
    }

//    @Override
//    public WrrScheduleBean getWRRScheduleHeaderDetails(String billno, String schedule) {
//
//        Connection con = null;
//        Statement stmt = null;
//        Statement stmt1 = null; 
//        ResultSet rs = null;
//        WrrScheduleBean wrrBean = new WrrScheduleBean();
//        Statement stQuaterPool = null;
//        ResultSet resultsetQuaterPool = null;
//        ArrayList wrrHeaderList = new ArrayList();
//        PayrollCommonFunction prcf = new PayrollCommonFunction();
//        String poolname = "";
//        String demandno = "";
//
//        try {
//            con = dataSource.getConnection();
//
//            CommonReportParamBean bean = prcf.getCommonReportParameter(con, billno);
//            stmt = con.createStatement();
//            stmt1 = con.createStatement();
//            String biIdQry = "SELECT * FROM G_AD_LIST WHERE AD_CODE_NAME='WRR' OR AD_CODE_NAME='SWR'";
//            rs = stmt.executeQuery(biIdQry);
//            String wrrbtid = null;
//            String swrbtid = null;
//            String wrr_swr_btid = null;
//            while (rs.next()) {
//                if (rs.getString("AD_CODE_NAME").equals("WRR")) {
//                    wrrbtid = rs.getString("BT_ID");
//                    wrr_swr_btid = wrrbtid;
//                } else if (rs.getString("AD_CODE_NAME").equals("SWR")) {
//                    swrbtid = rs.getString("BT_ID");
//                    wrr_swr_btid = swrbtid;
//                }
//            }
//
//            String qtrPoolQuery = "";
//            if (schedule != null && schedule.equals("HRR")) {
//                qtrPoolQuery = "SELECT * FROM G_QTR_POOL WHERE BT_ID = '" + wrr_swr_btid + "'";
//            } else if (schedule != null) {
//                qtrPoolQuery = "SELECT * FROM G_QTR_POOL WHERE IS_DEFAULT='Y'";
//            }
//            stQuaterPool = con.createStatement();
//            resultsetQuaterPool = stQuaterPool.executeQuery(qtrPoolQuery);
//            if (resultsetQuaterPool.next()) {
//                poolname = resultsetQuaterPool.getString("POOL_NAME");
//                demandno = resultsetQuaterPool.getString("DEMAND_NO_STRING");
//            }
//            wrrBean.setPoolName(poolname);
//
//            wrrBean.setOfficeName(bean.getOfficename());
//            wrrBean.setDeptName(bean.getDeptname());
//            wrrBean.setDdoDegn(bean.getDdoname());
//            wrrBean.setBillDesc(bean.getBilldesc());
//            wrrBean.setReportName(prcf.getReportName(con, schedule));
//            wrrBean.setDemandNo(prcf.getDemandName(schedule, con));
//            prcf.getDate(con, billno, wrrBean);
//
//            ArrayList despList = getList(billno, schedule);
//            wrrBean.setDespListSize(String.valueOf(despList.size()));
//            wrrBean.setEmplist(despList);
//
//            wrrHeaderList.add(wrrBean);
//
//        } catch (Exception e) {
//            e.printStackTrace();
//        } finally {
//            DataBaseFunctions.closeSqlObjects(con);
//        }
//        return wrrBean;
//    }
    @Override
    public List getPTScheduleEmployeeList(String billno, int aqMonth, int aqYear) {

        Connection con = null;
        Statement stmt = null;
        ResultSet rs = null;
        Statement stmt1 = null;
        ResultSet rs1 = null;
        PtScheduleBean ptBean = null;
        ArrayList ptSchldList = new ArrayList();
        int carryForwardTax = 0;
        int totalGross = 0;
        int basicSal = 0;
        String empCode = "";
        int sno = 1;
        String aqDtlsTbl = "";

        try {
            con = dataSource.getConnection();
            stmt = con.createStatement();
            aqDtlsTbl = getAqDtlsTableName(billno);
            String ptQuery = "SELECT DTL.EMP_CODE,DTL.EMP_NAME,DTL.CUR_DESG,DTL.CUR_BASIC, DTL.AD_AMT FROM((SELECT * FROM BILL_MAST WHERE "
                    + "BILL_MAST.BILL_NO='" + billno + "')BILL_MAST LEFT OUTER JOIN (SELECT AQ_MAST.EMP_CODE,AQ_MAST.BILL_NO,AQ_MAST.CUR_DESG,"
                    + "AQ_MAST.EMP_NAME,AQ_MAST.CUR_BASIC,AQ_MAST.POST_SL_NO, AQ_DTLS.AD_AMT FROM((SELECT * FROM AQ_MAST WHERE "
                    + "AQ_MAST.BILL_NO='" + billno + "' AND AQ_MAST.AQ_MONTH=" + aqMonth + " AND"
                    + " AQ_MAST.AQ_YEAR=" + aqYear + "  )AQ_MAST INNER JOIN (SELECT * FROM " + aqDtlsTbl + " WHERE "
                    + "SCHEDULE='PT' AND AD_TYPE='D' AND AQ_MONTH=" + aqMonth + " AND AQ_YEAR=" + aqYear + " AND AD_AMT >0 )AQ_DTLS ON AQ_DTLS.AQSL_NO=AQ_MAST.AQSL_NO))DTL "
                    + "ON BILL_MAST.BILL_NO=DTL.BILL_NO)order by POST_SL_NO";
            rs = stmt.executeQuery(ptQuery);
            while (rs.next()) {

                ptBean = new PtScheduleBean();

                ptBean.setSlno(sno);
                ptBean.setEmpname(rs.getString("EMP_NAME"));
                ptBean.setEmpdesg(rs.getString("CUR_DESG"));

                if (rs.getString("AD_AMT") != null && !rs.getString("AD_AMT").equals("")) {
                    ptBean.setEmpTaxOnProffesion(rs.getString("AD_AMT"));
                } else {
                    ptBean.setEmpTaxOnProffesion("0");
                }
                carryForwardTax = carryForwardTax + rs.getInt("AD_AMT");

                ptBean.setTotalTax(carryForwardTax + "");
                empCode = rs.getString("EMP_CODE");
                basicSal = rs.getInt("CUR_BASIC");
                ptBean.setBasicSal(basicSal);

                stmt1 = con.createStatement();
                String query1 = "SELECT AD_AMT,AD_DESC FROM(select AQSL_NO from AQ_MAST where EMP_CODE ='" + empCode + "' and BILL_NO='" + billno + "')AQ_MAST "
                        + "INNER JOIN (SELECT AQSL_NO,AD_DESC,AD_AMT FROM AQ_DTLS WHERE AD_TYPE='A' )AQ_DTLS on AQ_DTLS.AQSL_NO=AQ_MAST.AQSL_NO";
                rs1 = stmt1.executeQuery(query1);
                int totalAllowance = 0;
                while (rs1.next()) {
                    totalAllowance = totalAllowance + rs1.getInt("AD_AMT");
                }
                String gross = basicSal + totalAllowance + "";
                totalGross = totalGross + Integer.parseInt(gross);
                ptBean.setTotalGross(totalGross + "");
                ptBean.setEmpGrossSal(gross);

                ptSchldList.add(ptBean);
                sno++;

                if (sno % 13 == 0) {
                    ptBean.setPagebreakPT("<input type=\"button\" name=\"pagebreak1\" style=\"page-break-before: always;width: 0;height: 0\"/>");
                    ptBean.setPageHeaderPT(reportPageHeader(con, "PT", null, billno, "") + "");
                } else {
                    ptBean.setPagebreakPT("");
                    ptBean.setPageHeaderPT("");
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            DataBaseFunctions.closeSqlObjects(rs, stmt);
            DataBaseFunctions.closeSqlObjects(rs1, stmt1);
            DataBaseFunctions.closeSqlObjects(con);
        }
        return ptSchldList;
    }

    @Override
    public CommonReportParamBean getCommonReportParameter(String billNo) {

        Connection con = null;
        CommonReportParamBean commonBean = new CommonReportParamBean();

        PayrollCommonFunction prcf = new PayrollCommonFunction();
        try {
            con = dataSource.getConnection();

            commonBean = prcf.getCommonReportParameter(con, billNo);
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            DataBaseFunctions.closeSqlObjects(con);
        }
        return commonBean;
    }

    @Override
    public List getITScheduleEmployeeList(String billno, String schedule, int aqMonth, int aqYear) {

        Connection con = null;
        Statement stmt = null;
        ResultSet rs = null;
        ItScheduleBean itBean = null;
        ArrayList itSchList = new ArrayList();
        String empCode = "";
        int sno = 1;
        String aqDtlsTbl = "";
        int carryForward = 0;
        try {
            con = dataSource.getConnection();
            stmt = con.createStatement();
            aqDtlsTbl = getAqDtlsTableName(billno);

            if (schedule != null && schedule.equals("CGEGIS")) {
                schedule = "(SCHEDULE='GIS' OR SCHEDULE='CGEGIS')";
            } else {
                schedule = "SCHEDULE='" + schedule + "'";
            }

            String itQuery = "SELECT DTL.EMP_CODE,DTL.EMP_NAME,DTL.CUR_DESG,DTL.CUR_BASIC, DTL.AD_AMT,ID_NO,AQSL_NO FROM("
                    + "(SELECT * FROM BILL_MAST WHERE BILL_MAST.BILL_NO='" + billno + "')BILL_MAST "
                    + "LEFT OUTER JOIN (SELECT AQ_MAST.EMP_CODE,"
                    + "AQ_MAST.BILL_NO,AQ_MAST.CUR_DESG,AQ_MAST.EMP_NAME,AQ_MAST.CUR_BASIC,AQ_MAST.POST_SL_NO, AQ_DTLS.AD_AMT,AQ_DTLS.AQSL_NO FROM"
                    + "((SELECT * FROM AQ_MAST WHERE AQ_MAST.BILL_NO='" + billno + "' AND AQ_MAST.aq_month = " + aqMonth + " AND AQ_MAST.aq_year = " + aqYear + ")AQ_MAST "
                    + "INNER JOIN (SELECT * FROM " + aqDtlsTbl + " WHERE "
                    + schedule + " AND AD_TYPE='D' AND AD_AMT >0 ) AQ_DTLS ON AQ_DTLS.AQSL_NO=AQ_MAST.AQSL_NO))DTL "
                    + "ON BILL_MAST.BILL_NO=DTL.BILL_NO left outer join (select ID_NO,EMP_ID from EMP_ID_DOC where ID_DESCRIPTION='PAN')EMP_ID_DOC "
                    + "on DTL.emp_code=EMP_ID_DOC.emp_id)order by POST_SL_NO";

            rs = stmt.executeQuery(itQuery);
            while (rs.next()) {
                itBean = new ItScheduleBean();

                itBean.setSlno(sno);
                itBean.setEmpname(rs.getString("EMP_NAME"));
                itBean.setEmpdesg(rs.getString("CUR_DESG"));
                if (rs.getString("AQSL_NO") != null && !rs.getString("AQSL_NO").equals("")) {
                    itBean.setEmpBasicSal(new CommonScheduleMethods().getGrossPay(con, rs.getString("AQSL_NO"), aqDtlsTbl, aqYear, aqMonth) + "");
                } else {
                    itBean.setEmpBasicSal("");
                }
                //itobjclass.setEmpBasicSal(rs.getString("CUR_BASIC"));
                if (rs.getString("AD_AMT") != null && !rs.getString("AD_AMT").equalsIgnoreCase("")) {
                    int dedAmt = rs.getInt("AD_AMT");
                    carryForward = carryForward + dedAmt;
                    itBean.setEmpDedutAmount(String.valueOf(dedAmt));
                    itBean.setCarryForward(String.valueOf(carryForward));
                } else {
                    itBean.setEmpDedutAmount("0");
                }
                if (rs.getString("ID_NO") != null && !rs.getString("ID_NO").equalsIgnoreCase("")) {
                    itBean.setEmpPanNo(rs.getString("ID_NO"));
                } else {
                    itBean.setEmpPanNo("");
                }
                empCode = rs.getString("EMP_CODE");

                if (sno % 20 == 0) {
                    itBean.setPagebreakIT("<input type=\"button\" name=\"pagebreak1\" style=\"page-break-before: always;width: 0;height: 0\"/>");
                    itBean.setPageHeaderIT(reportPageHeader(con, schedule, null, billno, "") + "");
                } else {
                    itBean.setPagebreakIT("");
                    itBean.setPageHeaderIT("");
                }

                itSchList.add(itBean);
                sno++;
            }

        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            DataBaseFunctions.closeSqlObjects(rs, stmt);
            DataBaseFunctions.closeSqlObjects(con);
        }
        return itSchList;
    }

    @Override
    public ItScheduleBean getITScheduleHeaderDetails(String billno, String schedule) {

        Connection con = null;
        Statement stmt = null;
        ResultSet rs = null;
        ItScheduleBean itBean = new ItScheduleBean();
        ArrayList itHeaderList = new ArrayList();
        PayrollCommonFunction prcf = new PayrollCommonFunction();
        String btId = "";

        try {
            con = dataSource.getConnection();

            CommonReportParamBean bean = prcf.getCommonReportParameter(con, billno);
            //itBean.setITScheduleDtls(getITScheduleEmployeeList(billno, schedule, month, year));
            stmt = con.createStatement();
            rs = stmt.executeQuery("SELECT BT_ID FROM G_AD_LIST WHERE SCHEDULE='" + schedule + "'");
            if (rs.next()) {
                btId = rs.getString("BT_ID");
            }
            itBean.setBtId(btId);

            itBean.setOfficeName(bean.getOfficename());
            itBean.setMontYear(prcf.getMonthAndYear(con, billno));
            itBean.setScheduleName(prcf.getReportName(con, schedule));
            itBean.setBillNo(bean.getBilldesc());
            itBean.setAqmonth(CalendarCommonMethods.getMonthAsString(bean.getAqmonth()));
            itBean.setAqyear(bean.getAqyear() + "");
            itBean.setTanno(bean.getTanno());
            itBean.setDeptName(bean.getDeptname());
            itBean.setDdoDegn(bean.getDdoname());
            itBean.setBillDesc(bean.getBilldesc());
            itBean.setReportName(prcf.getReportName(con, schedule));

            itHeaderList.add(itBean);

        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            DataBaseFunctions.closeSqlObjects(rs, stmt);
            DataBaseFunctions.closeSqlObjects(con);
        }
        return itBean;
    }

    @Override
    public PtScheduleBean getPTScheduleHeaderDetails(String billno) {

        Connection con = null;
        Statement stmt = null;
        ResultSet rs = null;
        PtScheduleBean ptBean = new PtScheduleBean();
        ArrayList ptHeaderList = new ArrayList();
        PayrollCommonFunction prcf = new PayrollCommonFunction();

        try {
            con = dataSource.getConnection();

            CommonReportParamBean bean = prcf.getCommonReportParameter(con, billno);
            ptBean.setPTScheduleDtls(getPTScheduleEmployeeList(billno, bean.getAqmonth(), bean.getAqyear()));

            ptBean.setDeptName(bean.getDeptname());
            ptBean.setOfficeName(bean.getOfficename());
            ptBean.setDdoDegn(bean.getDdoname());
            ptBean.setBillDesc(bean.getBilldesc());
            ptBean.setMonthYear(prcf.getMonthAndYear(con, billno));
            ptBean.setBillNo(billno);

            ptHeaderList.add(ptBean);

        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            DataBaseFunctions.closeSqlObjects(rs, stmt);
            DataBaseFunctions.closeSqlObjects(con);
        }
        return ptBean;
    }

    public ArrayList getList(String billno, String schedule) throws Exception {
        Connection con = null;
        ResultSet rs = null;
        Statement st = null;
        WrrScheduleBean wrrBean = null;
        ArrayList displist = new ArrayList();
        int i = 0;
        int j = 0;
        double carryForward = 0.0;
        double amt = 0.0;
        String test = null;

        try {
            con = dataSource.getConnection();
            st = con.createStatement();
            rs = st.executeQuery("select GPF_ACC_NO,EMP_QTR_ALLOT.QUARTER_NO,EMP_QTR_ALLOT.ADDRESS,AQ_MAST.EMP_NAME,AQ_MAST.EMP_CODE,AQ_MAST.CUR_DESG,AQ_DTLS.ACC_NO,AQ_DTLS.REF_DESC,AQ_DTLS.AD_AMT,POST_SL_NO from ( select GPF_ACC_NO,aq_mast.EMP_CODE,aq_mast.EMP_NAME,aq_mast.CUR_DESG,aq_mast.AQSL_NO,POST_SL_NO from AQ_MAST where BILL_NO='" + billno + "') AQ_MAST INNER JOIN (select AQ_DTLS.AQSL_NO,AQ_DTLS.SCHEDULE,AQ_DTLS.AD_AMT,AQ_DTLS.AD_TYPE,AQ_DTLS.ACC_NO,AQ_DTLS.REF_DESC from AQ_DTLS  where AQ_DTLS.SCHEDULE='" + schedule + "' AND AQ_DTLS.AD_TYPE='D' AND AD_AMT >0 ) AQ_DTLS on AQ_DTLS.AQSL_NO=AQ_MAST.AQSL_NO inner join (select quarter_no,EMP_ID,address from emp_qtr_allot WHERE if_surrendered IS NULL OR if_surrendered != 'Y')emp_qtr_allot on emp_qtr_allot.EMP_ID=AQ_MAST.EMP_CODE ORDER BY POST_SL_NO");
            while (rs.next()) {
                wrrBean = new WrrScheduleBean();

                wrrBean.setQuarterNo(rs.getString("QUARTER_NO"));
                wrrBean.setAddress(rs.getString("ADDRESS"));
                wrrBean.setEmpcode(rs.getString("GPF_ACC_NO"));
                wrrBean.setEmpname(rs.getString("EMP_NAME"));
                wrrBean.setEmpdesg(rs.getString("CUR_DESG"));
                wrrBean.setRecMonth(rs.getString("REF_DESC"));
                wrrBean.setAmount(rs.getString("AD_AMT"));

                amt = rs.getDouble("AD_AMT");
                carryForward = carryForward + amt;
                wrrBean.setCarryForward(carryForward + "");
                test = Numtowordconvertion.convertNumber((int) carryForward);
                wrrBean.setTotFig(test);
                displist.add(wrrBean);
            }

        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            DataBaseFunctions.closeSqlObjects(rs, st);
            DataBaseFunctions.closeSqlObjects(con);
        }
        return displist;
    }

    public String getAqDtlsTableName(String billNo) {
        Connection con = null;
        Statement stmt = null;
        ResultSet res = null;
        String aqDTLS = "AQ_DTLS";
        try {
            con = dataSource.getConnection();
            stmt = con.createStatement();
            res = stmt.executeQuery("SELECT aq_month,aq_year FROM BILL_MAST WHERE bill_no=" + billNo);
            int aqMonth = 0;
            int aqYear = 0;
            if (res.next()) {
                aqMonth = res.getInt("aq_month");
                aqYear = res.getInt("aq_year");
            }

            aqDTLS = hrms.common.AqFunctionalities.getAQBillDtlsTable(aqMonth, aqYear);
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            DataBaseFunctions.closeSqlObjects(res, stmt);
            DataBaseFunctions.closeSqlObjects(con);
        }
        return aqDTLS;
    }

    public ArrayList getEmpGpfDetails(String gpfType, String billNo, Connection con) throws Exception {
        ArrayList empGpfList = new ArrayList();
        ResultSet rs = null;
        Statement stmt = null;
        ResultSet rs2 = null;
        Statement stmt2 = null;
        int slno = 0;
        GPFScheduleBean gpfBean = null;

        String noofinst = "";
        int releasedAmount = 0;
        int total = 0;
        String dob = null;
        String dob1 = null;
        String dob2 = null;
        String dob3 = null;
        String dob4 = null;
        String dos = null;
        String dos1 = null;
        String dos2 = null;
        String dos3 = null;
        String dos4 = null;
        String doe = null;
        String doe1 = null;
        String doe2 = null;
        String doe3 = null;
        String doe4 = null;
        int gpfinstl = 0;
        String aqDtlsTbl = "";
        try {
            stmt = con.createStatement();
            stmt2 = con.createStatement();
            aqDtlsTbl = getAqDtlsTableName(billNo);
            String gpfQuery = "SELECT EMP_MAST.GPF_NO,EMP_MAST.DOE_GOV,EMP_MAST.DOB,EMP_MAST.DOS,AQ_MAST.EMP_CODE,AQ_MAST.EMP_NAME,AQ_MAST.CUR_DESG,"
                    + "AQ_MAST.BANK_ACC_NO,AQ_MAST.CUR_BASIC,GP,AQ_MAST.PAY_SCALE,AQ_MAST.AQSL_NO,POST_SL_NO from (SELECT EMP_CODE,EMP_NAME,CUR_DESG,"
                    + "BANK_ACC_NO,CUR_BASIC,PAY_SCALE,AQSL_NO,POST_SL_NO from AQ_MAST WHERE GPF_TYPE='" + gpfType + "' AND BILL_NO='" + billNo + "') AQ_MAST "
                    + "left outer join EMP_MAST on AQ_MAST.EMP_CODE=EMP_MAST.EMP_ID ORDER BY SUBSTR(EMP_MAST.GPF_NO,"
                    + "LENGTH(getgpfseries(EMP_MAST.GPF_NO))+1)";
            rs = stmt.executeQuery(gpfQuery);
            while (rs.next()) {
                releasedAmount = 0;
                gpfinstl = 0;
                gpfBean = new GPFScheduleBean();
                if (rs.getString("EMP_NAME") != null && !rs.getString("EMP_NAME").equals("")) {

                    gpfBean.setSlno(slno);
                    slno++;
                    gpfBean.setEmpName(rs.getString("EMP_NAME"));
                    gpfBean.setDesignation(rs.getString("CUR_DESG"));
                    gpfBean.setAccountNo(rs.getString("GPF_NO"));
                    gpfBean.setBasicPay(rs.getString("CUR_BASIC"));
                    gpfBean.setGradePay(rs.getString("GP"));
                    gpfBean.setScaleOfPay(rs.getString("PAY_SCALE"));
                    noofinst = CommonScheduleMethods.getNoOfInst2(rs.getString("AQSL_NO"), aqDtlsTbl, con);
                    gpfBean.setNoOfInstalment(noofinst);

                    if (rs.getString("DOE_GOV") != null && !rs.getString("DOE_GOV").trim().equals("")) {
                        doe = rs.getString("DOE_GOV");
                        doe1 = doe.substring(0, 4);
                        doe2 = doe.substring(5, 7);
                        doe3 = doe.substring(8, 10);
                        doe4 = doe3 + "/" + doe2 + "/" + doe1;
                        gpfBean.setDateOfEntry(doe4);
                    }
                    if (rs.getString("DOB") != null && !rs.getString("DOB").trim().equals("")) {
                        dob = rs.getString("DOB");
                        dob1 = dob.substring(0, 4);
                        dob2 = dob.substring(5, 7);
                        dob3 = dob.substring(8, 10);
                        dob4 = dob3 + "/" + dob2 + "/" + dob1;
                        gpfBean.setDob(dob4);
                    }
                    if (rs.getString("DOS") != null && !rs.getString("DOS").trim().equals("")) {
                        dos = rs.getString("DOS");
                        dos1 = dos.substring(0, 4);
                        dos2 = dos.substring(5, 7);
                        dos3 = dos.substring(8, 10);
                        dos4 = dos3 + "/" + dos2 + "/" + dos1;
                        gpfBean.setDor(dos4);
                    }

                    String qryString1 = "SELECT AD_AMT MONTHLYSUB FROM " + aqDtlsTbl + " WHERE AD_TYPE='D' AND EMP_CODE='" + rs.getString("EMP_CODE") + "' AND "
                            + "DED_TYPE='S' AND SCHEDULE='GPF' AND AQSL_NO='" + rs.getString("AQSL_NO") + "'";
                    rs2 = stmt2.executeQuery(qryString1);
                    if (rs2.next()) {
                        gpfBean.setMonthlySub(rs2.getInt("MONTHLYSUB"));
                    }
                    DataBaseFunctions.closeSqlObjects(rs2, stmt2);

                    String qryString2 = "SELECT AD_AMT TOWARDSLOAN FROM " + aqDtlsTbl + " WHERE AD_TYPE='D' AND EMP_CODE='" + rs.getString("EMP_CODE") + "' "
                            + "AND DED_TYPE='L' AND SCHEDULE='GA' AND AQSL_NO='" + rs.getString("AQSL_NO") + "'";
                    stmt2 = con.createStatement();
                    rs2 = stmt2.executeQuery(qryString2);
                    while (rs2.next()) {
                        gpfinstl = gpfinstl + rs2.getInt("TOWARDSLOAN");
                    }
                    gpfBean.setTowardsLoan(gpfinstl);
                    DataBaseFunctions.closeSqlObjects(rs2, stmt2);

                    String qryString3 = "SELECT SUM(AD_AMT) TOWARDSOTHER FROM " + aqDtlsTbl + " WHERE AD_TYPE='D' AND EMP_CODE='" + rs.getString("EMP_CODE") + "' "
                            + "AND (AD_CODE='GPDD' OR AD_CODE='GPIR') AND AQSL_NO='" + rs.getString("AQSL_NO") + "'";
                    stmt2 = con.createStatement();
                    rs2 = stmt2.executeQuery(qryString3);
                    if (rs2.next()) {
                        gpfBean.setOtherDeposits(rs2.getInt("TOWARDSOTHER"));
                    }

                    releasedAmount = gpfBean.getMonthlySub() + gpfBean.getTowardsLoan() + gpfBean.getOtherDeposits();
                    gpfBean.setTotalReleased(releasedAmount);
                    total += releasedAmount;
                    gpfBean.setCarryForward(total + "");
                    if (total > 0) {
                        empGpfList.add(gpfBean);
                    }
                }
                if (total > 0) {
                    gpfBean.setAmountInWords(Numtowordconvertion.convertNumber((int) total).toUpperCase());
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            DataBaseFunctions.closeSqlObjects(rs, stmt);
            DataBaseFunctions.closeSqlObjects(rs2, stmt2);
        }
        return empGpfList;
    }

    @Override
    public VacancyStatementScheduleBean getVacancyStmtScheduleHeaderDetails(String billno) {

        Connection con = null;
        VacancyStatementScheduleBean absStmtBean = new VacancyStatementScheduleBean();
        String btid = "";
        try {
            con = dataSource.getConnection();

            PayrollCommonFunction prcf = new PayrollCommonFunction();
            CommonReportParamBean bean = prcf.getCommonReportParameter(con, billno);

            absStmtBean.setBillNo(billno);
            absStmtBean.setOffName(bean.getOfficename());

        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            DataBaseFunctions.closeSqlObjects(con);
        }
        return absStmtBean;
    }

    @Override
    public List getVacancyStmtScheduleEmpList(String billno) {

        Connection con = null;
        ResultSet rs = null;
        Statement stmt = null;
        ArrayList absStmtScheduleList = new ArrayList();
        VacancyStatementScheduleBean absStmtBean = null;
        int total = 0;
        int gTotal = 0;
        int slno = 0;
        try {
            con = dataSource.getConnection();
            stmt = con.createStatement();
            String absStmtQuery = "SELECT OFF_CODE,CUR_DESG,COUNT(*) CNT,PAY_SCALE,OFF_CODE FROM AQ_MAST WHERE BILL_NO='" + billno + "' AND EMP_CODE IS NULL "
                    + "GROUP BY CUR_DESG,PAY_SCALE,OFF_CODE";
            rs = stmt.executeQuery(absStmtQuery);
            while (rs.next()) {
                absStmtBean = new VacancyStatementScheduleBean();
                slno++;
                absStmtBean.setSlno(slno);

                String desg = rs.getString("CUR_DESG");
                StringTokenizer stringTokenizer = new StringTokenizer(desg, ",");
                if (stringTokenizer.hasMoreTokens()) {
                    desg = stringTokenizer.nextToken().trim();
                }
                absStmtBean.setDesignation(desg);

                total = rs.getInt("CNT");
                absStmtBean.setPostno(total);

                if (rs.getString("PAY_SCALE") != null && !rs.getString("PAY_SCALE").equals("")) {
                    absStmtBean.setPayscale(rs.getString("PAY_SCALE"));
                } else {
                    absStmtBean.setPayscale("--");
                }

                gTotal = gTotal + total;
                absStmtBean.setGrandTotal(gTotal);

                absStmtScheduleList.add(absStmtBean);
            }

        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            DataBaseFunctions.closeSqlObjects(rs, stmt);
            DataBaseFunctions.closeSqlObjects(con);
        }
        return absStmtScheduleList;
    }

    public List getAllowanceList(Connection con, String adtype, String billno, double basicPay, String accType, int aqYear, int aqMonth) {
        AllowDeductDetails allowdeduct = null;
        List al = new ArrayList();
        ResultSet rs = null;
        Statement stmt = null;
        String ispayadded = "false";
        String gphead = "";
        String aqDtlsTbl = "";
        try {
            stmt = con.createStatement();
            aqDtlsTbl = getAqDtlsTableName(billno);
            String alowanceQry = "SELECT AD_CODE,BT_ID,SUM(AD_AMT) AD_AMT FROM " + aqDtlsTbl + " AQ_DTLS INNER JOIN (SELECT AQ_MAST.AQSL_NO FROM AQ_MAST WHERE "
                    + " AQ_MONTH=" + aqMonth + " AND AQ_YEAR=" + aqYear + " AND AQ_MAST.BILL_NO='" + billno + "')AQ_MAST ON AQ_DTLS.AQSL_NO = AQ_MAST.AQSL_NO WHERE AD_TYPE='" + adtype + "' AND AD_AMT>0 GROUP BY "
                    + "AQ_DTLS.AD_CODE,BT_ID,NOW_DEDN ORDER BY BT_ID";
            stmt = con.createStatement();
            rs = stmt.executeQuery(alowanceQry);
            while (rs.next()) {

                String adName = rs.getString("AD_CODE");
                if (adName.equalsIgnoreCase("GP")) {
                    gphead = rs.getString("BT_ID");
                    ispayadded = "false";
                }

                if (ispayadded.equals("false")) {
                    allowdeduct = new AllowDeductDetails();
                    allowdeduct.setAdname("PAY  ");
                    if (gphead != null && !gphead.equals("")) {
                        allowdeduct.setObjecthead(gphead);
                    } else {
                        allowdeduct.setObjecthead("136");
                    }
                    allowdeduct.setAdamount(Double.valueOf(basicPay + "").longValue() + "");
                    al.add(allowdeduct);
                    ispayadded = "true";
                }

                allowdeduct = new AllowDeductDetails();

                allowdeduct.setAdname(adName);
                if (accType != null && accType.equalsIgnoreCase("TPF") && allowdeduct.getAdname().equalsIgnoreCase("LIC")) {
                    allowdeduct.setObjecthead("7129");

                } else if (accType != null && accType.equalsIgnoreCase("TPF") && (allowdeduct.getAdname().equalsIgnoreCase("GPF") || allowdeduct.getAdname().equalsIgnoreCase("GA"))) {
                    allowdeduct.setObjecthead("7058");

                } else {
                    allowdeduct.setObjecthead(rs.getString("BT_ID"));
                }

                if (allowdeduct.getObjecthead() != null && !allowdeduct.getObjecthead().equals("")) {
                    allowdeduct.setAdname(rs.getString("AD_CODE"));
                    allowdeduct.setAdamount(Double.valueOf(rs.getDouble("AD_AMT") + "").longValue() + "");
                }
                al.add(allowdeduct);
            }

            Collections.sort(al);
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            DataBaseFunctions.closeSqlObjects(rs, stmt);
        }
        return al;
    }

    public ArrayList getDeductionList(Connection con, String adtype, String billno, String accType, int aqYear, int aqMonth) {

        Statement stmt = null;
        ResultSet rs = null;
        AllowDeductDetails allowdeduct = null;
        ArrayList dList = new ArrayList();
        String aqDtlsTbl = "";
        try {
            stmt = con.createStatement();
            aqDtlsTbl = getAqDtlsTableName(billno);
            String deductQry = "SELECT AQ_DTLS.AD_CODE,AQ_DTLS.BT_ID,sum(AQ_DTLS.AD_AMT) AD_AMT from( (Select AQ_MAST.AQSL_NO FROM AQ_MAST where "
                    + "AQ_MAST.BILL_NO = " + billno + " AND AQ_MONTH=" + aqMonth + " AND AQ_YEAR=" + aqYear + " )AQ_MAST inner join (SELECT AQSL_NO,AD_AMT,AD_CODE,BT_ID "
                    + "from " + aqDtlsTbl + " where AD_TYPE ='" + adtype + "' AND AD_AMT>0 AND SCHEDULE != 'PVTL' and SCHEDULE != 'PVTD') AQ_DTLS ON "
                    + "AQ_MAST.AQSL_NO = AQ_DTLS.AQSL_NO) GROUP BY AQ_DTLS.AD_CODE,BT_ID ORDER BY BT_ID";
            stmt = con.createStatement();
            rs = stmt.executeQuery(deductQry);
            while (rs.next()) {
                allowdeduct = new AllowDeductDetails();

                allowdeduct.setAdname(rs.getString("AD_CODE"));
                if (accType != null && accType.equalsIgnoreCase("TPF") && allowdeduct.getAdname().equalsIgnoreCase("LIC")) {
                    allowdeduct.setObjecthead("7129");
                } else if (accType != null && accType.equalsIgnoreCase("TPF") && (allowdeduct.getAdname().equalsIgnoreCase("GPF") || allowdeduct.getAdname().equalsIgnoreCase("GA"))) {
                    allowdeduct.setObjecthead("7058");
                } else {
                    allowdeduct.setObjecthead(rs.getString("BT_ID"));
                }

                allowdeduct.setAdamount(rs.getDouble("AD_AMT") + "");
                dList.add(allowdeduct);
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            DataBaseFunctions.closeSqlObjects(rs, stmt);
        }
        return dList;
    }

    @Override
    public void thirdSchedulePDF(Document document, String empid) {

        Connection con = null;

        PreparedStatement pst = null;
        ResultSet rs = null;

        PreparedStatement pst2 = null;
        ResultSet rs2 = null;

        int fixedheight = 40;

        Date incrDt = null;
        int revisedBasic = 0;
        try {
            con = this.dataSource.getConnection();

            Font f1 = new Font();
            f1.setSize(10);
            f1.setFamily("Times New Roman");

            PdfPTable table = null;
            PdfPCell cell = null;

            PdfPTable innertable = null;
            PdfPCell innercell = null;

            table = new PdfPTable(4);
            table.setWidths(new float[]{0.3f, 3, 0.5f, 3});
            table.setWidthPercentage(80);

            innertable = new PdfPTable(2);
            innertable.setWidths(new float[]{0.05f, 0.5f});
            innertable.setWidthPercentage(100);

            cell = new PdfPCell(new Phrase("THIRD SCHEDULE", getDesired_PDF_Font(13, true, true)));
            cell.setColspan(4);
            cell.setFixedHeight(fixedheight);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("Form for fixation of pay under the Orissa Revised Scales", getDesired_PDF_Font(13, true, false)));
            cell.setColspan(4);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("of Pay Rules,2016", getDesired_PDF_Font(13, true, false)));
            cell.setColspan(4);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("(See rule-7)", getDesired_PDF_Font(12, false, false)));
            cell.setColspan(4);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            String sql = "SELECT emp_pay_revised_2016.EMP_ID,ARRAY_TO_STRING(ARRAY[INITIALS, F_NAME, M_NAME,L_NAME], ' ') FULL_NAME,G_POST.POST,existing_pay_scale,date_option_exercised,"
                    + " mon_basic,DP,DA,total_amount,revised_basic,emp_pay_revised_2016.GP FROM emp_pay_revised_2016"
                    + " INNER JOIN EMP_MAST ON emp_pay_revised_2016.EMP_ID=EMP_MAST.EMP_ID"
                    + " LEFT OUTER JOIN G_POST ON emp_pay_revised_2016.POST=G_POST.POST_CODE WHERE emp_pay_revised_2016.EMP_ID=?";
            pst = con.prepareStatement(sql);
            pst.setString(1, empid);
            rs = pst.executeQuery();
            if (rs.next()) {

                cell = new PdfPCell();
                cell.setColspan(4);
                cell.setFixedHeight(fixedheight);
                cell.setBorder(Rectangle.NO_BORDER);
                table.addCell(cell);

                cell = new PdfPCell(new Phrase("1.", f1));
                cell.setFixedHeight(fixedheight);
                cell.setBorder(Rectangle.NO_BORDER);
                table.addCell(cell);
                cell = new PdfPCell(new Phrase("Name of the Employee", f1));
                cell.setFixedHeight(fixedheight);
                cell.setBorder(Rectangle.NO_BORDER);
                table.addCell(cell);
                cell = new PdfPCell(new Phrase(":", f1));
                cell.setFixedHeight(fixedheight);
                cell.setBorder(Rectangle.NO_BORDER);
                table.addCell(cell);
                cell = new PdfPCell(new Phrase(rs.getString("FULL_NAME"), f1));
                cell.setFixedHeight(fixedheight);
                cell.setBorder(Rectangle.NO_BORDER);
                table.addCell(cell);

                cell = new PdfPCell(new Phrase("2.", f1));
                cell.setFixedHeight(fixedheight);
                cell.setBorder(Rectangle.NO_BORDER);
                table.addCell(cell);
                cell = new PdfPCell(new Phrase("Designation of the post in which pay is to be fixed as on January 1,2016.", f1));
                cell.setFixedHeight(fixedheight);
                cell.setBorder(Rectangle.NO_BORDER);
                table.addCell(cell);
                cell = new PdfPCell(new Phrase(":", f1));
                cell.setFixedHeight(fixedheight);
                cell.setBorder(Rectangle.NO_BORDER);
                table.addCell(cell);
                cell = new PdfPCell(new Phrase(rs.getString("POST"), f1));
                cell.setFixedHeight(fixedheight);
                cell.setBorder(Rectangle.NO_BORDER);
                table.addCell(cell);

                cell = new PdfPCell(new Phrase("3.", f1));
                cell.setFixedHeight(fixedheight);
                cell.setBorder(Rectangle.NO_BORDER);
                table.addCell(cell);
                cell = new PdfPCell(new Phrase("Status(substantive/officiating)", f1));
                cell.setFixedHeight(fixedheight);
                cell.setBorder(Rectangle.NO_BORDER);
                table.addCell(cell);
                cell = new PdfPCell(new Phrase(":", f1));
                cell.setFixedHeight(fixedheight);
                cell.setBorder(Rectangle.NO_BORDER);
                table.addCell(cell);
                cell = new PdfPCell(new Phrase("Substantive", f1));
                cell.setFixedHeight(fixedheight);
                cell.setBorder(Rectangle.NO_BORDER);
                table.addCell(cell);

                cell = new PdfPCell(new Phrase("4.", f1));
                cell.setFixedHeight(fixedheight);
                cell.setBorder(Rectangle.NO_BORDER);
                table.addCell(cell);
                cell = new PdfPCell(new Phrase("Name of the Head of the Office (Designation only)", f1));
                cell.setFixedHeight(fixedheight);
                cell.setBorder(Rectangle.NO_BORDER);
                table.addCell(cell);
                cell = new PdfPCell(new Phrase(":", f1));
                cell.setFixedHeight(fixedheight);
                cell.setBorder(Rectangle.NO_BORDER);
                table.addCell(cell);
                cell = new PdfPCell(new Phrase("", f1));
                cell.setFixedHeight(fixedheight);
                cell.setBorder(Rectangle.NO_BORDER);
                table.addCell(cell);

                cell = new PdfPCell(new Phrase("5.", f1));
                cell.setFixedHeight(fixedheight);
                cell.setBorder(Rectangle.NO_BORDER);
                table.addCell(cell);
                cell = new PdfPCell(new Phrase("Existing Scale of Pay", f1));
                cell.setFixedHeight(fixedheight);
                cell.setBorder(Rectangle.NO_BORDER);
                table.addCell(cell);
                cell = new PdfPCell(new Phrase(":", f1));
                cell.setFixedHeight(fixedheight);
                cell.setBorder(Rectangle.NO_BORDER);
                table.addCell(cell);
                cell = new PdfPCell(new Phrase(rs.getString("existing_pay_scale"), f1));
                cell.setFixedHeight(fixedheight);
                cell.setBorder(Rectangle.NO_BORDER);
                table.addCell(cell);

                cell = new PdfPCell(new Phrase("6.", f1));
                cell.setFixedHeight(fixedheight);
                cell.setBorder(Rectangle.NO_BORDER);
                table.addCell(cell);
                cell = new PdfPCell(new Phrase("Revised pay band in the pay structure as per the Fitment Table attached at Annexure-I", f1));
                cell.setFixedHeight(fixedheight);
                cell.setBorder(Rectangle.NO_BORDER);
                table.addCell(cell);
                cell = new PdfPCell(new Phrase(":", f1));
                cell.setFixedHeight(fixedheight);
                cell.setBorder(Rectangle.NO_BORDER);
                table.addCell(cell);
                cell = new PdfPCell(new Phrase("", f1));
                cell.setFixedHeight(fixedheight);
                cell.setBorder(Rectangle.NO_BORDER);
                table.addCell(cell);

                cell = new PdfPCell(new Phrase("7.", f1));
                cell.setFixedHeight(fixedheight);
                cell.setBorder(Rectangle.NO_BORDER);
                table.addCell(cell);
                cell = new PdfPCell(new Phrase("Date from which option exercised", f1));
                cell.setFixedHeight(fixedheight);
                cell.setBorder(Rectangle.NO_BORDER);
                table.addCell(cell);
                cell = new PdfPCell(new Phrase(":", f1));
                cell.setFixedHeight(fixedheight);
                cell.setBorder(Rectangle.NO_BORDER);
                table.addCell(cell);
                cell = new PdfPCell(new Phrase(CommonFunctions.getFormattedOutputDate1(rs.getDate("date_option_exercised")), f1));
                cell.setFixedHeight(fixedheight);
                cell.setBorder(Rectangle.NO_BORDER);
                table.addCell(cell);

                cell = new PdfPCell(new Phrase("8.", f1));
                cell.setFixedHeight(fixedheight);
                cell.setBorder(Rectangle.NO_BORDER);
                table.addCell(cell);
                cell = new PdfPCell(new Phrase("Emoulments in the existing Scale of pay on the Date from which Revised Scale is opted", f1));
                cell.setFixedHeight(fixedheight);
                cell.setBorder(Rectangle.NO_BORDER);
                table.addCell(cell);
                cell = new PdfPCell(new Phrase(":", f1));
                cell.setFixedHeight(fixedheight);
                cell.setBorder(Rectangle.NO_BORDER);
                table.addCell(cell);
                cell = new PdfPCell(new Phrase("", f1));
                cell.setFixedHeight(fixedheight);
                cell.setBorder(Rectangle.NO_BORDER);
                table.addCell(cell);

                cell = new PdfPCell();
                cell.setFixedHeight(fixedheight);
                cell.setBorder(Rectangle.NO_BORDER);
                table.addCell(cell);
                innercell = new PdfPCell(new Phrase("(a)", f1));
                innercell.setBorder(Rectangle.NO_BORDER);
                innertable.addCell(innercell);
                innercell = new PdfPCell(new Phrase("Basic Pay(including R.P.P)", f1));
                innercell.setBorder(Rectangle.NO_BORDER);
                innertable.addCell(innercell);
                cell = new PdfPCell(innertable);
                cell.setFixedHeight(fixedheight);
                cell.setBorder(Rectangle.NO_BORDER);
                table.addCell(cell);
                cell = new PdfPCell(new Phrase(":", f1));
                cell.setFixedHeight(fixedheight);
                cell.setBorder(Rectangle.NO_BORDER);
                table.addCell(cell);
                cell = new PdfPCell(new Phrase(rs.getString("mon_basic"), f1));
                cell.setFixedHeight(fixedheight);
                cell.setBorder(Rectangle.NO_BORDER);
                table.addCell(cell);

                cell = new PdfPCell();
                cell.setFixedHeight(fixedheight);
                cell.setBorder(Rectangle.NO_BORDER);
                table.addCell(cell);
                innertable = new PdfPTable(2);
                innertable.setWidths(new float[]{0.05f, 0.5f});
                innertable.setWidthPercentage(100);

                innercell = new PdfPCell(new Phrase("(b)", f1));
                innercell.setBorder(Rectangle.NO_BORDER);
                innertable.addCell(innercell);
                innercell = new PdfPCell(new Phrase("D.P. if any", f1));
                innercell.setBorder(Rectangle.NO_BORDER);
                innertable.addCell(innercell);
                cell = new PdfPCell(innertable);
                cell.setFixedHeight(fixedheight);
                cell.setBorder(Rectangle.NO_BORDER);
                table.addCell(cell);
                cell = new PdfPCell(new Phrase(":", f1));
                cell.setFixedHeight(fixedheight);
                cell.setBorder(Rectangle.NO_BORDER);
                table.addCell(cell);
                cell = new PdfPCell(new Phrase(rs.getString("DP"), f1));
                cell.setFixedHeight(fixedheight);
                cell.setBorder(Rectangle.NO_BORDER);
                table.addCell(cell);

                cell = new PdfPCell();
                cell.setFixedHeight(fixedheight);
                cell.setBorder(Rectangle.NO_BORDER);
                table.addCell(cell);
                innertable = new PdfPTable(2);
                innertable.setWidths(new float[]{0.05f, 0.5f});
                innertable.setWidthPercentage(100);

                innercell = new PdfPCell(new Phrase("(c)", f1));
                innercell.setBorder(Rectangle.NO_BORDER);
                innertable.addCell(innercell);
                innercell = new PdfPCell(new Phrase("D.A as on 01.01.2016 4%", f1));
                innercell.setBorder(Rectangle.NO_BORDER);
                innertable.addCell(innercell);
                cell = new PdfPCell(innertable);
                cell.setFixedHeight(fixedheight);
                cell.setBorder(Rectangle.NO_BORDER);
                table.addCell(cell);
                cell = new PdfPCell(new Phrase(":", f1));
                cell.setFixedHeight(fixedheight);
                cell.setBorder(Rectangle.NO_BORDER);
                table.addCell(cell);
                cell = new PdfPCell(new Phrase(rs.getString("DA"), f1));
                cell.setFixedHeight(fixedheight);
                cell.setBorder(Rectangle.NO_BORDER);
                table.addCell(cell);

                cell = new PdfPCell();
                cell.setFixedHeight(fixedheight);
                cell.setBorder(Rectangle.NO_BORDER);
                table.addCell(cell);
                innertable = new PdfPTable(2);
                innertable.setWidths(new float[]{0.05f, 0.5f});
                innertable.setWidthPercentage(100);

                innercell = new PdfPCell(new Phrase("(d)", f1));
                innercell.setBorder(Rectangle.NO_BORDER);
                innertable.addCell(innercell);
                innercell = new PdfPCell(new Phrase("Total emoulments (a to c)", f1));
                innercell.setBorder(Rectangle.NO_BORDER);
                innertable.addCell(innercell);
                cell = new PdfPCell(innertable);
                cell.setFixedHeight(fixedheight);
                cell.setBorder(Rectangle.NO_BORDER);
                table.addCell(cell);
                cell = new PdfPCell(new Phrase(":", f1));
                cell.setFixedHeight(fixedheight);
                cell.setBorder(Rectangle.NO_BORDER);
                table.addCell(cell);
                cell = new PdfPCell(new Phrase(rs.getString("total_amount"), f1));
                cell.setFixedHeight(fixedheight);
                cell.setBorder(Rectangle.NO_BORDER);
                table.addCell(cell);

                cell = new PdfPCell(new Phrase("9.", f1));
                cell.setFixedHeight(fixedheight);
                cell.setBorder(Rectangle.NO_BORDER);
                table.addCell(cell);
                cell = new PdfPCell(new Phrase("Pay fixed in the Revised Scale of pay", f1));
                cell.setFixedHeight(fixedheight);
                cell.setBorder(Rectangle.NO_BORDER);
                table.addCell(cell);
                cell = new PdfPCell(new Phrase(":", f1));
                cell.setFixedHeight(fixedheight);
                cell.setBorder(Rectangle.NO_BORDER);
                table.addCell(cell);
                cell = new PdfPCell();
                cell.setFixedHeight(fixedheight);
                cell.setBorder(Rectangle.NO_BORDER);
                table.addCell(cell);

                cell = new PdfPCell();
                cell.setFixedHeight(fixedheight);
                cell.setBorder(Rectangle.NO_BORDER);
                table.addCell(cell);
                innertable = new PdfPTable(2);
                innertable.setWidths(new float[]{0.05f, 0.5f});
                innertable.setWidthPercentage(100);

                innercell = new PdfPCell(new Phrase("(a)", f1));
                innercell.setBorder(Rectangle.NO_BORDER);
                innertable.addCell(innercell);
                innercell = new PdfPCell(new Phrase("Pay in revised pay band/scale in which pay is to be fixed as per the fitment Table attached at Annexure-I", f1));
                innercell.setBorder(Rectangle.NO_BORDER);
                innertable.addCell(innercell);
                cell = new PdfPCell(innertable);
                cell.setFixedHeight(50);
                cell.setBorder(Rectangle.NO_BORDER);
                table.addCell(cell);
                cell = new PdfPCell(new Phrase(":", f1));
                cell.setFixedHeight(fixedheight);
                cell.setBorder(Rectangle.NO_BORDER);
                table.addCell(cell);
                cell = new PdfPCell(new Phrase("", f1));
                cell.setFixedHeight(fixedheight);
                cell.setBorder(Rectangle.NO_BORDER);
                table.addCell(cell);

                cell = new PdfPCell(new Phrase("10.", f1));
                cell.setFixedHeight(fixedheight);
                cell.setBorder(Rectangle.NO_BORDER);
                table.addCell(cell);
                cell = new PdfPCell(new Phrase("Stepped up pay with reference to the Revised pay of junior, if applicable [Notes 2 & 4 of Rule 7(1) of ORSP Rules,2008].Name and pay of the Junior also to be indicated distinctly", f1));
                cell.setFixedHeight(fixedheight);
                cell.setBorder(Rectangle.NO_BORDER);
                table.addCell(cell);
                cell = new PdfPCell(new Phrase(":", f1));
                cell.setFixedHeight(fixedheight);
                cell.setBorder(Rectangle.NO_BORDER);
                table.addCell(cell);
                cell = new PdfPCell(new Phrase("", f1));
                cell.setFixedHeight(fixedheight);
                cell.setBorder(Rectangle.NO_BORDER);
                table.addCell(cell);

                cell = new PdfPCell(new Phrase("11.", f1));
                cell.setFixedHeight(fixedheight);
                cell.setBorder(Rectangle.NO_BORDER);
                table.addCell(cell);
                cell = new PdfPCell(new Phrase("Revised pay with reference to the Substantive Pay in cases where the pay fixed into the officiating post is lower than the pay fixed in the substantive post if applicable [See Rule(1) of Rule 7]", f1));
                cell.setFixedHeight(fixedheight);
                cell.setBorder(Rectangle.NO_BORDER);
                table.addCell(cell);
                cell = new PdfPCell(new Phrase(":", f1));
                cell.setFixedHeight(fixedheight);
                cell.setBorder(Rectangle.NO_BORDER);
                table.addCell(cell);
                cell = new PdfPCell(new Phrase("", f1));
                cell.setFixedHeight(fixedheight);
                cell.setBorder(Rectangle.NO_BORDER);
                table.addCell(cell);

                cell = new PdfPCell(new Phrase("12.", f1));
                cell.setFixedHeight(fixedheight);
                cell.setBorder(Rectangle.NO_BORDER);
                table.addCell(cell);
                cell = new PdfPCell(new Phrase("Personal Pay, if any [Notes 1 and 3 of Sub Rule (1) of Rule 7]", f1));
                cell.setFixedHeight(fixedheight);
                cell.setBorder(Rectangle.NO_BORDER);
                table.addCell(cell);
                cell = new PdfPCell(new Phrase(":", f1));
                cell.setFixedHeight(fixedheight);
                cell.setBorder(Rectangle.NO_BORDER);
                table.addCell(cell);
                cell = new PdfPCell(new Phrase("", f1));
                cell.setFixedHeight(fixedheight);
                cell.setBorder(Rectangle.NO_BORDER);
                table.addCell(cell);

                cell = new PdfPCell(new Phrase("13.", f1));
                cell.setFixedHeight(fixedheight);
                cell.setBorder(Rectangle.NO_BORDER);
                table.addCell(cell);
                cell = new PdfPCell(new Phrase("Revised emoulments after fixation", f1));
                cell.setFixedHeight(fixedheight);
                cell.setBorder(Rectangle.NO_BORDER);
                table.addCell(cell);
                cell = new PdfPCell(new Phrase(":", f1));
                cell.setFixedHeight(fixedheight);
                cell.setBorder(Rectangle.NO_BORDER);
                table.addCell(cell);
                cell = new PdfPCell(new Phrase("", f1));
                cell.setFixedHeight(fixedheight);
                cell.setBorder(Rectangle.NO_BORDER);
                table.addCell(cell);

                cell = new PdfPCell();
                cell.setFixedHeight(fixedheight);
                cell.setBorder(Rectangle.NO_BORDER);
                table.addCell(cell);
                innertable = new PdfPTable(2);
                innertable.setWidths(new float[]{0.05f, 0.5f});
                innertable.setWidthPercentage(100);

                innercell = new PdfPCell(new Phrase("(a)", f1));
                innercell.setBorder(Rectangle.NO_BORDER);
                innertable.addCell(innercell);
                innercell = new PdfPCell(new Phrase("Pay in the Revised Pay Band/Pay Scale", f1));
                innercell.setBorder(Rectangle.NO_BORDER);
                innertable.addCell(innercell);
                cell = new PdfPCell(innertable);
                cell.setFixedHeight(fixedheight);
                cell.setBorder(Rectangle.NO_BORDER);
                table.addCell(cell);
                cell = new PdfPCell(new Phrase(":", f1));
                cell.setFixedHeight(fixedheight);
                cell.setBorder(Rectangle.NO_BORDER);
                table.addCell(cell);
                cell = new PdfPCell(new Phrase(rs.getString("revised_basic"), f1));
                cell.setFixedHeight(fixedheight);
                cell.setBorder(Rectangle.NO_BORDER);
                table.addCell(cell);

                cell = new PdfPCell();
                cell.setFixedHeight(fixedheight);
                cell.setBorder(Rectangle.NO_BORDER);
                table.addCell(cell);
                innertable = new PdfPTable(2);
                innertable.setWidths(new float[]{0.05f, 0.5f});
                innertable.setWidthPercentage(100);

                innercell = new PdfPCell(new Phrase("(c)", f1));
                innercell.setBorder(Rectangle.NO_BORDER);
                innertable.addCell(innercell);
                innercell = new PdfPCell(new Phrase("Personal Pay, if admissible", f1));
                innercell.setBorder(Rectangle.NO_BORDER);
                innertable.addCell(innercell);
                cell = new PdfPCell(innertable);
                cell.setFixedHeight(fixedheight);
                cell.setBorder(Rectangle.NO_BORDER);
                table.addCell(cell);
                cell = new PdfPCell(new Phrase(":", f1));
                cell.setFixedHeight(fixedheight);
                cell.setBorder(Rectangle.NO_BORDER);
                table.addCell(cell);
                cell = new PdfPCell(new Phrase("", f1));
                cell.setFixedHeight(fixedheight);
                cell.setBorder(Rectangle.NO_BORDER);
                table.addCell(cell);

                /*java.util.Date utilDate = new java.util.Date("1-JAN-2016");
                 java.sql.Date sqlDate = new java.sql.Date(utilDate.getTime());
                 ArrayList revisedList = getNoOfIncrement(con, rs.getString("EMP_ID"), sqlDate, rs.getInt("revised_basic"), totalgp, rs.getString("existing_pay_scale"));*/
                // Start Revised Table
                ArrayList revisedList = getNoOfIncrement(con, rs.getString("EMP_ID"));
                ThirdScheduleBean tbean = null;
                if (revisedList.size() > 0) {
                    tbean = (ThirdScheduleBean) revisedList.get(0);
                    incrDt = tbean.getIncrDt();
                    revisedBasic = tbean.getRevisedbasic();
                }

                cell = new PdfPCell(new Phrase("14.", f1));
                cell.setFixedHeight(fixedheight);
                cell.setBorder(Rectangle.NO_BORDER);
                table.addCell(cell);
                cell = new PdfPCell(new Phrase("Date of next increment (Rules 10) and pay after grant of increment", f1));
                cell.setFixedHeight(fixedheight);
                cell.setBorder(Rectangle.NO_BORDER);
                table.addCell(cell);
                cell = new PdfPCell(new Phrase(":", f1));
                cell.setFixedHeight(fixedheight);
                cell.setBorder(Rectangle.NO_BORDER);
                table.addCell(cell);
                cell = new PdfPCell(new Phrase(CommonFunctions.getFormattedOutputDate1(incrDt) + "\n" + revisedBasic, f1));
                cell.setFixedHeight(fixedheight);
                cell.setBorder(Rectangle.NO_BORDER);
                table.addCell(cell);

                cell = new PdfPCell();
                cell.setFixedHeight(fixedheight);
                cell.setBorder(Rectangle.NO_BORDER);
                table.addCell(cell);
                cell = new PdfPCell(new Phrase("Date of Increment", f1));
                cell.setFixedHeight(fixedheight);
                cell.setBorder(Rectangle.NO_BORDER);
                table.addCell(cell);
                cell = new PdfPCell(new Phrase(":", f1));
                cell.setFixedHeight(fixedheight);
                cell.setBorder(Rectangle.NO_BORDER);
                table.addCell(cell);
                cell = new PdfPCell(new Phrase(CommonFunctions.getFormattedOutputDate1(incrDt), f1));
                cell.setFixedHeight(fixedheight);
                cell.setBorder(Rectangle.NO_BORDER);
                table.addCell(cell);

                document.add(table);

                table = new PdfPTable(3);
                table.setWidths(new float[]{1, 1.5f, 0.5f});
                table.setWidthPercentage(100);

                cell = new PdfPCell();
                cell.setBorder(Rectangle.NO_BORDER);
                table.addCell(cell);
                cell = new PdfPCell(new Phrase("Pay after Increment", getDesired_PDF_Font(13, false, true)));
                cell.setBorder(Rectangle.NO_BORDER);
                cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                table.addCell(cell);
                cell = new PdfPCell();
                cell.setBorder(Rectangle.NO_BORDER);
                table.addCell(cell);

                document.add(table);

                table = new PdfPTable(3);
                table.setWidths(new int[]{1, 2, 2});
                table.setWidthPercentage(80);

                cell = new PdfPCell();
                cell.setColspan(3);
                cell.setFixedHeight(20);
                cell.setBorder(Rectangle.NO_BORDER);
                table.addCell(cell);

                cell = new PdfPCell();
                cell.setFixedHeight(20);
                cell.setBorder(Rectangle.NO_BORDER);
                table.addCell(cell);
                cell = new PdfPCell(new Phrase("Date of Increment/Promotion", f1));
                cell.setFixedHeight(20);
                //cell.setBorder(Rectangle.NO_BORDER);
                cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                table.addCell(cell);
                cell = new PdfPCell(new Phrase("Pay in the Pay Band/Scale", f1));
                cell.setFixedHeight(20);
                //cell.setBorder(Rectangle.NO_BORDER);
                cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                table.addCell(cell);

                document.add(table);

                table = new PdfPTable(3);
                table.setWidths(new int[]{1, 2, 2});
                table.setWidthPercentage(80);
                tbean = null;
                for (int i = 0; i < revisedList.size(); i++) {
                    tbean = (ThirdScheduleBean) revisedList.get(i);

                    cell = new PdfPCell();
                    cell.setFixedHeight(20);
                    cell.setBorder(Rectangle.NO_BORDER);
                    table.addCell(cell);
                    cell = new PdfPCell(new Phrase(CommonFunctions.getFormattedOutputDate1(tbean.getIncrDt()), f1));
                    cell.setFixedHeight(20);
                    //cell.setBorder(Rectangle.NO_BORDER);
                    cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                    table.addCell(cell);
                    cell = new PdfPCell(new Phrase(tbean.getRevisedbasic() + "", f1));
                    cell.setFixedHeight(20);
                    //cell.setBorder(Rectangle.NO_BORDER);
                    cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                    table.addCell(cell);
                }
                document.add(table);
                // End Revised Table

                table = new PdfPTable(4);
                table.setWidths(new float[]{0.3f, 3, 0.5f, 3});
                table.setWidthPercentage(80);

                cell = new PdfPCell();
                cell.setColspan(4);
                cell.setFixedHeight(20);
                cell.setBorder(Rectangle.NO_BORDER);
                table.addCell(cell);

                cell = new PdfPCell(new Phrase("15", f1));
                cell.setFixedHeight(fixedheight);
                cell.setBorder(Rectangle.NO_BORDER);
                table.addCell(cell);
                cell = new PdfPCell(new Phrase("Any other relevant information", f1));
                cell.setFixedHeight(fixedheight);
                cell.setBorder(Rectangle.NO_BORDER);
                table.addCell(cell);
                cell = new PdfPCell(new Phrase(":", f1));
                cell.setFixedHeight(fixedheight);
                cell.setBorder(Rectangle.NO_BORDER);
                table.addCell(cell);
                cell = new PdfPCell(new Phrase("", f1));
                cell.setFixedHeight(fixedheight);
                cell.setBorder(Rectangle.NO_BORDER);
                table.addCell(cell);

                cell = new PdfPCell();
                cell.setFixedHeight(fixedheight);
                cell.setBorder(Rectangle.NO_BORDER);
                table.addCell(cell);
                cell = new PdfPCell(new Phrase("  Date", f1));
                cell.setFixedHeight(fixedheight);
                cell.setBorder(Rectangle.NO_BORDER);
                table.addCell(cell);
                cell = new PdfPCell(new Phrase("", f1));
                cell.setFixedHeight(fixedheight);
                cell.setBorder(Rectangle.NO_BORDER);
                table.addCell(cell);
                cell = new PdfPCell(new Phrase("Signature & Designation of Head  of Office/Competent Authority", f1));
                cell.setFixedHeight(fixedheight);
                cell.setBorder(Rectangle.NO_BORDER);
                table.addCell(cell);

                cell = new PdfPCell();
                cell.setFixedHeight(fixedheight);
                cell.setBorder(Rectangle.NO_BORDER);
                table.addCell(cell);
                cell = new PdfPCell(new Phrase("  Office:G.A.Department", f1));
                cell.setBorder(Rectangle.NO_BORDER);
                table.addCell(cell);
                cell = new PdfPCell();
                cell.setBorder(Rectangle.NO_BORDER);
                table.addCell(cell);
                cell = new PdfPCell(new Phrase("", f1));
                cell.setBorder(Rectangle.NO_BORDER);
                table.addCell(cell);
            }
            document.add(table);
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            DataBaseFunctions.closeSqlObjects(rs, pst);
            DataBaseFunctions.closeSqlObjects(con);
        }
    }

    private Font getDesired_PDF_Font(int fontsize, boolean isBold, boolean isUnderline) throws Exception {
        Font f = null;

        try {
            if (isBold == false && isUnderline == false) {
                f = new Font(Font.FontFamily.TIMES_ROMAN, fontsize, Font.NORMAL);
            }
            if (isBold == true && isUnderline == false) {
                f = new Font(Font.FontFamily.TIMES_ROMAN, fontsize, Font.BOLD);
            }
            if (isBold == true && isUnderline == true) {
                f = new Font(Font.FontFamily.TIMES_ROMAN, fontsize, Font.BOLD | Font.UNDERLINE);
            }
            if (isBold == false && isUnderline == true) {
                f = new Font(Font.FontFamily.TIMES_ROMAN, fontsize, Font.UNDERLINE);
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {

        }
        return f;
    }

    private ArrayList getNoOfIncrement(Connection con, String empId) {

        PreparedStatement pst = null;
        ResultSet rs = null;

        ThirdScheduleBean tbean = null;
        ArrayList revisedPayList = new ArrayList();
        try {
            pst = con.prepareStatement("SELECT INCR_DATE,REVISED_BASIC FROM emp_pay_revised_increment_2016 WHERE EMP_ID=? ORDER BY INCR_DATE ASC");
            pst.setString(1, empId);
            rs = pst.executeQuery();
            while (rs.next()) {
                tbean = new ThirdScheduleBean();
                tbean.setIncrDt(rs.getDate("INCR_DATE"));
                tbean.setRevisedbasic(rs.getInt("REVISED_BASIC"));
                revisedPayList.add(tbean);
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            DataBaseFunctions.closeSqlObjects(rs, pst);
        }
        return revisedPayList;
    }

    @Override
    public SecondScheduleBean getSecondScheduleData(String empid) {

        Connection con = null;

        PreparedStatement pst = null;
        ResultSet rs = null;

        SecondScheduleBean secondSchlBean = new SecondScheduleBean();
        try {
            con = this.dataSource.getConnection();

            /*String sql = "SELECT ARRAY_TO_STRING(ARRAY[INITIALS, F_NAME, M_NAME,L_NAME], ' ') FULL_NAME,G_POST.POST,EMP_PAY_REVISED_2016.GP,EXISTING_PAY_SCALE FROM EMP_MAST"
             + " LEFT OUTER JOIN EMP_PAY_REVISED_2016 ON EMP_MAST.EMP_ID=EMP_PAY_REVISED_2016.EMP_ID"
             + " LEFT OUTER JOIN G_POST ON EMP_PAY_REVISED_2016.POST=G_POST.POST_CODE"
             + " WHERE EMP_MAST.EMP_ID=? AND AQ_YEAR=2016 AND AQ_MONTH=0";*/
            String sql = "SELECT ARRAY_TO_STRING(ARRAY[INITIALS, F_NAME, M_NAME,L_NAME], ' ') FULL_NAME,G_POST.POST,EMP_PAY_REVISED_2016.GP,EMP_PAY_REVISED_2016.EXISTING_PAY_SCALE FROM EMP_MAST"
                    + " LEFT OUTER JOIN (SELECT EMP_ID,GP,EXISTING_PAY_SCALE,POST FROM EMP_PAY_REVISED_2016 WHERE AQ_YEAR=2016 AND AQ_MONTH=0)EMP_PAY_REVISED_2016 ON EMP_MAST.EMP_ID=EMP_PAY_REVISED_2016.EMP_ID"
                    + " LEFT OUTER JOIN G_POST ON EMP_PAY_REVISED_2016.POST=G_POST.POST_CODE"
                    + " WHERE EMP_MAST.EMP_ID=?";
            pst = con.prepareStatement(sql);
            pst.setString(1, empid);
            rs = pst.executeQuery();
            if (rs.next()) {
                secondSchlBean.setEmpid(empid);
                secondSchlBean.setEmpname(rs.getString("FULL_NAME"));
                secondSchlBean.setPost(rs.getString("POST"));
                secondSchlBean.setGp(rs.getString("GP"));
                secondSchlBean.setPayscale(rs.getString("EXISTING_PAY_SCALE"));
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            DataBaseFunctions.closeSqlObjects(con);
        }
        return secondSchlBean;
    }

    @Override
    public void secondSchedulePDF(Document document, String empid) {

        Connection con = null;

        int fixedheight = 50;

        SecondScheduleBean secondSchlBean = new SecondScheduleBean();
        try {

            secondSchlBean = getPayRevisionOptionData(empid);

            Font f1 = new Font();
            f1.setSize(10);
            f1.setFamily("Times New Roman");

            PdfPTable table = null;
            PdfPCell cell = null;

            table = new PdfPTable(2);
            table.setWidths(new float[]{0.3f, 3});
            table.setWidthPercentage(80);

            cell = new PdfPCell(new Phrase("SECOND SCHEDULE", getDesired_PDF_Font(13, true, true)));
            cell.setColspan(2);
            cell.setFixedHeight(fixedheight);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("Application Form for exercising option to come over to the", getDesired_PDF_Font(13, true, false)));
            cell.setColspan(2);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("Odisha Revised Scales of Pay Rules,2017", getDesired_PDF_Font(13, true, false)));
            cell.setColspan(2);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("(See rule-6)", getDesired_PDF_Font(12, false, false)));
            cell.setColspan(2);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell();
            cell.setColspan(2);
            cell.setFixedHeight(30);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            if (secondSchlBean.getOptionChosen().equals("1")) {

                Chunk c1 = new Chunk("I ", getDesired_PDF_Font(10, false, false));
                Chunk c2 = new Chunk(secondSchlBean.getEmpname(), getDesired_PDF_Font(10, true, false));
                Chunk c3 = new Chunk(" holding the post of ", getDesired_PDF_Font(10, false, false));
                Chunk c4 = new Chunk(StringUtils.defaultString(secondSchlBean.getPost()), getDesired_PDF_Font(10, true, false));
                Chunk c5 = new Chunk(" and drawing pay in the Pay Band and Grade Pay of ", getDesired_PDF_Font(10, false, false));
                Chunk c6 = new Chunk(StringUtils.defaultString(secondSchlBean.getPayscale()) + "(" + StringUtils.defaultString(secondSchlBean.getGp() + "") + ")", getDesired_PDF_Font(10, true, false));
                Chunk c7 = new Chunk(" do hereby elect the revised pay structure with effect from 1st day of January,2016 ", getDesired_PDF_Font(10, false, false));
                Phrase p1 = new Phrase();
                p1.add(c1);
                p1.add(c2);
                p1.add(c3);
                p1.add(c4);
                p1.add(c5);
                p1.add(c6);
                p1.add(c7);

                cell = new PdfPCell(new Phrase("1.", f1));
                cell.setFixedHeight(fixedheight);
                cell.setBorder(Rectangle.NO_BORDER);
                table.addCell(cell);
                //cell = new PdfPCell(new Phrase("I "+secondSchlBean.getEmpname()+" holding the post of "+secondSchlBean.getPost()+" and drawing pay in the Pay Band and Grade Pay of "+secondSchlBean.getPayscale()+"("+ secondSchlBean.getGp()+") do hereby elect the revised pay structure with effect from 1st day of January,2016",f1));
                cell = new PdfPCell(p1);
                cell.setFixedHeight(fixedheight);
                cell.setBorder(Rectangle.NO_BORDER);
                table.addCell(cell);
            } else if (secondSchlBean.getOptionChosen().equals("2")) {

                Chunk c1 = new Chunk("I ", getDesired_PDF_Font(10, false, false));
                Chunk c2 = new Chunk(secondSchlBean.getEmpname(), getDesired_PDF_Font(10, true, false));
                Chunk c3 = new Chunk(" holding the post of ", getDesired_PDF_Font(10, false, false));
                Chunk c4 = new Chunk(StringUtils.defaultString(secondSchlBean.getPost()), getDesired_PDF_Font(10, true, false));
                Chunk c5 = new Chunk(" and drawing pay in the Pay Band and Grade Pay of ", getDesired_PDF_Font(10, false, false));
                Chunk c6 = new Chunk(StringUtils.defaultString(secondSchlBean.getPayscale()) + "(" + StringUtils.defaultString(secondSchlBean.getGp() + "") + ")", getDesired_PDF_Font(10, true, false));
                Chunk c7 = new Chunk(" do hereby elect to continue on the existing Pay Band and Grade Pay until the date ", getDesired_PDF_Font(10, false, false));
                Chunk c8 = new Chunk(StringUtils.defaultString(secondSchlBean.getEnteredDate()), getDesired_PDF_Font(10, true, false));
                Chunk c9 = new Chunk(" (i.e the date of my next increment/promotion or up-gradation of the post/vacate or cease to draw pay in the existing pay structure).", getDesired_PDF_Font(10, false, false));
                Phrase p1 = new Phrase();
                p1.add(c1);
                p1.add(c2);
                p1.add(c3);
                p1.add(c4);
                p1.add(c5);
                p1.add(c6);
                p1.add(c7);
                p1.add(c8);
                p1.add(c9);

                cell = new PdfPCell(new Phrase("1.", f1));
                cell.setFixedHeight(70);
                cell.setBorder(Rectangle.NO_BORDER);
                table.addCell(cell);
                //cell = new PdfPCell(new Phrase("I "+secondSchlBean.getEmpname()+" holding the post of "+secondSchlBean.getPost()+" and drawing pay in the Pay Band and Grade Pay of "+secondSchlBean.getPayscale()+"("+ secondSchlBean.getGp()+") do hereby elect to continue on the existing Pay Band and Grade Pay until the date "+txtDate+" (i.e the date of my next increment/promotion or up-gradation of the post/vacate or cease to draw pay in the existing pay structure).",f1));
                cell = new PdfPCell(p1);
                cell.setFixedHeight(70);
                cell.setBorder(Rectangle.NO_BORDER);
                table.addCell(cell);
            }

            cell = new PdfPCell();
            cell.setColspan(2);
            cell.setFixedHeight(20);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("2.", f1));
            cell.setFixedHeight(30);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);
            cell = new PdfPCell(new Phrase("The option hereby exercised is final and will not be modified at any subsequent date.", f1));
            cell.setFixedHeight(30);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell();
            cell.setColspan(2);
            cell.setFixedHeight(20);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("Date:", f1));
            cell.setColspan(2);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            document.add(table);

            table = new PdfPTable(2);
            table.setWidths(new float[]{2.5f, 2f});
            table.setWidthPercentage(80);

            cell = new PdfPCell();
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);
            cell = new PdfPCell(new Phrase(StringUtils.repeat("", 120) + "Signature:", f1));
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell();
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);
            cell = new PdfPCell(new Phrase(StringUtils.repeat("", 120) + "Designation:", f1));
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell();
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);
            cell = new PdfPCell(new Phrase(StringUtils.repeat("", 120) + "Office:", f1));
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell();
            cell.setColspan(2);
            cell.setFixedHeight(20);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell();
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);
            cell = new PdfPCell(new Phrase(StringUtils.repeat("", 120) + "Signed before me", f1));
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell();
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);
            cell = new PdfPCell(new Phrase(StringUtils.repeat("", 120) + "Head of Office/Any other Gazetted Officer with designated recieved the above declaration.", f1));
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell();
            cell.setColspan(2);
            cell.setFixedHeight(20);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell();
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);
            cell = new PdfPCell(new Phrase(StringUtils.repeat("", 120) + "Signature:", f1));
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell();
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);
            cell = new PdfPCell(new Phrase(StringUtils.repeat("", 120) + "Head of Office/Competent Authority:", f1));
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell();
            cell.setColspan(2);
            cell.setFixedHeight(20);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("Date:", f1));
            cell.setColspan(2);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("N.B: Delete whichever is not applicable at Para-1", f1));
            cell.setColspan(2);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            document.add(table);
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            DataBaseFunctions.closeSqlObjects(con);
        }
    }

    @Override
    public String isDuplicatePayRevisionOption(String empid) {

        Connection con = null;

        PreparedStatement pst = null;
        ResultSet rs = null;

        String exists = "N";

        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");

        String isIAS = "N";
        String isUGC = "N";
        try {
            Date payRevDt = sdf.parse("2016-01-01");

            con = this.dataSource.getConnection();

            /*String sql = "select doe_gov,pay_revision_option.emp_id,cur_cadre_code,cadre_type from emp_mast"
             + " left outer join pay_revision_option on emp_mast.emp_id=pay_revision_option.emp_id"
             + " left outer join g_cadre on emp_mast.cur_cadre_code=g_cadre.cadre_code where emp_mast.emp_id=?";*/
            String sql = "select doe_gov,pay_revision_option.emp_id,cur_cadre_code,other_eligibility cadre_type from emp_mast"
                    + " left outer join pay_revision_option on emp_mast.emp_id=pay_revision_option.emp_id where emp_mast.emp_id=?";
            pst = con.prepareStatement(sql);
            pst.setString(1, empid);
            rs = pst.executeQuery();
            if (rs.next()) {
                if (rs.getString("cur_cadre_code") != null && !rs.getString("cur_cadre_code").equals("")) {
                    if (rs.getString("cur_cadre_code").equals("1101") || rs.getString("cur_cadre_code").equals("9103")
                            || rs.getString("cur_cadre_code").equals("5801") || rs.getString("cur_cadre_code").equals("1165")
                            || rs.getString("cur_cadre_code").equals("1007") || rs.getString("cur_cadre_code").equals("9105")
                            || rs.getString("cur_cadre_code").equals("1166") || rs.getString("cur_cadre_code").equals("9106")) {
                        isIAS = "Y";
                        if (rs.getString("emp_id") != null && !rs.getString("emp_id").equals("")) {
                            exists = "IASE";
                        } else {
                            exists = "IAS";
                        }
                    }
                }
                if (rs.getString("cadre_type") != null && rs.getString("cadre_type").equals("UGC")) {
                    isUGC = "Y";
                    if (rs.getString("emp_id") != null && !rs.getString("emp_id").equals("")) {
                        exists = "UGCE";
                    } else {
                        exists = "UGC";
                    }
                }
                if (isIAS.equals("N") && isUGC.equals("N")) {
                    if (rs.getString("doe_gov") != null && !rs.getString("doe_gov").equals("")) {
                        Date doj = sdf.parse(rs.getString("doe_gov"));

                        if (doj.compareTo(payRevDt) > 0) {
                            exists = "NE";
                        } else {
                            if (rs.getString("emp_id") != null && !rs.getString("emp_id").equals("")) {
                                exists = "Y";
                            }
                        }
                    }
                }
                //exists = true;
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            DataBaseFunctions.closeSqlObjects(con);
        }
        return exists;
    }

    private SecondScheduleBean getPayRevisionOptionData(String empid) {

        Connection con = null;

        PreparedStatement pst = null;
        ResultSet rs = null;

        SecondScheduleBean secondSchlBean = new SecondScheduleBean();
        try {
            con = this.dataSource.getConnection();

            String sql = "SELECT ARRAY_TO_STRING(ARRAY[INITIALS, F_NAME, M_NAME,L_NAME], ' ') FULL_NAME,G_POST.POST,pay_revision_option.GP,PAY_SCALE,option_chosen,entered_date FROM EMP_MAST"
                    + " LEFT OUTER JOIN pay_revision_option ON EMP_MAST.EMP_ID=pay_revision_option.EMP_ID"
                    + " LEFT OUTER JOIN G_POST ON pay_revision_option.GPC=G_POST.POST_CODE"
                    + " WHERE EMP_MAST.EMP_ID=?";
            pst = con.prepareStatement(sql);
            pst.setString(1, empid);
            rs = pst.executeQuery();
            if (rs.next()) {
                secondSchlBean.setEmpid(empid);
                secondSchlBean.setEmpname(rs.getString("FULL_NAME"));
                secondSchlBean.setPost(rs.getString("POST"));
                secondSchlBean.setGp(rs.getString("GP"));
                secondSchlBean.setPayscale(rs.getString("PAY_SCALE"));
                secondSchlBean.setOptionChosen(rs.getString("option_chosen"));
                secondSchlBean.setEnteredDate(CommonFunctions.getFormattedOutputDate1(rs.getDate("entered_date")));
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            DataBaseFunctions.closeSqlObjects(con);
        }
        return secondSchlBean;
    }

    @Override
    public void insertPayRevisionData(String empid, String offcode, String selectedOption, String postcode, String payscale, int gp, String txtDate, String hasUserChanged, String hasDDOChanged) {

        Connection con = null;

        PreparedStatement pst = null;
        ResultSet rs = null;

        SecondScheduleBean secondSchlBean = new SecondScheduleBean();

        String startTime = "";
        try {
            Calendar cal = Calendar.getInstance();
            DateFormat dateFormat1 = new SimpleDateFormat("dd-MMM-yyyy hh:mm:ss");
            startTime = dateFormat1.format(cal.getTime());

            DateFormat dateFormat2 = new SimpleDateFormat("dd-MMM-yyyy");

            con = this.dataSource.getConnection();

            String sql = "SELECT ARRAY_TO_STRING(ARRAY[INITIALS, F_NAME, M_NAME,L_NAME], ' ') FULL_NAME,POST,EMP_PAY_REVISED_2016.GP,EMP_PAY_REVISED_2016.EXISTING_PAY_SCALE FROM EMP_MAST"
                    + " LEFT OUTER JOIN EMP_PAY_REVISED_2016 ON EMP_MAST.EMP_ID=EMP_PAY_REVISED_2016.EMP_ID"
                    + " WHERE EMP_MAST.EMP_ID=?";
            pst = con.prepareStatement(sql);
            pst.setString(1, empid);
            rs = pst.executeQuery();
            if (rs.next()) {
                secondSchlBean.setEmpid(empid);
                secondSchlBean.setEmpname(rs.getString("FULL_NAME"));
                if (rs.getString("POST") != null && !rs.getString("POST").equals("")) {
                    secondSchlBean.setPostcode(rs.getString("POST"));
                }
                //secondSchlBean.setPostcode(rs.getString("POST_CODE"));
                secondSchlBean.setSpc(getSPCFromGPC(con, rs.getString("POST")));
                secondSchlBean.setGp(rs.getString("GP"));
                secondSchlBean.setPayscale(rs.getString("EXISTING_PAY_SCALE"));
            }

            if (secondSchlBean.getPayscale() != null && !secondSchlBean.getPayscale().equals("")) {
                if (!secondSchlBean.getPayscale().equals(payscale)) {
                    hasUserChanged = "Y";
                }
            } else if (secondSchlBean.getPayscale() == null || secondSchlBean.getPayscale().equals("")) {
                hasUserChanged = "Y";
            }

            if (secondSchlBean.getGp() != null && !secondSchlBean.getGp().equals("")) {
                if (!secondSchlBean.getGp().equals(gp + "")) {
                    hasUserChanged = "Y";
                }
            } else if (secondSchlBean.getGp() == null || secondSchlBean.getGp().equals("")) {
                hasUserChanged = "Y";
            }

            if (postcode != null && !postcode.equals("")) {
                secondSchlBean.setSpc("");
            } else if (postcode == null || postcode.equals("")) {
                postcode = secondSchlBean.getPostcode();
            }

            sql = "INSERT INTO pay_revision_option(emp_id,date_of_submission,option_chosen,pay_scale,GP,entered_date,off_code,spc,gpc,has_employee_changed,has_ddo_changed) VALUES(?,?,?,?,?,?,?,?,?,?,?)";
            pst = con.prepareStatement(sql);
            pst.setString(1, empid);
            pst.setTimestamp(2, new Timestamp(dateFormat1.parse(startTime).getTime()));
            pst.setString(3, selectedOption);
            pst.setString(4, payscale);
            pst.setInt(5, gp);
            if (txtDate != null && !txtDate.equals("")) {
                pst.setTimestamp(6, new Timestamp(dateFormat2.parse(txtDate).getTime()));
            } else {
                pst.setTimestamp(6, null);
            }
            pst.setString(7, offcode);
            pst.setString(8, secondSchlBean.getSpc());
            pst.setString(9, postcode);
            pst.setString(10, hasUserChanged);
            pst.setString(11, hasDDOChanged);
            int retVal = pst.executeUpdate();
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            DataBaseFunctions.closeSqlObjects(con);
        }
    }

    private String getSPCFromGPC(Connection con, String gpc) {

        PreparedStatement pst = null;
        ResultSet rs = null;

        String spc = "";

        try {
            String sql = "SELECT SPC FROM G_SPC WHERE GPC=?";

            pst = con.prepareStatement(sql);
            pst.setString(1, gpc);
            rs = pst.executeQuery();
            if (rs.next()) {
                spc = rs.getString("SPC");
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            DataBaseFunctions.closeSqlObjects(rs, pst);
        }
        return spc;
    }

    @Override
    public void secondScheduleIASPDF(Document document, String empid) {

        Connection con = null;

        int fixedheight = 50;

        SecondScheduleBean secondSchlBean = new SecondScheduleBean();
        try {

            secondSchlBean = getPayRevisionOptionData(empid);

            Font f1 = new Font();
            f1.setSize(10);
            f1.setFamily("Times New Roman");

            PdfPTable table = null;
            PdfPCell cell = null;

            table = new PdfPTable(2);
            table.setWidths(new float[]{0.3f, 3});
            table.setWidthPercentage(80);

            cell = new PdfPCell(new Phrase("FORM OF OPTION", getDesired_PDF_Font(13, true, true)));
            cell.setColspan(2);
            cell.setFixedHeight(fixedheight);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("[See Rule 6]", getDesired_PDF_Font(13, true, false)));
            cell.setColspan(2);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell();
            cell.setColspan(2);
            cell.setFixedHeight(30);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            if (secondSchlBean.getOptionChosen().equals("1")) {

                Chunk c1 = new Chunk("I ", getDesired_PDF_Font(10, false, false));
                Chunk c2 = new Chunk(secondSchlBean.getEmpname(), getDesired_PDF_Font(10, true, false));
                Chunk c3 = new Chunk(" hereby elect the revised pay structure with effect from 1st January,2016. ", getDesired_PDF_Font(10, false, false));

                Phrase p1 = new Phrase();
                p1.add(c1);
                p1.add(c2);
                p1.add(c3);

                cell = new PdfPCell(new Phrase("1.", f1));
                cell.setFixedHeight(fixedheight);
                cell.setBorder(Rectangle.NO_BORDER);
                table.addCell(cell);
                cell = new PdfPCell(p1);
                cell.setFixedHeight(fixedheight);
                cell.setBorder(Rectangle.NO_BORDER);
                table.addCell(cell);
            } else if (secondSchlBean.getOptionChosen().equals("2")) {

                Chunk c1 = new Chunk("I ", getDesired_PDF_Font(10, false, false));
                Chunk c2 = new Chunk(secondSchlBean.getEmpname(), getDesired_PDF_Font(10, true, false));
                Chunk c3 = new Chunk(" hereby elect to continue on Pay Band and Grade Pay on my substantive/officiating post mentioned below unit. ", getDesired_PDF_Font(10, false, false));

                Phrase p1 = new Phrase();
                p1.add(c1);
                p1.add(c2);
                p1.add(c3);

                cell = new PdfPCell(new Phrase("1.", f1));
                cell.setFixedHeight(30);
                cell.setBorder(Rectangle.NO_BORDER);
                table.addCell(cell);
                cell = new PdfPCell(p1);
                cell.setFixedHeight(30);
                cell.setBorder(Rectangle.NO_BORDER);
                table.addCell(cell);

                c1 = new Chunk("The date of my next increment/the date of my subsequent increment raising my pay to promotion/up gradation to the post of ", getDesired_PDF_Font(10, false, false));
                c2 = new Chunk(StringUtils.defaultString(secondSchlBean.getPost()), getDesired_PDF_Font(10, true, false));

                p1 = new Phrase();
                p1.add(c1);
                p1.add(c2);

                cell = new PdfPCell(new Phrase("."));
                cell.setFixedHeight(30);
                cell.setBorder(Rectangle.NO_BORDER);
                cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
                table.addCell(cell);
                cell = new PdfPCell(p1);
                cell.setFixedHeight(30);
                cell.setBorder(Rectangle.NO_BORDER);
                table.addCell(cell);

                c1 = new Chunk(" Existing Pay Band and Grade Pay ", getDesired_PDF_Font(10, false, false));
                c2 = new Chunk(StringUtils.defaultString(secondSchlBean.getPayscale()) + "(" + StringUtils.defaultString(secondSchlBean.getGp() + "") + ")", getDesired_PDF_Font(10, true, false));

                p1 = new Phrase();
                p1.add(c1);
                p1.add(c2);

                cell = new PdfPCell();
                cell.setFixedHeight(30);
                cell.setBorder(Rectangle.NO_BORDER);
                table.addCell(cell);
                cell = new PdfPCell(p1);
                cell.setFixedHeight(30);
                cell.setBorder(Rectangle.NO_BORDER);
                table.addCell(cell);
            }

            cell = new PdfPCell();
            cell.setColspan(2);
            cell.setFixedHeight(20);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase(StringUtils.repeat(" ", 60) + "Signature", f1));
            cell.setColspan(2);
            cell.setFixedHeight(30);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase(StringUtils.repeat(" ", 60) + "Name", f1));
            cell.setColspan(2);
            cell.setFixedHeight(30);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase(StringUtils.repeat(" ", 60) + "Designation", f1));
            cell.setColspan(2);
            cell.setFixedHeight(30);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase(StringUtils.repeat(" ", 60) + "Office in which employed", f1));
            cell.setColspan(2);
            cell.setFixedHeight(30);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell();
            cell.setColspan(2);
            cell.setFixedHeight(30);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell();
            cell.setColspan(2);
            cell.setFixedHeight(30);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("UNDERTAKING", getDesired_PDF_Font(10, true, false)));
            cell.setColspan(2);
            cell.setFixedHeight(30);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("I hereby undertake that in the event of my pay havng been fixed in a manner contrary to the provisions contained in these Rules, as detect subsequently, any excess payment so made shall be refunded by me to the Government either by adjustment againest futire payments due to me or otherwise.", f1));
            cell.setColspan(2);
            cell.setFixedHeight(60);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell();
            cell.setColspan(2);
            cell.setFixedHeight(30);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase(StringUtils.repeat(" ", 60) + "Signature", f1));
            cell.setColspan(2);
            cell.setFixedHeight(30);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase(StringUtils.repeat(" ", 60) + "Name", f1));
            cell.setColspan(2);
            cell.setFixedHeight(30);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase(StringUtils.repeat(" ", 60) + "Designation", f1));
            cell.setColspan(2);
            cell.setFixedHeight(30);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell();
            cell.setColspan(2);
            cell.setFixedHeight(30);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("Date:", f1));
            cell.setColspan(2);
            cell.setFixedHeight(30);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("Place:", f1));
            cell.setColspan(2);
            cell.setFixedHeight(30);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            document.add(table);
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            DataBaseFunctions.closeSqlObjects(con);
        }
    }

    private ArrayList getEmpGpfDetails(String gpfType, String billNo, Connection con, ScheduleHelper scHelperBean) throws Exception {

        ArrayList empGpfList = new ArrayList();

        PreparedStatement pst = null;
        ResultSet rs = null;

        PreparedStatement pstmonthlySub = null;
        ResultSet rsmonthlySub = null;

        PreparedStatement pstgpfinst = null;
        ResultSet rsgpfinst = null;

        PreparedStatement pstotherdeposits = null;
        ResultSet rsotherdeposits = null;

        int slno = 0;
        GPFScheduleBean gpfBean = null;

        String noofinst = "";
        int releasedAmount = 0;
        int total = 0;
        String dob = null;
        String dob1 = null;
        String dob2 = null;
        String dob3 = null;
        String dob4 = null;
        String dos = null;
        String dos1 = null;
        String dos2 = null;
        String dos3 = null;
        String dos4 = null;
        String doe = null;
        String doe1 = null;
        String doe2 = null;
        String doe3 = null;
        String doe4 = null;
        int gpfinstl = 0;
        String aqDtlsTbl = "";

        //int pageno = scHelperBean.getPageno();
        try {
            aqDtlsTbl = getAqDtlsTableName(billNo);

            String monthlySubQuery = "SELECT AD_AMT MONTHLYSUB FROM " + aqDtlsTbl + " WHERE AD_TYPE='D' AND EMP_CODE=? AND"
                    + " DED_TYPE='S' AND SCHEDULE='GPF' AND AQSL_NO=? AND AQ_YEAR=? AND AQ_MONTH=? order by ad_amt desc";
            pstmonthlySub = con.prepareStatement(monthlySubQuery);

            String gpfinstQuery = "SELECT AD_AMT TOWARDSLOAN FROM " + aqDtlsTbl + " WHERE AD_TYPE='D' AND EMP_CODE=?"
                    + " AND DED_TYPE='L' AND SCHEDULE='GA' AND AQSL_NO=? AND AQ_YEAR=? AND AQ_MONTH=?";
            pstgpfinst = con.prepareStatement(gpfinstQuery);

            String otherdepositsQuery = "SELECT SUM(AD_AMT) TOWARDSOTHER FROM " + aqDtlsTbl + " WHERE AD_TYPE='D' AND EMP_CODE=?"
                    + " AND (AD_CODE='GPDD' OR AD_CODE='GPIR') AND AQSL_NO=? AND AQ_YEAR=? AND AQ_MONTH=?";
            pstotherdeposits = con.prepareStatement(otherdepositsQuery);

            String gpfQuery = "SELECT EMP_MAST.GPF_NO,EMP_MAST.DOE_GOV,EMP_MAST.DOB,EMP_MAST.DOS,AQ_MAST.EMP_CODE,AQ_MAST.EMP_NAME,AQ_MAST.CUR_DESG,"
                    + " AQ_MAST.BANK_ACC_NO,AQ_MAST.CUR_BASIC,GP,AQ_MAST.PAY_SCALE,AQ_MAST.AQSL_NO,POST_SL_NO,AQ_YEAR,AQ_MONTH from AQ_MAST"
                    + " LEFT OUTER JOIN EMP_MAST ON AQ_MAST.EMP_CODE=EMP_MAST.EMP_ID WHERE GPF_TYPE=? AND BILL_NO=? ORDER BY SUBSTR(EMP_MAST.GPF_NO,"
                    + " LENGTH(getgpfseries(EMP_MAST.GPF_NO))+1)";
            pst = con.prepareStatement(gpfQuery);
            pst.setString(1, gpfType);
            pst.setInt(2, Integer.parseInt(billNo));
            rs = pst.executeQuery();
            while (rs.next()) {
                releasedAmount = 0;
                gpfinstl = 0;
                gpfBean = new GPFScheduleBean();
                if (rs.getString("EMP_NAME") != null && !rs.getString("EMP_NAME").equals("")) {
                    slno++;

                    gpfBean.setSlno(slno);
                    gpfBean.setEmpName(rs.getString("EMP_NAME"));
                    gpfBean.setDesignation(rs.getString("CUR_DESG"));
                    gpfBean.setAccountNo(rs.getString("GPF_NO"));
                    gpfBean.setBasicPay(rs.getString("CUR_BASIC"));
                    gpfBean.setGradePay(rs.getString("GP"));
                    gpfBean.setScaleOfPay(rs.getString("PAY_SCALE"));
                    noofinst = CommonScheduleMethods.getNoOfInst(rs.getString("AQSL_NO"), rs.getInt("AQ_YEAR"), rs.getInt("AQ_MONTH"), aqDtlsTbl, con, "GA");
                    gpfBean.setNoOfInstalment(noofinst);

                    if (rs.getString("DOE_GOV") != null && !rs.getString("DOE_GOV").trim().equals("")) {
                        doe = rs.getString("DOE_GOV");
                        doe1 = doe.substring(0, 4);
                        doe2 = doe.substring(5, 7);
                        doe3 = doe.substring(8, 10);
                        doe4 = doe3 + "/" + doe2 + "/" + doe1;
                        gpfBean.setDateOfEntry(doe4);
                    }
                    if (rs.getString("DOB") != null && !rs.getString("DOB").trim().equals("")) {
                        dob = rs.getString("DOB");
                        dob1 = dob.substring(0, 4);
                        dob2 = dob.substring(5, 7);
                        dob3 = dob.substring(8, 10);
                        dob4 = dob3 + "/" + dob2 + "/" + dob1;
                        gpfBean.setDob(dob4);
                    }
                    if (rs.getString("DOS") != null && !rs.getString("DOS").trim().equals("")) {
                        dos = rs.getString("DOS");
                        dos1 = dos.substring(0, 4);
                        dos2 = dos.substring(5, 7);
                        dos3 = dos.substring(8, 10);
                        dos4 = dos3 + "/" + dos2 + "/" + dos1;
                        gpfBean.setDor(dos4);
                    }

                    pstmonthlySub.setString(1, rs.getString("EMP_CODE"));
                    pstmonthlySub.setString(2, rs.getString("AQSL_NO"));
                    pstmonthlySub.setInt(3, rs.getInt("AQ_YEAR"));
                    pstmonthlySub.setInt(4, rs.getInt("AQ_MONTH"));
                    rsmonthlySub = pstmonthlySub.executeQuery();
                    if (rsmonthlySub.next()) {
                        gpfBean.setMonthlySub(rsmonthlySub.getInt("MONTHLYSUB"));
                    }

                    pstgpfinst.setString(1, rs.getString("EMP_CODE"));
                    pstgpfinst.setString(2, rs.getString("AQSL_NO"));
                    pstgpfinst.setInt(3, rs.getInt("AQ_YEAR"));
                    pstgpfinst.setInt(4, rs.getInt("AQ_MONTH"));
                    rsgpfinst = pstgpfinst.executeQuery();
                    while (rsgpfinst.next()) {
                        gpfinstl = gpfinstl + rsgpfinst.getInt("TOWARDSLOAN");
                    }
                    gpfBean.setTowardsLoan(gpfinstl);

                    pstotherdeposits.setString(1, rs.getString("EMP_CODE"));
                    pstotherdeposits.setString(2, rs.getString("AQSL_NO"));
                    pstotherdeposits.setInt(3, rs.getInt("AQ_YEAR"));
                    pstotherdeposits.setInt(4, rs.getInt("AQ_MONTH"));
                    rsotherdeposits = pstotherdeposits.executeQuery();
                    if (rsotherdeposits.next()) {
                        gpfBean.setOtherDeposits(rsotherdeposits.getInt("TOWARDSOTHER"));
                    }

                    //releasedAmount = gpfBean.getMonthlySub() + gpfBean.getTowardsLoan() + gpfBean.getOtherDeposits();
                    releasedAmount = gpfBean.getMonthlySub() + gpfBean.getTowardsLoan();
                    gpfBean.setTotalReleased(releasedAmount);
                    total += releasedAmount;

                    if (slno % 8 == 0) {
                        gpfBean.setCarryForward(reportCarryForward(total, "GPF") + "");

                        gpfBean.setPagebreakchild("<input type=\"button\" name=\"pagebreak1\" style=\"page-break-before: always;width: 0;height: 0\"/>");
                        gpfBean.setPageHeaderTable(reportTableHeader("GPF") + "");
                        gpfBean.setBroughtForward(reportBroughtForward(total, "GPF") + "");
                    } else {
                        gpfBean.setCarryForward("");
                        gpfBean.setPagebreakchild("");
                        gpfBean.setPageHeaderTable("");
                        gpfBean.setBroughtForward("");
                    }
                    //if (total > 0) {
                    empGpfList.add(gpfBean);
                    //}
                }
                if (total > 0) {
                    gpfBean.setAmountInWords(Numtowordconvertion.convertNumber((int) total).toUpperCase());
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            DataBaseFunctions.closeSqlObjects(rsmonthlySub, rsgpfinst, rsotherdeposits);
            DataBaseFunctions.closeSqlObjects(pstmonthlySub, pstgpfinst, pstotherdeposits);
        }
        return empGpfList;
    }

    private StringBuffer reportBroughtForward(int pagetotal, String schedule) {

        StringBuffer broughtforward = null;

        try {
            if (schedule.equals("GPF")) {
                broughtforward = new StringBuffer("<tr style=\"height:30px\">"
                        + "<td colspan=\"8\" style=\"text-align:right;\" class=\"txtf\">"
                        + "Brought Forward  " + pagetotal + ""
                        + "</td>"
                        + "</tr>");
            } else if (schedule.equals("WRR") || schedule.equals("SWR") || schedule.equals("HRR")) {
                broughtforward = new StringBuffer("<tr style=\"height:30px\">"
                        + "<td colspan=\"5\" style=\"text-align:right;\" class=\"txtf\">"
                        + "Brought Forward  " + pagetotal + ""
                        + "</td>"
                        + "</tr>");
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return broughtforward;
    }

    private StringBuffer reportTableHeader(String schedule) {

        StringBuffer tblHeader = null;

        try {
            if (schedule.equals("GPF")) {
                tblHeader = new StringBuffer("<table border=\"0\" width=\"100%\" cellspacing=\"0\" style=\"font-size:11px; font-family:verdana;\">"
                        + "<tr class=\"tblHeader\" height=\"45px\">"
                        + "<td width=\"3%\" class=\"tblHeader\">Sl No</td>"
                        + "<td width=\"15%\" align=\"center\" class=\"tblHeader\">ACCOUNT NO./<br/>DATE OF ENTRY <br/>INTO GOVT. SERVICE</td>"
                        + "<td width=\"25%\" class=\"tblHeader\">NAME OF THE SUBSCRIBER/<br/>DESIGNATION</td>"
                        + "<td width=\"12%\" class=\"tblHeader\">BASIC PAY/ GRADE <br/>PAY / SCALE OF PAY</td>"
                        + "<td width=\"12%\" class=\"tblHeader\">MONTHLY SUBSCRIPTION</td>"
                        + "<td width=\"15%\" class=\"tblHeader\">REFUND OF WITHDRAWLS </br> AMT / NO. OF INST.</td>"
                        + "<td width=\"8%\" class=\"tblHeader\">TOTAL RELEASED</td>"
                        + "<td width=\"15%\" class=\"tblHeader\">REMARKS <br/>D.O.B and D.O.R.</td>"
                        + "</tr>");
                tblHeader.append("<tr class=\"tblHeader\" height=\"20px\">"
                        + "<td style=\"text-align:center;border-bottom:1px solid;\" class=\"printData\">&nbsp;1</td>"
                        + "<td style=\"text-align:center;border-bottom:1px solid;\" class=\"printData\">&nbsp;2</td>"
                        + "<td style=\"text-align:center;border-bottom:1px solid;\" class=\"printData\">&nbsp;3</td>"
                        + "<td style=\"text-align:center;border-bottom:1px solid;\" class=\"printData\">&nbsp;4</td>"
                        + "<td style=\"text-align:center;border-bottom:1px solid;\" class=\"printData\">&nbsp;5</td>"
                        + "<td style=\"text-align:center;border-bottom:1px solid;\" class=\"printData\">&nbsp;6</td>"
                        + "<td style=\"text-align:center;border-bottom:1px solid;\" class=\"printData\">&nbsp;7</td>"
                        + "<td style=\"text-align:center;border-bottom:1px solid;\" class=\"printData\">&nbsp;8</td>"
                        + "</tr>");
            } else if (schedule.equals("WRR")) {

            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return tblHeader;
    }

    private StringBuffer reportPageHeader(Connection con, String schedule, String gpfType, String billNo, String dednType) {

        PreparedStatement pst = null;
        ResultSet rs = null;

        String billmonth = "";
        String billyear = "";

        StringBuffer header = null;
        try {
            PayrollCommonFunction prcf = new PayrollCommonFunction();
            CommonReportParamBean bean = prcf.getCommonReportParameter(con, StringUtils.defaultString(billNo));

            String sql = "SELECT AQ_MONTH, AQ_YEAR FROM BILL_MAST WHERE BILL_NO = ?";
            pst = con.prepareStatement(sql);
            pst.setInt(1, Integer.parseInt(billNo));
            rs = pst.executeQuery();
            if (rs.next()) {
                int month = rs.getInt("AQ_MONTH");
                billmonth = CalendarCommonMethods.getFullMonthAsString(month);
                billyear = rs.getString("AQ_YEAR");
            }

            if (schedule.equals("GPF")) {
                header = new StringBuffer("<div style=\"width:90%;margin: 0 auto;\">"
                        + "<table width=\"100%\" border=\"0\">"
                        + "<tr>"
                        + "<td width=\"100%\" style=\"text-align:center\">"
                        + "<b>GENERAL PROVIDENT FUND</b>"
                        + "</td>"
                        + "</tr>"
                        + "<tr>"
                        + "<td width=\"100%\" style=\"text-align:center\">"
                        + "<b>BILL NO:</b>" + bean.getBilldesc() + ""
                        + "</td>"
                        + "</tr>"
                        + "<tr>"
                        + "<td width=\"100%\" style=\"text-align:center\">"
                        + "<b>T.V No / Date: </b>" + bean.getVchNo() + " / " + bean.getVchDate() + ""
                        + "</td>"
                        + "</tr>"
                        + "<tr>"
                        + "<td width=\"100%\" style=\"text-align:center\">"
                        + "SCHEDULE OF <b>" + gpfType + "</b>"
                        + "</td>"
                        + "</tr>"
                        + "<tr>"
                        + "<td width=\"100%\" style=\"text-align:center\">"
                        + "Demand No-\"8009/_____________________- State/Centre G.P.F Withdrawals\" (Strike out which is not applicable)"
                        + "</td>"
                        + "</tr>"
                        + "</table>"
                        + "</div>");
                header.append("<div style=\"width:99%;margin: 0 auto;\">"
                        + "<table width=\"100%\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" style=\"font-size:13px;\">"
                        + "<thead></thead>"
                        + "<tr>"
                        + "<td style=\"text-align:left;\">"
                        + "1. Arrange the A/C Nos in serial order. Accounts Nos may be written very clearly."
                        + "Separate Schedules should be prepared  for each group."
                        + "</td>"
                        + "</tr>"
                        + "<tr>"
                        + "<td style=\"text-align:left;\">2. The names of the subscribers should be written in full.</td>"
                        + "</tr>"
                        + "<tr>"
                        + "<td style=\"text-align:left;\">3. If interest is paid on advance, mention it in remarks column.</td>"
                        + "</tr>"
                        + "<tr>"
                        + "<td style=\"text-align:left;\">4. Figures in columns 3,4,5 and 7 should be rounded to whole rupees.</td>"
                        + "</tr>"
                        + "<tr>"
                        + "<td style=\"text-align:left;\">5. Use similar form, if names are few. But do not write subscribers name and account numbers very close to each other.</td>"
                        + "</tr>"
                        + "<tr>"
                        + "<td style=\"text-align:left;\">6. The total of schedules also should be written both in figures and words.</td>"
                        + "</tr>"
                        + "<tr>"
                        + "<td style=\"text-align:left;\">7. This form should not be used for transactions of General Provident Fund for which form No. O.T.C. 76 has been provided.</td>"
                        + "</tr>"
                        + "<tr>"
                        + "<td style=\"text-align:left;\">8. In Col. 1 quote account number unfailingly. The guide letters e.g. I.C.S. (ICS Provident Fund) etc. should be invariably  prefixed to Account Nos.</td>"
                        + "</tr>"
                        + "<tr>"
                        + "<td style=\"text-align:left;\">9. In the remarks column write description against every new name such as 'New Subscriber' came on transfer from Office District resumed subscription.</td>"
                        + "</tr>"
                        + "<tr>"
                        + "<td style=\"text-align:left;\">10. Separate schedule should be prepared in respect of persons whose account are kept by different Accountant General.</td>"
                        + "</tr>"
                        + "<tr>"
                        + "<td>&nbsp;</td>"
                        + "</tr>"
                        + "<tr>"
                        + "<td style=\"text-align:center;\"><b>" + bean.getOfficeen() + "</b>"
                        + "</br>DEDUCTION MADE FROM THE SALARY FOR <b>" + billmonth + "</b>&ensp;<b>" + billyear + "</b>"
                        + "</td>"
                        + "</tr>"
                        + "<tr>"
                        + "<td>&nbsp;</td>"
                        + "</tr>"
                        + "</table>"
                        + "</div>");
                header.append(reportTableHeader("GPF"));

            } else if (schedule.equals("WRR") || schedule.equals("SWR") || schedule.equals("HRR")) {

                header = new StringBuffer("<tr style=\"height: 30px\">\n"
                        + "<th width=\"8%\" style=\"text-align: center;border-bottom:1px solid #000000;border-top:1px solid #000000;border-right:1px solid #000000;border-left:1px solid #000000;\">\n"
                        + "Sl. No.\n"
                        + "</th>\n"
                        + "<th width=\"15%\" style=\"text-align: center;border-bottom:1px solid #000000;border-top:1px solid #000000;border-right:1px solid #000000;border-left:1px solid #000000;\">\n"
                        + "GPF No.\n"
                        + "</th>\n"
                        + "<th width=\"25%\" style=\"text-align: center;border-bottom:1px solid #000000;border-top:1px solid #000000;border-right:1px solid #000000;border-left:1px solid #000000;\">\n"
                        + "Name of the Employee/Designation\n"
                        + "</th>\n"
                        + "<th width=\"12%\" style=\"text-align: center;border-bottom:1px solid #000000;border-top:1px solid #000000;border-right:1px solid #000000;border-left:1px solid #000000;\">\n"
                        + "Amount Recovered\n"
                        + "</th>\n"
                        + "<th width=\"17%\" style=\"text-align: center;border-bottom:1px solid #000000;border-top:1px solid #000000;border-right:1px solid #000000;border-left:1px solid #000000;\">\n"
                        + "Quarter No. & Address\n"
                        + "</th>\n"
                        + "</tr>");

            } else if (schedule.equals("HBA") || schedule.equals("VE") || schedule.equals("SHBA") || schedule.equals("MCA") || schedule.equals("MOPA") || schedule.equals("CMPA")) {
                if (dednType.equals("P")) {
                    header = new StringBuffer("<tr class=\"tblHeader\">\n"
                            + "<td width=\"4%\" rowspan=\"2\" class=\"printData\" style=\"border: 1px solid black;\">Sl. No.</td>\n"
                            + "<td width=\"20%\" rowspan=\"2\" class=\"printData\" style=\"border: 1px solid black;\">Name of the Employee/<br>Designation</td>\n"
                            + "<td width=\"10%\" rowspan=\"2\" class=\"printData\" style=\"border: 1px solid black;\">Month in which Original Advance was Drawn</td>\n"
                            + "<td width=\"5%\" colspan=\"6\" style=\"text-align:center;border: 1px solid black;\" class=\"printData\">PRINCIPAL</td>\n"
                            + "</tr>");
                } else if (dednType.equals("I")) {
                    header = new StringBuffer("<tr class=\"tblHeader\">\n"
                            + "<td width=\"4%\" rowspan=\"2\" class=\"printData\" style=\"border: 1px solid black;\">Sl. No.</td>\n"
                            + "<td width=\"20%\" rowspan=\"2\" class=\"printData\" style=\"border: 1px solid black;\">Name of the Employee/<br>Designation</td>\n"
                            + "<td width=\"10%\" rowspan=\"2\" class=\"printData\" style=\"border: 1px solid black;\">T.V. No. & Date in<br>which original adv<br>drawn with<br>Treasury Name</td>\n"
                            + "<td width=\"10%\" rowspan=\"2\" class=\"printData\" style=\"border: 1px solid black;\">Account No</td>\n"
                            + "<td width=\"5%\" colspan=\"6\" style=\"text-align:center;border: 1px solid black;\" class=\"printData\">INTEREST</td>\n"
                            + "</tr>");
                }
                header.append("<tr class=\"tblHeader\">\n"
                        + "<td width=\"8%\" align=\"center\" class=\"printData\" style=\"border: 1px solid black;\">Amount of<br>Original<br>Advance</td>\n"
                        + "<td width=\"8%\" align=\"center\" class=\"printData\" style=\"border: 1px solid black;\">No of<br>Installment of<br>Recovery</td>\n"
                        + "<td width=\"8%\" align=\"center\" class=\"printData\" style=\"border: 1px solid black;\">Amount<br>Deducted in<br>the Bill</td>\n"
                        + "<td width=\"8%\" align=\"center\" class=\"printData\" style=\"border: 1px solid black;\">Recovery<br>Upto the<br>Month</td>\n"
                        + "<td width=\"8%\" align=\"center\" class=\"printData\" style=\"border: 1px solid black;\">Balance<br>Outstanding</td>\n"
                        + "<td width=\"8%\" align=\"center\" class=\"printData\" style=\"border: 1px solid black;\">Remarks</td>\n"
                        + "</tr>");

            } else if (schedule.equals("IT") || schedule.equals("HC") || schedule.equals("GIS") || schedule.equals("CGEGIS")) {
                if (schedule.equals("IT")) {
                    header = new StringBuffer("<tr style=\"height: 30px\">\n"
                            + "<th width=\"5%\" style=\"text-align: center;border-bottom:1px solid #000000;border-top:1px solid #000000;border-right:1px solid #000000;border-left:1px solid #000000;\">Sl. No.</th>\n"
                            + "<th width=\"20%\" style=\"text-align: center;border-bottom:1px solid #000000;border-top:1px solid #000000;border-right:1px solid #000000;border-left:1px solid #000000;\">Name and Designation of Employee</th>\n"
                            + "<th width=\"10%\" style=\"text-align: center;border-bottom:1px solid #000000;border-top:1px solid #000000;border-right:1px solid #000000;border-left:1px solid #000000;\">PAN No</th>\n"
                            + "<th width=\"10%\" style=\"text-align: center;border-bottom:1px solid #000000;border-top:1px solid #000000;border-right:1px solid #000000;border-left:1px solid #000000;\">Gross Salary</th>\n"
                            + "<th width=\"10%\" style=\"text-align: center;border-bottom:1px solid #000000;border-top:1px solid #000000;border-right:1px solid #000000;border-left:1px solid #000000;\">Deduction</th>\n"
                            + "</tr>");
                } else if (schedule.equals("HC")) {
                    header = new StringBuffer("<tr style=\"height: 30px\">\n"
                            + "<th width=\"5%\" style=\"text-align: center;border-bottom:1px solid #000000;border-top:1px solid #000000;border-right:1px solid #000000;border-left:1px solid #000000;\">Sl. No.</th>\n"
                            + "<th width=\"20%\" colspan=\"2\" style=\"text-align: center;border-bottom:1px solid #000000;border-top:1px solid #000000;border-right:1px solid #000000;border-left:1px solid #000000;\">Name and Designation of Employee</th>\n"
                            + "<th width=\"10%\" style=\"text-align: center;border-bottom:1px solid #000000;border-top:1px solid #000000;border-right:1px solid #000000;border-left:1px solid #000000;\">Gross Salary</th>\n"
                            + "<th width=\"10%\" style=\"text-align: center;border-bottom:1px solid #000000;border-top:1px solid #000000;border-right:1px solid #000000;border-left:1px solid #000000;\">Deduction</th>\n"
                            + "</tr>");
                } else if (schedule.equals("GIS")) {
                    header = new StringBuffer("<tr style=\"height: 30px\">\n"
                            + "<th width=\"5%\" style=\"text-align: center;border-bottom:1px solid #000000;border-top:1px solid #000000;border-right:1px solid #000000;border-left:1px solid #000000;\">Sl. No.</th>\n"
                            + "<th width=\"20%\" colspan=\"2\" style=\"text-align: center;border-bottom:1px solid #000000;border-top:1px solid #000000;border-right:1px solid #000000;border-left:1px solid #000000;\">Name and Designation of Employee</th>\n"
                            + "<th width=\"10%\" style=\"text-align: center;border-bottom:1px solid #000000;border-top:1px solid #000000;border-right:1px solid #000000;border-left:1px solid #000000;\">Gross Salary</th>\n"
                            + "<th width=\"10%\" style=\"text-align: center;border-bottom:1px solid #000000;border-top:1px solid #000000;border-right:1px solid #000000;border-left:1px solid #000000;\">Deduction</th>\n"
                            + "</tr>");
                } else if (schedule.equals("CGEGIS")) {
                    header = new StringBuffer("<tr style=\"height: 30px\">\n"
                            + "<th width=\"5%\" style=\"text-align: center;border-bottom:1px solid #000000;border-top:1px solid #000000;border-right:1px solid #000000;border-left:1px solid #000000;\">Sl. No.</th>\n"
                            + "<th width=\"20%\" colspan=\"2\" style=\"text-align: center;border-bottom:1px solid #000000;border-top:1px solid #000000;border-right:1px solid #000000;border-left:1px solid #000000;\">Name and Designation of Employee</th>\n"
                            + "<th width=\"10%\" style=\"text-align: center;border-bottom:1px solid #000000;border-top:1px solid #000000;border-right:1px solid #000000;border-left:1px solid #000000;\">Gross Salary</th>\n"
                            + "<th width=\"10%\" style=\"text-align: center;border-bottom:1px solid #000000;border-top:1px solid #000000;border-right:1px solid #000000;border-left:1px solid #000000;\">Deduction</th>\n"
                            + "</tr>");
                }
            } else if (schedule.equals("EP")) {

                header = new StringBuffer("<tr style=\"height:40px;\">"
                        + "<td width=\"4%\" class=\"tblHeader\">Sl No</td>"
                        + "<td width=\"25%\" class=\"tblHeader\">Employee Name</td>"
                        + "<td width=\"17%\" class=\"tblHeader\">Designation</td>"
                        + "<td width=\"10%\" class=\"tblHeader\">Gross Salary</td>"
                        + "<td width=\"10%\" class=\"tblHeader\">Excess Pay</td>"
                        + "<td width=\"10%\" class=\"tblHeader\">Remark</td>"
                        + "</tr>");

            } else if (schedule.equals("PLS")) {

                header = new StringBuffer("<tr style=\"height:40px;\">"
                        + "<td width=\"4%\" class=\"printData\" style=\"font-family:verdana;font-size:12px;text-align:center;border:1px solid black;\"><b>Sl No</b></td>"
                        + "<td width=\"30%\" class=\"printData\" style=\"font-family:verdana;font-size:12px;text-align:center;border:1px solid black;\"><b>NAME AND DESIGNATION</b></td>"
                        + "<td width=\"20%\" class=\"printData\" style=\"font-family:verdana;font-size:12px;text-align:center;border:1px solid black;\"><b>AMOUNT(PVT LOAN /DED DESCRIPTION)</b></td>"
                        + "</tr>");
            } else if (schedule.equals("annexure1")) {

                header = new StringBuffer("<tr style=\"height:40px;\">"
                        + "<td width=\"4%\" rowspan=\"3\" class=\"tblHeader\" style=\"font-family:verdana;font-size:12px;text-align:center;border:1px solid black;\"><b>Sl No</b></td>"
                        + "<td width=\"10%\" rowspan=\"3\" class=\"tblHeader\" style=\"font-family:verdana;font-size:12px;text-align:center;border:1px solid black;\"><b>PRAN</b></td>"
                        + "<td width=\"25%\" rowspan=\"3\" class=\"tblHeader\" style=\"font-family:verdana;font-size:12px;text-align:center;border:1px solid black;\"><b>Employee Name</b></td>"
                        + "<td width=\"17%\" rowspan=\"3\" class=\"tblHeader\" style=\"font-family:verdana;font-size:12px;text-align:center;border:1px solid black;\"><b>Designation</b></td>"
                        + "<td width=\"8%\" rowspan=\"3\" class=\"tblHeader\" style=\"font-family:verdana;font-size:12px;text-align:center;border:1px solid black;\"><b>Basic Pay<br> + GP (Rs.)</b></td>"
                        + "<td width=\"5%\" rowspan=\"3\" class=\"tblHeader\" style=\"font-family:verdana;font-size:12px;text-align:center;border:1px solid black;\"><b>D.A<br>(Rs.)</b></td>"
                        + "<td width=\"8%\" rowspan=\"3\" class=\"tblHeader\" style=\"font-family:verdana;font-size:12px;text-align:center;border:1px solid black;\"><b>Total <br>(Rs.)</b></td>"
                        + "<td width=\"25%\" colspan=\"4\" class=\"tblHeader\" style=\"font-family:verdana;font-size:12px;text-align:center;border:1px solid black;\"><b>Employees Contribution</b></td>"
                        + "</tr>"
                        + "<tr>"
                        + "<td width=\"7%\" rowspan=\"2\" class=\"tblHeader\" style=\"font-family:verdana;font-size:12px;text-align:center;border:1px solid black;\"><b>Current (Rs.)</b></td>"
                        + "<td width=\"18%\" colspan=\"3\" class=\"tblHeader\" style=\"font-family:verdana;font-size:12px;text-align:center;border:1px solid black;\"><b>Arrears</b></td>"
                        + "</tr>"
                        + "<tr>"
                        + "<td width=\"5%\" class=\"tblHeader\" style=\"font-family:verdana;font-size:12px;text-align:center;border:1px solid black;\"><b>Installment</b></td>"
                        + "<td width=\"6%\" class=\"tblHeader\" style=\"font-family:verdana;font-size:12px;text-align:center;border:1px solid black;\"><b>Amount <br>(Rs.)</b></td>"
                        + "<td width=\"7%\" class=\"tblHeader\" style=\"font-family:verdana;font-size:12px;text-align:center;border:1px solid black;\"><b>Total <br>(Rs.)</b></td>"
                        + "</tr>"
                        + "<tr>"
                        + "<td class=\"tblHeader\" style=\"font-family:verdana;font-size:12px;text-align:center;border:1px solid black;\"><b>1</b></td>"
                        + "<td class=\"tblHeader\" style=\"font-family:verdana;font-size:12px;text-align:center;border:1px solid black;\"><b>2</b></td>"
                        + "<td class=\"tblHeader\" style=\"font-family:verdana;font-size:12px;text-align:center;border:1px solid black;\"><b>3</b></td>"
                        + "<td class=\"tblHeader\" style=\"font-family:verdana;font-size:12px;text-align:center;border:1px solid black;\"><b>4</b></td>"
                        + "<td class=\"tblHeader\" style=\"font-family:verdana;font-size:12px;text-align:center;border:1px solid black;\"><b>5</b></td>"
                        + "<td class=\"tblHeader\" style=\"font-family:verdana;font-size:12px;text-align:center;border:1px solid black;\"><b>6</b></td>"
                        + "<td class=\"tblHeader\" style=\"font-family:verdana;font-size:12px;text-align:center;border:1px solid black;\"><b>7</b></td>"
                        + "<td class=\"tblHeader\" style=\"font-family:verdana;font-size:12px;text-align:center;border:1px solid black;\"><b>8</b></td>"
                        + "<td class=\"tblHeader\" style=\"font-family:verdana;font-size:12px;text-align:center;border:1px solid black;\"><b>9</b></td>"
                        + "<td class=\"tblHeader\" style=\"font-family:verdana;font-size:12px;text-align:center;border:1px solid black;\"><b>10</b></td>"
                        + "<td class=\"tblHeader\" style=\"font-family:verdana;font-size:12px;text-align:center;border:1px solid black;\"><b>11</b></td>"
                        + "</tr>");
            } else if (schedule.equals("annexure2")) {

                header = new StringBuffer("<tr style=\"height:40px;\">"
                        + "<td width=\"4%\" class=\"tblHeader\" style=\"font-family:verdana;font-size:12px;text-align:center;border:1px solid black;\"><b>Sl No</b></td>"
                        + "<td width=\"12%\" class=\"tblHeader\" style=\"font-family:verdana;font-size:12px;text-align:center;border:1px solid black;\"><b>PRAN</b></td>"
                        + "<td width=\"22%\" class=\"tblHeader\" style=\"font-family:verdana;font-size:12px;text-align:center;border:1px solid black;\"><b>Employee Name</b></td>"
                        + "<td width=\"20%\" class=\"tblHeader\" style=\"font-family:verdana;font-size:12px;text-align:center;border:1px solid black;\"><b>Designation</b></td>"
                        + "<td width=\"10%\" class=\"tblHeader\" style=\"font-family:verdana;font-size:12px;text-align:center;border:1px solid black;\"><b>Basic Pay<br> + GP (Rs.)</b></td>"
                        + "<td width=\"8%\" class=\"tblHeader\" style=\"font-family:verdana;font-size:12px;text-align:center;border:1px solid black;\"><b>D.A<br>(Rs.)</b></td>"
                        + "<td width=\"15%\" class=\"tblHeader\" style=\"font-family:verdana;font-size:12px;text-align:center;border:1px solid black;\"><b>Govt's Contribution</b></td>"
                        + "<td width=\"14%\" class=\"tblHeader\" style=\"font-family:verdana;font-size:12px;text-align:center;border:1px solid black;\"><b>Remarks</b></td>"
                        + "</tr>"
                        + "<tr>"
                        + "<td class=\"tblHeader\" style=\"font-family:verdana;font-size:12px;text-align:center;border:1px solid black;\"><b>1</b></td>"
                        + "<td class=\"tblHeader\" style=\"font-family:verdana;font-size:12px;text-align:center;border:1px solid black;\"><b>2</b></td>"
                        + "<td class=\"tblHeader\" style=\"font-family:verdana;font-size:12px;text-align:center;border:1px solid black;\"><b>3</b></td>"
                        + "<td class=\"tblHeader\" style=\"font-family:verdana;font-size:12px;text-align:center;border:1px solid black;\"><b>4</b></td>"
                        + "<td class=\"tblHeader\" style=\"font-family:verdana;font-size:12px;text-align:center;border:1px solid black;\"><b>5</b></td>"
                        + "<td class=\"tblHeader\" style=\"font-family:verdana;font-size:12px;text-align:center;border:1px solid black;\"><b>6</b></td>"
                        + "<td class=\"tblHeader\" style=\"font-family:verdana;font-size:12px;text-align:center;border:1px solid black;\"><b>7</b></td>"
                        + "<td class=\"tblHeader\" style=\"font-family:verdana;font-size:12px;text-align:center;border:1px solid black;\"><b>8</b></td>"
                        + "</tr>");
            } else if (schedule.equals("annexure3")) {

                header = new StringBuffer("<tr style=\"height:40px;\">"
                        + "<td width=\"4%\" class=\"tblHeader\" style=\"font-family:verdana;font-size:12px;text-align:center;border:1px solid black;\"><b>Sl No</b></td>"
                        + "<td width=\"10%\" class=\"tblHeader\" style=\"font-family:verdana;font-size:12px;text-align:center;border:1px solid black;\"><b>PRAN</b></td>"
                        + "<td width=\"25%\" class=\"tblHeader\" style=\"font-family:verdana;font-size:12px;text-align:center;border:1px solid black;\"><b>Employee Name</b></td>"
                        + "<td width=\"17%\" class=\"tblHeader\" style=\"font-family:verdana;font-size:12px;text-align:center;border:1px solid black;\"><b>Designation</b></td>"
                        + "<td width=\"10%\" class=\"tblHeader\" style=\"font-family:verdana;font-size:12px;text-align:center;border:1px solid black;\"><b>Bill No and Date of Employees Contribution</b></td>"
                        + "<td width=\"10%\" class=\"tblHeader\" style=\"font-family:verdana;font-size:12px;text-align:center;border:1px solid black;\"><b>Amount of Employees Contribution</b></td>"
                        + "<td width=\"10%\" class=\"tblHeader\" style=\"font-family:verdana;font-size:12px;text-align:center;border:1px solid black;\"><b>Bill No & Date of Govt. Contribution</b></td>"
                        + "<td width=\"10%\" class=\"tblHeader\" style=\"font-family:verdana;font-size:12px;text-align:center;border:1px solid black;\"><b>Amount of Govt. Contribution</b></td>"
                        + "<td width=\"10%\" class=\"tblHeader\" style=\"font-family:verdana;font-size:12px;text-align:center;border:1px solid black;\"><b>Total in Rs.</b></td>"
                        + "</tr>"
                        + "<tr>"
                        + "<td class=\"tblHeader\" style=\"font-family:verdana;font-size:12px;text-align:center;border:1px solid black;\"><b>1</b></td>"
                        + "<td class=\"tblHeader\" style=\"font-family:verdana;font-size:12px;text-align:center;border:1px solid black;\"><b>2</b></td>"
                        + "<td class=\"tblHeader\" style=\"font-family:verdana;font-size:12px;text-align:center;border:1px solid black;\"><b>3</b></td>"
                        + "<td class=\"tblHeader\" style=\"font-family:verdana;font-size:12px;text-align:center;border:1px solid black;\"><b>4</b></td>"
                        + "<td class=\"tblHeader\" style=\"font-family:verdana;font-size:12px;text-align:center;border:1px solid black;\"><b>5</b></td>"
                        + "<td class=\"tblHeader\" style=\"font-family:verdana;font-size:12px;text-align:center;border:1px solid black;\"><b>6</b></td>"
                        + "<td class=\"tblHeader\" style=\"font-family:verdana;font-size:12px;text-align:center;border:1px solid black;\"><b>7</b></td>"
                        + "<td class=\"tblHeader\" style=\"font-family:verdana;font-size:12px;text-align:center;border:1px solid black;\"><b>8</b></td>"
                        + "<td class=\"tblHeader\" style=\"font-family:verdana;font-size:12px;text-align:center;border:1px solid black;\"><b>9</b></td>"
                        + "</tr>");
            } else if (schedule.equals("annexure4")) {

                header = new StringBuffer("<tr style=\"height:40px;\">"
                        + "<td width=\"4%\" class=\"tblHeader\" style=\"font-family:verdana;font-size:12px;text-align:center;border:1px solid black;\"><b>Sl No</b></td>"
                        + "<td width=\"10%\" class=\"tblHeader\" style=\"font-family:verdana;font-size:12px;text-align:center;border:1px solid black;\"><b>Treasury Officers <br/>Regd No(issued by CRA)</b></td>"
                        + "<td width=\"17%\" class=\"tblHeader\" style=\"font-family:verdana;font-size:12px;text-align:center;border:1px solid black;\"><b>PRAN</b></td>"
                        + "<td width=\"25%\" class=\"tblHeader\" style=\"font-family:verdana;font-size:12px;text-align:center;border:1px solid black;\"><b>Employee Name</b></td>"
                        + "<td width=\"10%\" class=\"tblHeader\" style=\"font-family:verdana;font-size:12px;text-align:center;border:1px solid black;\"><b>Basic Pay + GP + DA Rs.</b></td>"
                        + "<td width=\"10%\" class=\"tblHeader\" style=\"font-family:verdana;font-size:12px;text-align:center;border:1px solid black;\"><b>Employees Contribution under Tier-I Rs.</b></td>"
                        + "<td width=\"10%\" class=\"tblHeader\" style=\"font-family:verdana;font-size:12px;text-align:center;border:1px solid black;\"><b>Government Contribution under Tier-I Rs.</b></td>"
                        + "<td width=\"10%\" class=\"tblHeader\" style=\"font-family:verdana;font-size:12px;text-align:center;border:1px solid black;\"><b>Total</b></td>"
                        + "<td width=\"10%\" class=\"tblHeader\" style=\"font-family:verdana;font-size:12px;text-align:center;border:1px solid black;\"><b>Remark</b></td>"
                        + "</tr>"
                        + "<tr>"
                        + "<td class=\"tblHeader\" style=\"font-family:verdana;font-size:12px;text-align:center;border:1px solid black;\"><b>1</b></td>"
                        + "<td class=\"tblHeader\" style=\"font-family:verdana;font-size:12px;text-align:center;border:1px solid black;\"><b>2</b></td>"
                        + "<td class=\"tblHeader\" style=\"font-family:verdana;font-size:12px;text-align:center;border:1px solid black;\"><b>3</b></td>"
                        + "<td class=\"tblHeader\" style=\"font-family:verdana;font-size:12px;text-align:center;border:1px solid black;\"><b>4</b></td>"
                        + "<td class=\"tblHeader\" style=\"font-family:verdana;font-size:12px;text-align:center;border:1px solid black;\"><b>5</b></td>"
                        + "<td class=\"tblHeader\" style=\"font-family:verdana;font-size:12px;text-align:center;border:1px solid black;\"><b>6</b></td>"
                        + "<td class=\"tblHeader\" style=\"font-family:verdana;font-size:12px;text-align:center;border:1px solid black;\"><b>7</b></td>"
                        + "<td class=\"tblHeader\" style=\"font-family:verdana;font-size:12px;text-align:center;border:1px solid black;\"><b>8</b></td>"
                        + "<td class=\"tblHeader\" style=\"font-family:verdana;font-size:12px;text-align:center;border:1px solid black;\"><b>9</b></td>"
                        + "</tr>");
            } else if (schedule.equals("PT")) {

                header = new StringBuffer("<tr style=\"height:40px;\">"
                        + "<td width=\"5%\" class=\"tblHeader\" style=\"text-align:center;\">Sl No</td>"
                        + "<td width=\"25%\" class=\"tblHeader\" style=\"text-align:center;\">Employee Name</td>"
                        + "<td width=\"35%\" class=\"tblHeader\" style=\"text-align:center;\">Designation</td>"
                        + "<td width=\"15%\" class=\"tblHeader\" style=\"text-align:center;\">Gross Salary</td>"
                        + "<td width=\"10%\" class=\"tblHeader\" style=\"text-align:center;\">Tax on Profession</td>"
                        + "<td width=\"10%\" class=\"tblHeader\" style=\"text-align:center;\">Remark</td>"
                        + "</tr>");
            } else if (schedule.equals("GISA") || schedule.equals("FA") || schedule.equals("OR") || schedule.equals("ADVPAY")) {

                header = new StringBuffer("<tr style=\"height:40px;\">"
                        + "<td width=\"3%\" class=\"tblHeader\" style=\"text-align:center;\">Sl No</td>"
                        + "<td width=\"20%\" class=\"tblHeader\" style=\"text-align:center;\">NAME OF THE EMPLOYEE/ DESIGNATION</td>"
                        + "<td width=\"15%\" class=\"tblHeader\" style=\"text-align:center;\">T.V. NO. IN WHICH ORIGINAL ADV DRAWN WITH TREASURY NAME</td>"
                        + "<td width=\"8%\" class=\"tblHeader\" style=\"text-align:center;\">ACCOUNT NO</td>"
                        + "<td width=\"8%\" class=\"tblHeader\" style=\"text-align:center;\">AMOUNT OF ORIGINAL ADVANCE</td>"
                        + "<td width=\"8%\" class=\"tblHeader\" style=\"text-align:center;\">NO OF INSTALLMENT OF RECOVERY</td>"
                        + "<td width=\"8%\" class=\"tblHeader\" style=\"text-align:center;\">AMOUNT DEDUCTED IN THE BILL</td>"
                        + "<td width=\"8%\" class=\"tblHeader\" style=\"text-align:center;\">RECOVERY UPTO THE MONTH</td>"
                        + "<td width=\"8%\" class=\"tblHeader\" style=\"text-align:center;\">BALANCE OUTSTANDING</td>"
                        + "<td width=\"8%\" class=\"tblHeader\" style=\"text-align:center;\">REMARKS</td>"
                        + "</tr>");
            } else if (schedule.equals("BS")) {

                header = new StringBuffer("<tr style=\"height:40px;\">"
                        + "<td width=\"3%\" class=\"tblHeader\" style=\"text-align:center;\">Sl No</td>"
                        + "<td width=\"18%\" class=\"tblHeader\" style=\"text-align:center;\">SB A/C No. /  <br> Name of the Bank</td>"
                        + "<td width=\"30%\" class=\"tblHeader\" style=\"text-align:center;\">Name/<br> Designation</td>"
                        + "<td width=\"12%\" class=\"tblHeader\" style=\"text-align:center;\">(PF No) <br> Net Amount <br> (in Rs)</td>"
                        + "<td width=\"12%\" class=\"tblHeader\" style=\"text-align:center;\">Loan/ Advance <br> Liability <br> Amount (in Rs)</td>"
                        + "<td width=\"12%\" class=\"tblHeader\" style=\"text-align:center;\">Amt Credited to <br> SB A/C of the <br> employee (in Rs)</td>"
                        + "<td width=\"18%\" class=\"tblHeader\" style=\"text-align:center;\">Amt Credited to <br> CA A/C of the <br> DDO (in Rs)</td>"
                        + "</tr>");
            } else if (schedule.equals("LIC")) {

                header = new StringBuffer("<tr class=\"tblHeader\" style=\"height:40px;\">"
                        + "<td width=\"4%\" class=\"printData\" style=\"text-align:center;border:1px solid black;\">Sl No</td>"
                        + "<td width=\"20%\" class=\"printData\" style=\"text-align:center;border:1px solid black;\">Name of the Employee</td>"
                        + "<td width=\"20%\" class=\"printData\" style=\"text-align:center;border:1px solid black;\">Designation</td>"
                        + "<td width=\"10%\" class=\"printData\" style=\"text-align:center;border:1px solid black;\">Policy No.</td>"
                        + "<td width=\"10%\" class=\"printData\" style=\"text-align:center;border:1px solid black;\">Recovery Month</td>"
                        + "<td width=\"10%\" class=\"printData\" style=\"text-align:center;border:1px solid black;\">Amount</td>"
                        + "<td width=\"10%\" class=\"printData\" style=\"text-align:center;border:1px solid black;\">Total</td>"
                        + "<td width=\"10%\" class=\"printData\" style=\"text-align:center;border:1px solid black;\">Remark</td>"
                        + "</tr>");
            } else if (schedule.equals("AR")) {

                header = new StringBuffer("<tr class=\"tblHeader\" style=\"height:40px;\">"
                        + "<td width=\"4%\" class=\"tblHeader\" style=\"text-align:center;border:1px solid black;\">Sl No</td>"
                        + "<td width=\"22%\" class=\"tblHeader\" style=\"text-align:center;border:1px solid black;\">Name of the Incumbents with Designation</td>"
                        + "<td width=\"10%\" class=\"tblHeader\" style=\"text-align:center;border:1px solid black;\">Amount of Recoveries</td>"
                        + "<td width=\"10%\" class=\"tblHeader\" style=\"text-align:center;border:1px solid black;\">Amount to be deducted now</td>"
                        + "<td width=\"10%\" class=\"tblHeader\" style=\"text-align:center;border:1px solid black;\">No. of instalmenth</td>"
                        + "<td width=\"10%\" class=\"tblHeader\" style=\"text-align:center;border:1px solid black;\">Balance</td>"
                        + "<td width=\"10%\" class=\"tblHeader\" style=\"text-align:center;border:1px solid black;\">Audit report No.& para</td>"
                        + "<td width=\"10%\" class=\"tblHeader\" style=\"text-align:center;border:1px solid black;\">Head of Account to be Credited</td>"
                        + "<td width=\"8%\" class=\"tblHeader\" style=\"text-align:center;border:1px solid black;\">REMARKS</td>"
                        + "</tr>");
            }
            //next code here

        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            DataBaseFunctions.closeSqlObjects(rs, pst);
        }
        return header;
    }

    private StringBuffer reportCarryForward(int pagetotal, String schedule) {

        StringBuffer carryforward = null;

        try {
            if (schedule.equals("GPF")) {
                carryforward = new StringBuffer("<table width=\"100%\" border=\"0\" id=\"tblcarryforward\" style=\"left: 18px;\" style=\"font-size:11px;\" cellpadding=\"0\" cellspacing=\"0\">"
                        + "<tr style=\"height:30px\">"
                        + "<td colspan=\"8\" style=\"text-align:right;\" class=\"txtf\">"
                        + "Carry Forward  " + pagetotal + ""
                        + "</td>"
                        + "</tr>"
                        + "</table>");
            } else if (schedule.equals("WRR") || schedule.equals("SWR") || schedule.equals("HRR")) {
                carryforward = new StringBuffer("<table width=\"100%\" border=\"0\" id=\"tblcarryforward\" style=\"left: 18px;\" style=\"font-size:11px;\" cellpadding=\"0\" cellspacing=\"0\">"
                        + "<tr style=\"height:30px\">"
                        + "<td colspan=\"5\" style=\"text-align:right;\" class=\"txtf\">"
                        + "Carry Forward  " + pagetotal + ""
                        + "</td>"
                        + "</tr>"
                        + "</table>");
            } else if (schedule.equals("IT") || schedule.equals("HC") || schedule.equals("GIS") || schedule.equals("CGEGIS")) {
                carryforward = new StringBuffer("<tr style=\"height: 30px\">"
                        + "<td style=\"text-align: center\">Grand Total</td>\n"
                        + "<td>&nbsp;</td>\n"
                        + "<td>&nbsp;</td>\n"
                        + "<td>&nbsp;</td>\n"
                        + "<td style=\"text-align: right\">" + pagetotal + "</td>"
                        + "</tr>");
                carryforward.append("<tr style=\"height: 30px\">"
                        + "<td align=\"center\" colspan=\"5\">In Words(RUPEES" + Numtowordconvertion.convertNumber(pagetotal) + ") ONLY</td>"
                        + "</tr>");
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return carryforward;
    }

    private int getPayAmt(int billNo) {

        Connection con = null;
        PreparedStatement pst = null;
        ResultSet rs = null;
        int amount = 0;

        try {
            con = this.dataSource.getConnection();

            String sql = "SELECT sum(CUR_BASIC) AD_AMT from AQ_MAST WHERE BILL_NO=?";
            pst = con.prepareStatement(sql);
            pst.setInt(1, billNo);
            rs = pst.executeQuery();
            if (rs.next()) {
                amount = rs.getInt("AD_AMT");
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            DataBaseFunctions.closeSqlObjects(rs, pst);
            DataBaseFunctions.closeSqlObjects(con);
        }
        return amount;
    }

    @Override
    public void billFrontPagePDF(Document document, String billMonth, String billNo, BillChartOfAccount billChartOfAccount, BillObjectHead boha, List scheduleList, List oaList, int spAmt, int irAmt, int payAmt, String payHead) {

        Connection con = null;
        PreparedStatement pst = null;
        ResultSet rs = null;
        BillFrontPageBean bfpbean = new BillFrontPageBean();

        try {
            con = this.dataSource.getConnection();
            getBenRefNo(bfpbean, billNo);
            getDescriptionDetails(bfpbean, billNo);

            Font f1 = new Font();
            f1.setSize(8.5f);
            f1.setFamily("Times New Roman");

            //start of first table
            PdfPTable maintable = new PdfPTable(4);
            maintable.setWidths(new int[]{3, 2, 2, 1});
            maintable.setWidthPercentage(100);

            PdfPCell maincell = null;

            //START OF FIRST MAIN ROW
            maincell = new PdfPCell(new Phrase("Schedule LIII - Form No. 188", new Font(Font.FontFamily.TIMES_ROMAN, 9, Font.BOLD)));
            maincell.setBorder(Rectangle.NO_BORDER);
            maintable.addCell(maincell);

            maincell = new PdfPCell(new Phrase(StringUtils.defaultString(billChartOfAccount.getDdoName()), f1));
            //maincell.setBorder(Rectangle.NO_BORDER);
            maincell.setHorizontalAlignment(Element.ALIGN_CENTER);
            maintable.addCell(maincell);

            maincell = new PdfPCell(new Phrase("Bill No: " + StringUtils.defaultString(billChartOfAccount.getBilldesc()), new Font(Font.FontFamily.TIMES_ROMAN, 9, Font.BOLD)));
            maincell.setBorder(Rectangle.NO_BORDER);
            maincell.setHorizontalAlignment(Element.ALIGN_CENTER);
            maintable.addCell(maincell);

            maincell = new PdfPCell(new Phrase("P", new Font(Font.FontFamily.TIMES_ROMAN, 30, Font.NORMAL)));
            maincell.setRowspan(3);
            maincell.setBorder(Rectangle.NO_BORDER);
            maintable.addCell(maincell);

            maincell = new PdfPCell(new Phrase("Detailed Pay Bill of Permanent/Temporary Establishment of the " + StringUtils.defaultString(billChartOfAccount.getOffName()), new Font(Font.FontFamily.TIMES_ROMAN, 7, Font.NORMAL)));
            maincell.setColspan(2);
            maincell.setBorder(Rectangle.NO_BORDER);
            maintable.addCell(maincell);

            maincell = new PdfPCell(new Phrase("(O.T.C.Form No.22)", new Font(Font.FontFamily.TIMES_ROMAN, 7, Font.BOLD)));
            maincell.setBorder(Rectangle.NO_BORDER);
            maincell.setHorizontalAlignment(Element.ALIGN_CENTER);
            maintable.addCell(maincell);

            /*maincell = new PdfPCell(new Phrase("",f1));
             maincell.setBorder(Rectangle.NO_BORDER);
             maintable.addCell(maincell);*/
            maincell = new PdfPCell(new Phrase("for the month of " + billMonth, new Font(Font.FontFamily.TIMES_ROMAN, 7, Font.NORMAL)));
            maincell.setBorder(Rectangle.NO_BORDER);
            maintable.addCell(maincell);

            maincell = new PdfPCell(new Phrase("", f1));
            maincell.setBorder(Rectangle.NO_BORDER);
            maintable.addCell(maincell);

            maincell = new PdfPCell(new Phrase("District : " + StringUtils.defaultString(billChartOfAccount.getDistrict()), new Font(Font.FontFamily.TIMES_ROMAN, 6, Font.NORMAL)));
            maincell.setColspan(2);
            maincell.setBorder(Rectangle.NO_BORDER);
            maintable.addCell(maincell);

            maincell = new PdfPCell();
            maincell.setBorder(Rectangle.NO_BORDER);
            maintable.addCell(maincell);
            maincell = new PdfPCell();

            maincell.setBorder(Rectangle.NO_BORDER);
            maintable.addCell(maincell);

            maincell = new PdfPCell(new Phrase("Ben Ref No : " + StringUtils.defaultString(billChartOfAccount.getBenRefNo()), new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.BOLD)));
            maincell.setColspan(2);
            maincell.setBorder(Rectangle.NO_BORDER);
            maintable.addCell(maincell);

            maincell = new PdfPCell();
            maincell.setBorder(Rectangle.NO_BORDER);
            maintable.addCell(maincell);

            if (billChartOfAccount.getBillType() != null && !billChartOfAccount.getBillType().equals("22")) {
                if (billChartOfAccount.getTokenNo() == null || billChartOfAccount.getTokenNo().equals("")) {
                    //maincell = new PdfPCell(new Phrase("DRAFT", new Font(Font.FontFamily.TIMES_ROMAN, 18, Font.BOLD)));
                    maincell = new PdfPCell();
                    maincell.setBorder(Rectangle.NO_BORDER);
                    maintable.addCell(maincell);
                } else {
                    maincell = new PdfPCell();
                    maincell.setBorder(Rectangle.NO_BORDER);
                    maintable.addCell(maincell);
                }
            } else {
                maincell = new PdfPCell();
                maincell.setBorder(Rectangle.NO_BORDER);
                maintable.addCell(maincell);
            }
            maincell = new PdfPCell(new Phrase("Token No : " + StringUtils.defaultString(billChartOfAccount.getTokenNo()), new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.BOLD)));
            maincell.setColspan(2);
            maincell.setBorder(Rectangle.NO_BORDER);
            maintable.addCell(maincell);
            //end of first table
            document.add(maintable);
            //END OF FIRST MAIN ROW

            //START OF SECOND MAIN ROW
            //start of second table
            maintable = new PdfPTable(2);
            maintable.setWidths(new float[]{6.5f, 4.5f});
            maintable.setWidthPercentage(100);

            //PdfPCell maincell = null;
            //start of Creating Space
            maincell = new PdfPCell();
            maincell.setColspan(2);
            maincell.setFixedHeight(20);
            maincell.setBorder(Rectangle.NO_BORDER);
            maintable.addCell(maincell);
            //end of Creating Space

            //start of first row under SECOND MAIN ROW
            maincell = new PdfPCell(new Phrase("Space for classification stamp of manuscript entries of classification to be filled in by Drawing Officer,"
                    + " Name of detailed heads and corresponding amounts should be recorded by him in adjacent column.", f1));
            maincell.setBorder(Rectangle.TOP | Rectangle.RIGHT);
            maintable.addCell(maincell);
            maincell = new PdfPCell(new Phrase(StringUtils.leftPad("VOUCHER\n", 50) + "of" + StringUtils.repeat(" ", 80) + "list\n" + "for", f1));
            maincell.setBorder(Rectangle.TOP);
            maincell.setHorizontalAlignment(Rectangle.ALIGN_LEFT);
            maintable.addCell(maincell);
            //end of first row under SECOND MAIN ROW
            //start of Creating Space
            maincell = new PdfPCell();
            maincell.setFixedHeight(10);
            maincell.setBorder(Rectangle.RIGHT);
            maintable.addCell(maincell);
            maincell = new PdfPCell();
            maincell.setBorder(Rectangle.BOTTOM);
            maintable.addCell(maincell);
            //end of Creating Space

            //start of second row under SECOND MAIN ROW
            //start of 1st inner table under second table for column 1
            PdfPTable innertable1 = new PdfPTable(2);
            innertable1.setWidths(new int[]{2, 2});
            innertable1.setWidthPercentage(100);

            PdfPCell innercell = null;

            innercell = new PdfPCell(new Phrase("Demand No", f1));
            innercell.setBorder(Rectangle.NO_BORDER);
            innertable1.addCell(innercell);
            innercell = new PdfPCell(new Phrase("- " + StringUtils.defaultString(billChartOfAccount.getDemandNo()), f1));
            innercell.setBorder(Rectangle.RIGHT);
            innertable1.addCell(innercell);

            innercell = new PdfPCell(new Phrase("Major Head", f1));
            innercell.setBorder(Rectangle.NO_BORDER);
            innertable1.addCell(innercell);
            innercell = new PdfPCell(new Phrase("- " + StringUtils.defaultString(billChartOfAccount.getMajorHead()), f1));
            innercell.setBorder(Rectangle.RIGHT);
            innertable1.addCell(innercell);

            innercell = new PdfPCell(new Phrase("Sub Major Head", f1));
            innercell.setBorder(Rectangle.NO_BORDER);
            innertable1.addCell(innercell);
            innercell = new PdfPCell(new Phrase("- " + StringUtils.defaultString(billChartOfAccount.getSubMajorHead()), f1));
            innercell.setBorder(Rectangle.RIGHT);
            innertable1.addCell(innercell);

            innercell = new PdfPCell(new Phrase("Minor Head", f1));
            innercell.setBorder(Rectangle.NO_BORDER);
            innertable1.addCell(innercell);
            innercell = new PdfPCell(new Phrase("- " + StringUtils.defaultString(billChartOfAccount.getMinorHead()), f1));
            innercell.setBorder(Rectangle.RIGHT);
            innertable1.addCell(innercell);

            innercell = new PdfPCell(new Phrase("Sub head", f1));
            innercell.setBorder(Rectangle.NO_BORDER);
            innertable1.addCell(innercell);
            innercell = new PdfPCell(new Phrase("- " + StringUtils.defaultString(billChartOfAccount.getSubMinorHead1()), f1));
            innercell.setBorder(Rectangle.RIGHT);
            innertable1.addCell(innercell);

            innercell = new PdfPCell(new Phrase("Detail Head", f1));
            innercell.setBorder(Rectangle.NO_BORDER);
            innertable1.addCell(innercell);
            innercell = new PdfPCell(new Phrase("- " + StringUtils.defaultString(billChartOfAccount.getSubMinorHead2()), f1));
            innercell.setBorder(Rectangle.RIGHT);
            innertable1.addCell(innercell);

            innercell = new PdfPCell(new Phrase("Plan Status", f1));
            innercell.setBorder(Rectangle.NO_BORDER);
            innertable1.addCell(innercell);
            innercell = new PdfPCell(new Phrase("- " + StringUtils.defaultString(billChartOfAccount.getPlanName()), f1));
            innercell.setBorder(Rectangle.RIGHT);
            innertable1.addCell(innercell);

            innercell = new PdfPCell(new Phrase("Charge/Voted", f1));
            innercell.setBorder(Rectangle.NO_BORDER);
            innertable1.addCell(innercell);
            innercell = new PdfPCell(new Phrase("- " + StringUtils.defaultString(billChartOfAccount.getSubMinorHead3()), f1));
            innercell.setBorder(Rectangle.RIGHT);
            innertable1.addCell(innercell);

            innercell = new PdfPCell(new Phrase("Sector", f1));
            innercell.setBorder(Rectangle.NO_BORDER);
            innertable1.addCell(innercell);
            innercell = new PdfPCell(new Phrase("- " + StringUtils.defaultString(billChartOfAccount.getSectorName()), f1));
            innercell.setBorder(Rectangle.RIGHT);
            innertable1.addCell(innercell);
            //end of 1st inner table under second table for column1    
            maincell = new PdfPCell(innertable1);
            maincell.setBorder(Rectangle.NO_BORDER);
            maintable.addCell(maincell);

            //start of second inner table under second table for column 2
            innertable1 = new PdfPTable(3);
            innertable1.setWidths(new float[]{3, 1.5f, 0.5f});
            innertable1.setWidthPercentage(100);

            //PdfPCell innercell = null;
            innercell = new PdfPCell();
            innercell.setBorder(Rectangle.TOP);
            innertable1.addCell(innercell);
            innercell = new PdfPCell(new Phrase("Rs", f1));
            innercell.setBorder(Rectangle.TOP | Rectangle.BOTTOM | Rectangle.LEFT);
            innercell.setHorizontalAlignment(Element.ALIGN_CENTER);
            innertable1.addCell(innercell);
            innercell = new PdfPCell(new Phrase("P", f1));
            innercell.setBorder(Rectangle.TOP | Rectangle.BOTTOM | Rectangle.LEFT);
            innercell.setHorizontalAlignment(Element.ALIGN_CENTER);
            innertable1.addCell(innercell);

            innercell = new PdfPCell(new Phrase("Pay of Permanent Establishment", f1));
            innercell.setBorder(Rectangle.RIGHT);
            innertable1.addCell(innercell);
            innercell = new PdfPCell();
            innercell.setBorder(Rectangle.RIGHT);
            innertable1.addCell(innercell);
            innercell = new PdfPCell();
            innercell.setBorder(Rectangle.NO_BORDER);
            innertable1.addCell(innercell);

            innercell = new PdfPCell(new Phrase("Pay of temporary Establishment", f1));
            innercell.setBorder(Rectangle.RIGHT);
            innertable1.addCell(innercell);
            innercell = new PdfPCell();
            innercell.setBorder(Rectangle.RIGHT);
            innertable1.addCell(innercell);
            innercell = new PdfPCell();
            innercell.setBorder(Rectangle.NO_BORDER);
            innertable1.addCell(innercell);

            Font f2 = new Font();
            f2.setSize(9);

            Schedule obj1 = null;
            int amt = 0;
            double oaAmt = 0.0;
            if (oaList != null && oaList.size() > 0) {
                for (int i = 0; i < oaList.size(); i++) {

                    obj1 = (Schedule) oaList.get(i);
                    if (obj1.getObjectHead() != null && obj1.getObjectHead().equals("136")) {
                        amt = amt + Integer.parseInt(obj1.getSchAmount());
                    }
                    if (obj1.getObjectHead() != null && obj1.getObjectHead().equals("000")) {
                        amt = amt + Integer.parseInt(obj1.getSchAmount());
                    }
                    oaAmt = obj1.getAlowanceTotal();
                }
            }
            payAmt = payAmt + amt;
            String amtTobeDisplay = String.valueOf(payAmt);
            oaAmt = payAmt + spAmt + irAmt + (oaAmt - amt);

            Schedule objD = null;
            double deductAmt = 0.0;
            if (scheduleList != null && scheduleList.size() > 0) {
                for (int i = 0; i < scheduleList.size(); i++) {
                    objD = (Schedule) scheduleList.get(i);
                    double schAmt = Double.parseDouble(objD.getSchAmount());
                    deductAmt = deductAmt + schAmt;
                }
            }

            String totDeductAmt[] = CommonFunctions.getRupessAndPaise(String.valueOf(deductAmt));
            double netAmt = oaAmt - deductAmt;
            String netAmount[] = CommonFunctions.getRupessAndPaise(String.valueOf(netAmt));
            String totOaAmtInString = Double.valueOf(oaAmt + "").longValue() + "";
            String totNetAmtInString = Double.valueOf(netAmt + "").longValue() + "";

            if (payHead == null) {
                payHead = "";
            }

            if (payAmt > 0) {
                innercell = new PdfPCell(new Phrase(payHead + StringUtils.repeat(" ", 30) + StringUtils.defaultString("- PAY"), f2));
                innercell.setBorder(Rectangle.RIGHT);
                innertable1.addCell(innercell);
                innercell = new PdfPCell(new Phrase(payAmt + "", f2));
                innercell.setBorder(Rectangle.RIGHT);
                innercell.setHorizontalAlignment(Element.ALIGN_RIGHT);
                innertable1.addCell(innercell);
                innercell = new PdfPCell();
                innercell.setBorder(Rectangle.NO_BORDER);
                innertable1.addCell(innercell);
            }

            if (spAmt > 0) {
                innercell = new PdfPCell(new Phrase("136" + StringUtils.repeat(" ", 30) + StringUtils.defaultString("- SP"), f2));
                innercell.setBorder(Rectangle.RIGHT);
                innertable1.addCell(innercell);
                innercell = new PdfPCell(new Phrase(spAmt + "", f2));
                innercell.setBorder(Rectangle.RIGHT);
                innercell.setHorizontalAlignment(Element.ALIGN_RIGHT);
                innertable1.addCell(innercell);
                innercell = new PdfPCell();
                innercell.setBorder(Rectangle.NO_BORDER);
                innertable1.addCell(innercell);
            }

            if (irAmt > 0) {
                innercell = new PdfPCell(new Phrase("136" + StringUtils.repeat(" ", 30) + StringUtils.defaultString("- IR"), f2));
                innercell.setBorder(Rectangle.RIGHT);
                innertable1.addCell(innercell);
                innercell = new PdfPCell(new Phrase(irAmt + "", f2));
                innercell.setBorder(Rectangle.RIGHT);
                innercell.setHorizontalAlignment(Element.ALIGN_RIGHT);
                innertable1.addCell(innercell);
                innercell = new PdfPCell();
                innercell.setBorder(Rectangle.NO_BORDER);
                innertable1.addCell(innercell);
            }

            Schedule obj = null;
            if (oaList != null && oaList.size() > 0) {
                for (int i = 0; i < oaList.size(); i++) {
                    obj = (Schedule) oaList.get(i);

                    if (!obj.getObjectHead().equals("136") && !obj.getObjectHead().equals("000")) {

                        innercell = new PdfPCell(new Phrase(obj.getObjectHead() + StringUtils.repeat(" ", 30) + StringUtils.defaultString(obj.getScheduleName()), f2));
                        innercell.setBorder(Rectangle.RIGHT);
                        innertable1.addCell(innercell);

                        innercell = new PdfPCell(new Phrase(obj.getSchAmount(), f2));
                        innercell.setBorder(Rectangle.RIGHT);
                        innercell.setHorizontalAlignment(Element.ALIGN_RIGHT);
                        innertable1.addCell(innercell);

                        innercell = new PdfPCell();
                        innercell.setBorder(Rectangle.NO_BORDER);
                        innertable1.addCell(innercell);
                    }
                }
            }

            innercell = new PdfPCell(new Phrase("Total", f1));
            innercell.setBorder(Rectangle.TOP | Rectangle.RIGHT);
            innercell.setHorizontalAlignment(Element.ALIGN_RIGHT);
            innertable1.addCell(innercell);
            innercell = new PdfPCell(new Phrase(StringUtils.defaultString(totOaAmtInString + ""), f1));
            innercell.setBorder(Rectangle.TOP | Rectangle.RIGHT | Rectangle.BOTTOM);
            innercell.setHorizontalAlignment(Element.ALIGN_RIGHT);
            innertable1.addCell(innercell);
            //innercell = new PdfPCell(new Phrase(StringUtils.defaultString(billFrForm.getTotalPaice()), f1));
            innercell = new PdfPCell();
            innercell.setBorder(Rectangle.TOP | Rectangle.BOTTOM);
            innercell.setHorizontalAlignment(Element.ALIGN_RIGHT);
            innertable1.addCell(innercell);

            maincell = new PdfPCell(innertable1);
            maincell.setBorder(Rectangle.NO_BORDER);
            maintable.addCell(maincell);
            //end of second row under SECOND MAIN ROW

            //start of third row under SECOND MAIN ROW
            maincell = new PdfPCell(new Phrase("\nN.B", f1));
            maincell.setBorder(Rectangle.RIGHT);
            maintable.addCell(maincell);

            //start of inner table
            innertable1 = new PdfPTable(3);
            innertable1.setWidths(new float[]{3, 1.5f, 0.5f});
            innertable1.setWidthPercentage(100);

            innercell = new PdfPCell(new Phrase("\nDeduct-", f1));
            innercell.setBorder(Rectangle.RIGHT);
            innertable1.addCell(innercell);

            innercell = new PdfPCell();
            innercell.setBorder(Rectangle.RIGHT);
            innertable1.addCell(innercell);

            innercell = new PdfPCell();
            innercell.setBorder(Rectangle.NO_BORDER);
            innertable1.addCell(innercell);
            //end of inner table
            maincell = new PdfPCell(innertable1);
            maincell.setBorder(Rectangle.NO_BORDER);
            maintable.addCell(maincell);
                        //start of third row under SECOND MAIN ROW

            //start of fourth row under SECOND MAIN ROW
            maincell = new PdfPCell(new Phrase(" 1.Hold over amounts should be entered in red ink in the appropriate col. 3,4,5 and 6 as the"
                    + " case may be and ignored in totalling. Leave salary the amount of which is not known, should Similarly"
                    + " be entered in red in col. 4 at the same rate as pay if he has remained on duty (S.T.R. 55).\n  2. In the Remarks column 15 should be recorded all unusal permanent events such as death,"
                    + "retirements, transfers and first appointments which find no place increment certificates or absentee"
                    + "statement.\n  3. When the increment claimed operates to carry a Government Servant Govt. to efficiency bar"
                    + "it should be supported by a declaration that the Government servants in question is fit to pass the bar"
                    + " (S.T.R. 6).\n  4. Names of Government servants in inferior services as well as those mentioned [S.T.R.55(3)]"
                    + " may be omitted from pay bill (S.T.R.55).\n  5. A red line should be drawn right across the sheet after each section of the punishment and"
                    + " under it is totals of columns 4,5,6 and 7 and 8 of the section should be shown in red ink.\n  6. In cases where the amount of leave salary is based on average pay separate statement"
                    + " showing the calculation of average pay duly attested by Drawing Officer should be attachment to this"
                    + " bill vide [S.T.R.55 (3)].\n  7. The names of men holding post substantively should be entered in order of Seniority as"
                    + " measured by substantive pay drawn and below those will be shown the parts left vacant and the men"
                    + " officiating in the vacancies.\n  8. Officiating pay should be record in the section of the bill appropriate to that in which the"
                    + " Government servant officiates and transit pay should be recorded in the same section as that in which"
                    + " the duty pay of the Government servant after transfer is recorded."
                    + "\n  9. The following abbreviations should be use in this and in all other document, submitted with"
                    + " pay bill.", f1));
            maincell.setBorder(Rectangle.RIGHT);
            maintable.addCell(maincell);

            //start of third inner table under second inner table under second table for column 2
            innertable1 = new PdfPTable(4);
            innertable1.setWidths(new float[]{2, 1, 1.5f, 0.5f});
            innertable1.setWidthPercentage(100);
            //ArrayList 
            if (scheduleList != null && scheduleList.size() > 0) {
                Iterator itr = scheduleList.iterator();
                while (itr.hasNext()) {
                    obj = (Schedule) itr.next();
                    innercell = new PdfPCell(new Phrase(StringUtils.defaultString(obj.getObjectHead()), f2));
                    innercell.setBorder(Rectangle.NO_BORDER);
                    innertable1.addCell(innercell);
                    innercell = new PdfPCell(new Phrase(StringUtils.defaultString(obj.getScheduleName()), f2));
                    innercell.setBorder(Rectangle.RIGHT);
                    innercell.setHorizontalAlignment(Element.ALIGN_LEFT);
                    innertable1.addCell(innercell);
                    innercell = new PdfPCell(new Phrase(StringUtils.defaultString(obj.getSchAmount()), f2));
                    innercell.setBorder(Rectangle.RIGHT);
                    innercell.setHorizontalAlignment(Element.ALIGN_RIGHT);
                    innertable1.addCell(innercell);
                    innercell = new PdfPCell();
                    innercell.setBorder(Rectangle.NO_BORDER);
                    innertable1.addCell(innercell);
                }
            }
            //end of third inner table under second inner table under second table for column 2
            maincell = new PdfPCell(innertable1);
            maincell.setBorder(Rectangle.NO_BORDER);
            maintable.addCell(maincell);
                    //end of fourth row under SECOND MAIN ROW

            //start of fifth row under SECOND MAIN ROW
            //start of inner table for fifth row under SECOND MAIN ROW
            innertable1 = new PdfPTable(3);
            innertable1.setWidths(new float[]{2.5f, 2, 1});
            innertable1.setWidthPercentage(100);

            innercell = new PdfPCell(new Phrase("Leave on average pay", f1));
            innercell.setBorder(Rectangle.NO_BORDER);
            innertable1.addCell(innercell);
            innercell = new PdfPCell(new Phrase("- LAP Under suspension", f1));
            innercell.setBorder(Rectangle.NO_BORDER);
            innertable1.addCell(innercell);
            innercell = new PdfPCell(new Phrase("- SP", f1));
            innercell.setBorder(Rectangle.NO_BORDER);
            innertable1.addCell(innercell);

            innercell = new PdfPCell(new Phrase("Leave on quarter average pay", f1));
            innercell.setBorder(Rectangle.NO_BORDER);
            innertable1.addCell(innercell);
            innercell = new PdfPCell(new Phrase("- LIP Vacant", f1));
            innercell.setBorder(Rectangle.NO_BORDER);
            innertable1.addCell(innercell);
            innercell = new PdfPCell(new Phrase("- A", f1));
            innercell.setBorder(Rectangle.NO_BORDER);
            innertable1.addCell(innercell);

            innercell = new PdfPCell(new Phrase("On other duty", f1));
            innercell.setBorder(Rectangle.NO_BORDER);
            innertable1.addCell(innercell);
            innercell = new PdfPCell(new Phrase("- OD Post Life Insurance", f1));
            innercell.setBorder(Rectangle.NO_BORDER);
            innertable1.addCell(innercell);
            innercell = new PdfPCell(new Phrase("- I", f1));
            innercell.setBorder(Rectangle.NO_BORDER);
            innertable1.addCell(innercell);

            innercell = new PdfPCell(new Phrase("Leave Salary", f1));
            innercell.setBorder(Rectangle.NO_BORDER);
            innertable1.addCell(innercell);
            innercell = new PdfPCell(new Phrase("- LS Last Pay Certificate", f1));
            innercell.setBorder(Rectangle.NO_BORDER);
            innertable1.addCell(innercell);
            innercell = new PdfPCell(new Phrase("- LP", f1));
            innercell.setBorder(Rectangle.NO_BORDER);
            innertable1.addCell(innercell);

            innercell = new PdfPCell(new Phrase("Conveyance allowance", f1));
            innercell.setBorder(Rectangle.NO_BORDER);
            innertable1.addCell(innercell);
            innercell = new PdfPCell(new Phrase("- CA Subsistence grant", f1));
            innercell.setBorder(Rectangle.NO_BORDER);
            innertable1.addCell(innercell);
            innercell = new PdfPCell(new Phrase("- Sub grant", f1));
            innercell.setBorder(Rectangle.NO_BORDER);
            innertable1.addCell(innercell);

            innercell = new PdfPCell(new Phrase("Transit pay", f1));
            innercell.setBorder(Rectangle.NO_BORDER);
            innertable1.addCell(innercell);
            innercell = new PdfPCell(new Phrase("- TP", f1));
            innercell.setBorder(Rectangle.NO_BORDER);
            innertable1.addCell(innercell);
            innercell = new PdfPCell(new Phrase("", f1));
            innercell.setBorder(Rectangle.NO_BORDER);
            innertable1.addCell(innercell);
            //end of inner table for fifth row under SECOND MAIN ROW
            maincell = new PdfPCell(innertable1);
            maincell.setBorder(Rectangle.RIGHT);
            maintable.addCell(maincell);

            //start of inner table for column 2 for fifth row under SECOND MAIN ROW
            innertable1 = new PdfPTable(3);
            innertable1.setWidths(new float[]{3, 1.5f, 0.5f});
            innertable1.setWidthPercentage(100);

            innercell = new PdfPCell(new Phrase("\n\nTotal deductions", f1));
            innercell.setBorder(Rectangle.RIGHT);
            innertable1.addCell(innercell);

            //innercell = new PdfPCell(new Phrase("\n\n" + StringUtils.defaultString(totDeductAmt[0] + ""), f1));
            innercell = new PdfPCell(new Phrase("\n\n" + Double.valueOf(totDeductAmt[0]).longValue() + "", f1));
            innercell.setBorder(Rectangle.RIGHT | Rectangle.TOP | Rectangle.BOTTOM);
            innercell.setHorizontalAlignment(Element.ALIGN_RIGHT);
            innertable1.addCell(innercell);
            //innercell = new PdfPCell(new Phrase("\n\n" + StringUtils.defaultString(billFrForm.getDeductPaice()), f1));
            innercell = new PdfPCell();
            innercell.setBorder(Rectangle.TOP | Rectangle.BOTTOM);
            innercell.setHorizontalAlignment(Element.ALIGN_RIGHT);
            innertable1.addCell(innercell);

            innercell = new PdfPCell(new Phrase("\nNet Total", f1));
            innercell.setBorder(Rectangle.RIGHT);
            innertable1.addCell(innercell);
            innercell = new PdfPCell(new Phrase("\n" + StringUtils.defaultString(totNetAmtInString + ""), f1));
            innercell.setBorder(Rectangle.RIGHT | Rectangle.TOP);
            innercell.setHorizontalAlignment(Element.ALIGN_RIGHT);
            innertable1.addCell(innercell);
            //innercell = new PdfPCell(new Phrase("\n" + StringUtils.defaultString(billFrForm.getNetPaice()), f1));
            innercell = new PdfPCell();
            innercell.setBorder(Rectangle.TOP);
            innercell.setHorizontalAlignment(Element.ALIGN_RIGHT);
            innertable1.addCell(innercell);
            //end of inner table for column 2 for fifth row under SECOND MAIN ROW
            maincell = new PdfPCell(innertable1);
            maincell.setBorder(Rectangle.NO_BORDER);
            maintable.addCell(maincell);
            //end of fifth row under SECOND MAIN ROW

            //start of sixth row under SECOND MAIN ROW
            maincell = new PdfPCell(new Phrase("\n  10. In cases where any fast one sesiocladeo in pay bill, a separate schepe showing the"
                    + " particulars of deduction relating to each fund should accompany the bill.", f1));
            maincell.setBorder(Rectangle.RIGHT | Rectangle.BOTTOM);
            maintable.addCell(maincell);
            maincell = new PdfPCell();
            maincell.setBorder(Rectangle.BOTTOM);
            maintable.addCell(maincell);
            //end of sixth row under SECOND MAIN ROW
            //END OF SECOND MAIN ROW

            //START OF THIRD MAIN ROW
            maincell = new PdfPCell(new Phrase("FOR THE USE OF THE ACCOUNT GENERAL'S OFFICE", new Font(Font.FontFamily.TIMES_ROMAN, 10, Font.BOLD)));
            maincell.setColspan(2);
            maincell.setBorder(Rectangle.NO_BORDER);
            maincell.setHorizontalAlignment(Element.ALIGN_CENTER);
            maintable.addCell(maincell);

            maincell = new PdfPCell(new Phrase("Admitted Rs.", new Font(Font.FontFamily.TIMES_ROMAN, 9, Font.BOLD)));
            maincell.setColspan(2);
            maincell.setBorder(Rectangle.NO_BORDER);
            maincell.setHorizontalAlignment(Element.ALIGN_LEFT);
            maintable.addCell(maincell);

            maincell = new PdfPCell(new Phrase("Object Rs.", new Font(Font.FontFamily.TIMES_ROMAN, 9, Font.BOLD)));
            maincell.setColspan(2);
            maincell.setBorder(Rectangle.NO_BORDER);
            maincell.setHorizontalAlignment(Element.ALIGN_LEFT);
            maintable.addCell(maincell);

            maincell = new PdfPCell(new Phrase("Auditor" + StringUtils.repeat(" ", 60) + "Superitendent", new Font(Font.FontFamily.TIMES_ROMAN, 9, Font.BOLD)));
            maincell.setBorder(Rectangle.NO_BORDER);
            maincell.setHorizontalAlignment(Element.ALIGN_LEFT);
            maintable.addCell(maincell);
            maincell = new PdfPCell(new Phrase("Gazetted Officer", new Font(Font.FontFamily.TIMES_ROMAN, 9, Font.BOLD)));
            maincell.setBorder(Rectangle.NO_BORDER);
            maincell.setHorizontalAlignment(Element.ALIGN_LEFT);
            maintable.addCell(maincell);

            maincell = new PdfPCell();
            maincell.setColspan(2);
            maincell.setFixedHeight(20);
            maincell.setBorder(Rectangle.BOTTOM);
            maintable.addCell(maincell);

            maincell = new PdfPCell(new Phrase("S.T.R. means Subsidiary Rules under the Orissa Treasury Rules.\nThe deduct entries relating to the Provident fund should be posted separately for the Sterling and Ordinary Brand as.", f1));
            maincell.setColspan(2);
            maincell.setBorder(Rectangle.NO_BORDER);
            maintable.addCell(maincell);
            //END OF THIRD MAIN ROW
            document.add(maintable);
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            DataBaseFunctions.closeSqlObjects(rs, pst);
            DataBaseFunctions.closeSqlObjects(con);
        }
    }

    private BillFrontPageBean getBenRefNo(BillFrontPageBean bfpbean, String billNo) {

        Connection con = null;

        PreparedStatement pst = null;
        ResultSet rs = null;

        try {
            con = this.dataSource.getConnection();

            String sql = "SELECT BEN_REF_NO,TOKEN_NO,BILL_TYPE FROM BILL_MAST WHERE BILL_NO=?";
            pst = con.prepareStatement(sql);
            pst.setInt(1, Integer.parseInt(billNo));
            rs = pst.executeQuery();
            if (rs.next()) {
                bfpbean.setRefno(rs.getString("BEN_REF_NO"));
                bfpbean.setTokenNo(rs.getString("TOKEN_NO"));
                bfpbean.setBillType(rs.getString("BILL_TYPE"));
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            DataBaseFunctions.closeSqlObjects(rs, pst);
            DataBaseFunctions.closeSqlObjects(con);
        }
        return bfpbean;
    }

    private BillFrontPageBean getDescriptionDetails(BillFrontPageBean bfpbean, String billNo) {

        Connection con = null;

        PreparedStatement pst = null;
        ResultSet rs = null;

        try {
            con = this.dataSource.getConnection();

            String sql = "SELECT OFF_EN,DIST_NAME,DDO_CODE,BILL_MAST.MAJOR_HEAD, BILL_MAST.MAJOR_HEAD_DESC, BILL_MAST.PLAN, POST_TYPE, BILL_MAST.SECTOR,SECTOR_DESC, BILL_MAST.SUB_MAJOR_HEAD,"
                    + " BILL_MAST.SUB_MAJOR_HEAD_DESC, BILL_MAST.MINOR_HEAD, BILL_MAST.MINOR_HEAD_DESC, BILL_MAST.SUB_MINOR_HEAD1, BILL_MAST.SUB_MINOR_HEAD1_DESC,"
                    + " BILL_MAST.SUB_MINOR_HEAD2, BILL_MAST.SUB_MINOR_HEAD2_DESC, BILL_MAST.SUB_MINOR_HEAD3, BILL_MAST.BILL_TYPE,DEMAND_NO FROM("
                    + " SELECT G_OFFICE.OFF_EN,G_OFFICE.DIST_CODE,BILL_MAST.MAJOR_HEAD, BILL_MAST.MAJOR_HEAD_DESC, BILL_MAST.PLAN, BILL_MAST.SECTOR, BILL_MAST.SUB_MAJOR_HEAD,"
                    + " BILL_MAST.SUB_MAJOR_HEAD_DESC, BILL_MAST.MINOR_HEAD, BILL_MAST.MINOR_HEAD_DESC, BILL_MAST.SUB_MINOR_HEAD1, BILL_MAST.SUB_MINOR_HEAD1_DESC,"
                    + " BILL_MAST.SUB_MINOR_HEAD2, BILL_MAST.SUB_MINOR_HEAD2_DESC, BILL_MAST.SUB_MINOR_HEAD3, BILL_MAST.BILL_TYPE,G_OFFICE.DDO_CODE,DEMAND_NO FROM ("
                    + " SELECT BILL_MAST.MAJOR_HEAD, BILL_MAST.MAJOR_HEAD_DESC, BILL_MAST.PLAN, BILL_MAST.SECTOR, BILL_MAST.SUB_MAJOR_HEAD,"
                    + " BILL_MAST.SUB_MAJOR_HEAD_DESC, BILL_MAST.MINOR_HEAD, BILL_MAST.MINOR_HEAD_DESC, BILL_MAST.SUB_MINOR_HEAD1, BILL_MAST.SUB_MINOR_HEAD1_DESC,"
                    + " BILL_MAST.SUB_MINOR_HEAD2, BILL_MAST.SUB_MINOR_HEAD2_DESC, BILL_MAST.SUB_MINOR_HEAD3, BILL_MAST.BILL_TYPE,DDO_CODE,DEMAND_NO,OFF_CODE FROM BILL_MAST WHERE BILL_NO=?) BILL_MAST"
                    + " LEFT OUTER JOIN G_OFFICE ON BILL_MAST.OFF_CODE=G_OFFICE.OFF_CODE) BILL_MAST"
                    + " LEFT OUTER JOIN G_DISTRICT ON BILL_MAST.DIST_CODE=G_DISTRICT.DIST_CODE"
                    + " LEFT OUTER JOIN G_SECTOR ON BILL_MAST.SECTOR=G_SECTOR.SECTOR_CODE"
                    + " LEFT OUTER JOIN G_POST_TYPE ON BILL_MAST.PLAN=G_POST_TYPE.POST_CODE";
            pst = con.prepareStatement(sql);
            pst.setInt(1, Integer.parseInt(billNo));
            rs = pst.executeQuery();
            if (rs.next()) {
                bfpbean.setDdoName(rs.getString("DDO_CODE"));
                bfpbean.setOffName(rs.getString("OFF_EN"));
                bfpbean.setDistrictName(rs.getString("DIST_NAME"));
                bfpbean.setMajorHead(rs.getString("MAJOR_HEAD"));
                bfpbean.setMajorHeadDesc(rs.getString("MAJOR_HEAD_DESC"));
                bfpbean.setPlan(rs.getString("PLAN"));
                bfpbean.setSector(rs.getString("SECTOR"));
                bfpbean.setPlanName(rs.getString("POST_TYPE"));
                bfpbean.setSectorName(rs.getString("SECTOR_DESC"));
                bfpbean.setSubMajorHead(rs.getString("SUB_MAJOR_HEAD"));
                bfpbean.setSubMajorHeadDesc(rs.getString("SUB_MAJOR_HEAD_DESC"));
                bfpbean.setMinorHead(rs.getString("MINOR_HEAD"));
                bfpbean.setMinorHeadDesc(rs.getString("MINOR_HEAD_DESC"));
                bfpbean.setSubMinorHead1(rs.getString("SUB_MINOR_HEAD1"));
                bfpbean.setSubMinorHeadDesc1(rs.getString("SUB_MINOR_HEAD1_DESC"));
                bfpbean.setSubMinorHead2(rs.getString("SUB_MINOR_HEAD2"));
                bfpbean.setSubMinorHeadDesc2(rs.getString("SUB_MINOR_HEAD2_DESC"));
                if (rs.getString("SUB_MINOR_HEAD3") != null && !rs.getString("SUB_MINOR_HEAD3").equals("")) {
                    if (rs.getString("SUB_MINOR_HEAD3").equals("2")) {
                        bfpbean.setSubMinorHead3("Charge");
                    } else {
                        bfpbean.setSubMinorHead3("Voted");
                    }
                } else {
                    bfpbean.setSubMinorHead3("");
                }

                bfpbean.setBillType(rs.getString("BILL_TYPE"));
                bfpbean.setDemandNo(rs.getString("DEMAND_NO"));
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            DataBaseFunctions.closeSqlObjects(rs, pst);
            DataBaseFunctions.closeSqlObjects(con);
        }
        return bfpbean;
    }

    @Override
    public void billBackPagePDF(Document document, String billNo, BillBackPageBean backPageBean, List empList) {

        Connection con = null;
        PreparedStatement pst = null;
        ResultSet rs = null;
        BillBackPageBean bbpBean = new BillBackPageBean();
        Schedule sc = null;
        long deductAmt = 0;

        try {
            con = this.dataSource.getConnection();

            BillBackPageBean bBean = null;
            if (empList != null && empList.size() > 0) {
                bBean = new BillBackPageBean();
                for (int i = 0; i < empList.size(); i++) {
                    bBean = (BillBackPageBean) empList.get(i);
                    deductAmt = deductAmt + Long.parseLong(bBean.getSchAmount());
                }
            }
            long total = Long.parseLong(backPageBean.getTotalPaise());

            long netAmt = total - deductAmt;
            String netTotal = Double.valueOf(netAmt + "").longValue() + "";
            String netTotalinWord = Numtowordconvertion.convertNumber((int) Double.parseDouble(netTotal));

            long netTotaUnder = Double.valueOf(netAmt + "").longValue() + 1;
            String netTotalinWordUnder = Numtowordconvertion.convertNumber((int) netTotaUnder);

            Font textFont = new Font(Font.FontFamily.TIMES_ROMAN, 8.4f, Font.NORMAL, BaseColor.BLACK);
            Font boldTextFont = new Font(Font.FontFamily.TIMES_ROMAN, 8.6f, Font.BOLD, BaseColor.BLACK);

            //1st parent table
            PdfPTable table = null;

            table = new PdfPTable(2);
            table.setWidths(new int[]{5, 7});
            table.setWidthPercentage(100);

            PdfPCell cell = null;

            //1st inner table under table1 for column1
            PdfPTable innertable = new PdfPTable(3);
            innertable.setWidths(new float[]{1.5f, 1.5f, 1});
            innertable.setWidthPercentage(100);

            PdfPCell innercell = null;

            innercell = new PdfPCell(new Phrase("Total column 8", textFont));
            innercell.setBorder(Rectangle.LEFT | Rectangle.TOP);
            innertable.addCell(innercell);
            innercell = new PdfPCell(new Phrase("", textFont));
            innercell.setBorder(Rectangle.NO_BORDER);
            innertable.addCell(innercell);

            innercell = new PdfPCell(new Phrase(backPageBean.getTotalPaise(), textFont));
            innercell.setBorder(Rectangle.LEFT | Rectangle.TOP | Rectangle.RIGHT);
            innercell.setHorizontalAlignment(Element.ALIGN_RIGHT);
            innertable.addCell(innercell);

            innercell = new PdfPCell(new Phrase("Deduct:Undisturbed pay as detailed below -", textFont));
            innercell.setColspan(2);
            innercell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
            innercell.setBorder(Rectangle.BOTTOM);
            innertable.addCell(innercell);

            innercell = new PdfPCell(new Phrase("", textFont));
            innercell.setBorder(Rectangle.LEFT | Rectangle.RIGHT | Rectangle.BOTTOM);
            innertable.addCell(innercell);

            innercell = new PdfPCell(new Phrase("", textFont));
            innercell.setColspan(2);
            innercell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
            //innercell.setFixedHeight(10);
            innertable.addCell(innercell);

            innercell = new PdfPCell(new Phrase("", textFont));
            innercell.setBorder(Rectangle.NO_BORDER);
            innertable.addCell(innercell);

            if (empList != null && empList.size() > 0) {
                Iterator itr = empList.iterator();
                while (itr.hasNext()) {
                    sc = (Schedule) itr.next();
                    innercell = new PdfPCell(new Phrase(sc.getScheduleName(), boldTextFont));
                    innercell.setBorder(Rectangle.LEFT);
                    innertable.addCell(innercell);
                    innercell = new PdfPCell(new Phrase("", boldTextFont));
                    innercell.setBorder(Rectangle.RIGHT);
                    innertable.addCell(innercell);
                    innercell = new PdfPCell(new Phrase(sc.getSchAmount(), boldTextFont));
                    innercell.setBorder(Rectangle.RIGHT);
                    innercell.setHorizontalAlignment(Element.ALIGN_RIGHT);
                    innertable.addCell(innercell);
                }
            }

            innercell = new PdfPCell(new Phrase("In respect of subscribers to the sterling Branch it"
                    + " should be noted on the bill and in the Fund Schedule"
                    + " attached to the bill that the recoveries related to the"
                    + " Sterling Brancehes.", textFont));
            innercell.setColspan(2);
            innercell.setBorder(Rectangle.TOP | Rectangle.LEFT | Rectangle.RIGHT);
            innertable.addCell(innercell);
            innercell = new PdfPCell(new Phrase("", textFont));
            innercell.setBorder(Rectangle.TOP | Rectangle.RIGHT);
            innertable.addCell(innercell);

            innercell = new PdfPCell(new Phrase("Total deduction:", textFont));
            innercell.setColspan(2);
            innercell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
            innercell.setHorizontalAlignment(Element.ALIGN_RIGHT);
            innertable.addCell(innercell);
            innercell = new PdfPCell(new Phrase(deductAmt + "", textFont));
            innercell.setBorder(Rectangle.BOTTOM);
            innercell.setHorizontalAlignment(Element.ALIGN_RIGHT);
            innertable.addCell(innercell);

            innercell = new PdfPCell(new Phrase("The amount required for payment (in words)", textFont));
            innercell.setColspan(2);
            innercell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
            innertable.addCell(innercell);
            innercell = new PdfPCell(new Phrase(netTotal + "", boldTextFont));
            innercell.setBorder(Rectangle.BOTTOM);
            innercell.setHorizontalAlignment(Element.ALIGN_RIGHT);
            innertable.addCell(innercell);

            innercell = new PdfPCell(new Phrase(netTotalinWord, boldTextFont));
            innercell.setColspan(3);
            innercell.setFixedHeight(20);
            innercell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
            innercell.setHorizontalAlignment(Element.ALIGN_CENTER);
            innertable.addCell(innercell);

            innercell = new PdfPCell(new Phrase("DETAIL OF PAY OF ABSENTEES REFUNDED", textFont));
            innercell.setColspan(3);
            innercell.setBorder(Rectangle.LEFT | Rectangle.BOTTOM);
            innercell.setHorizontalAlignment(Element.ALIGN_CENTER);
            innertable.addCell(innercell);

            //2nd inner table under 1st inner table under table1 for column1
            PdfPTable innertable2 = new PdfPTable(4);
            innertable2.setWidths(new float[]{1.5f, 1.5f, 1, 1});
            innertable2.setWidthPercentage(100);

            PdfPCell innercell2 = null;

            innercell2 = new PdfPCell(new Phrase("Traction of\nEstablishment", textFont));
            innercell2.setBorder(Rectangle.LEFT | Rectangle.BOTTOM);
            innertable2.addCell(innercell2);
            innercell2 = new PdfPCell(new Phrase("Name of\nincumbent", textFont));
            innercell2.setBorder(Rectangle.LEFT | Rectangle.BOTTOM);
            innertable2.addCell(innercell2);
            innercell2 = new PdfPCell(new Phrase("Period", textFont));
            innercell2.setBorder(Rectangle.LEFT | Rectangle.BOTTOM);
            innertable2.addCell(innercell2);
            innercell2 = new PdfPCell(new Phrase("Amount", textFont));
            innercell2.setBorder(Rectangle.LEFT | Rectangle.BOTTOM);
            innertable2.addCell(innercell2);
            //end of 2nd inner table under 1st inner table under table1 for column1

            innercell = new PdfPCell(innertable2);
            innercell.setColspan(3);
            innertable.addCell(innercell);

            innercell = new PdfPCell(new Phrase("", textFont));
            innercell.setBorder(Rectangle.NO_BORDER);
            innertable.addCell(innercell);
            innercell = new PdfPCell(new Phrase("", textFont));
            innercell.setBorder(Rectangle.NO_BORDER);
            innertable.addCell(innercell);
            innercell = new PdfPCell(new Phrase("", textFont));
            innercell.setBorder(Rectangle.NO_BORDER);
            innertable.addCell(innercell);
            //end of 1st inner table under table1 for column1

            innercell = new PdfPCell(new Phrase("2ND DISCHARGE FOR\nRBI, PAD, BHUBANESWAR", textFont));
            innercell.setColspan(3);
            innercell.setBorder(Rectangle.NO_BORDER);
            innercell.setHorizontalAlignment(Element.ALIGN_CENTER);
            innertable.addCell(innercell);

            cell = new PdfPCell(innertable);
            //cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            //1st inner table under table1 for column2
            PdfPTable col2table = new PdfPTable(1);
            col2table.setWidths(new int[]{2});
            col2table.setWidthPercentage(100);

            PdfPCell col2cell = new PdfPCell();

            col2cell = new PdfPCell(new Phrase("1.Received contents and certificated that I have satisfied myself 1 month"
                    + " 2month / 3month that all emoluments included in bills drawn previous to this"
                    + " date which the exception of those detailed below (of which the total has been"
                    + " refunded by deduction from this bill) have been taken and filled in my office"
                    + " with receipt stamps duly cancelled for every payment in excess of Rs. 20."
                    + " ++One line to be used and the other scored out.\n\n2.Certificated that no person"
                    + " in superior service has been absent either on other duty or suspension or "
                    + " with or without leave (except on casual leave) during the month.\n\n", textFont));
            col2cell.setBorder(Rectangle.NO_BORDER);
            col2table.addCell(col2cell);

            col2cell = new PdfPCell(new Phrase("RECEIVED CONTENTS", textFont));
            col2cell.setBorder(Rectangle.NO_BORDER);
            col2table.addCell(col2cell);

            col2cell = new PdfPCell(new Phrase("\nNote-When an absentee statement accompanies the bill the second certificate should be struck out.", textFont));
            col2cell.setBorder(Rectangle.NO_BORDER);
            col2table.addCell(col2cell);

            col2cell = new PdfPCell(new Phrase("RECEIVED PAYMENTS", textFont));
            col2cell.setBorder(Rectangle.NO_BORDER);
            col2cell.setHorizontalAlignment(Rectangle.ALIGN_RIGHT);
            col2table.addCell(col2cell);

            col2cell = new PdfPCell(new Phrase("3.Certificated that no leave has been granted until by reference to the"
                    + " applicant's service book leave accounts and to the leave rule, applicable to"
                    + " him. I have satisfied myself that it was admissible, and that all grants of"
                    + " leave and departures on, and returns from leave and all periods of"
                    + " suspension and other duty and other events which are required under the"
                    + " rules to be so recorded have been recorded in the service books and leave"
                    + " ccounts under my attestation.", textFont));
            col2cell.setBorder(Rectangle.NO_BORDER);
            col2table.addCell(col2cell);

            col2cell = new PdfPCell(new Phrase("SIGNATURE ATTESTED", textFont));
            col2cell.setBorder(Rectangle.NO_BORDER);
            col2cell.setHorizontalAlignment(Rectangle.ALIGN_RIGHT);
            col2table.addCell(col2cell);

            col2cell = new PdfPCell(new Phrase("4.Certified that all appointments and substantive promotion and such of the"
                    + " officiating promotions as have to be entered in the service books as per"
                    + " columns in the standard from No. FR-10 have been entered in the service"
                    + " book of the persons concerned under my attestation.\n\n5.Certified that all Government servants whose names are omitted from but"
                    + " for whom pay has been drawn in the bill has actually been entertained during"
                    + " the month (S.R.35 Bihar and Orissa Account Code).\n\n6.Certified that no persons for whom house rent allowance has been drawn"
                    + " in this bill has been in occupation of rent - free Government quarters during"
                    + " the period for which the allowances has been drawn.\n\n7.Certified that except in the case of Government servant whose names"
                    + " appear in the appended list and in whose case the appropriate certificate"
                    + " required under S.T.R.55 (3) has been furnished on leave salary for any"
                    + " Government servants drawn in the bill is equal to his actual pay.\n\n8.Certified that no leave salary for end Government servants (except the"
                    + " following in whose service book noted regarding allocation has been"
                    + " recorded) drawn in this bill form is debitable to any Government. Etc. other"
                    + " than the Government of Orissa.\n1     4\n2     5\n3     6\n\n9. Certified that in respect of fixed traveling allowance claims drawn in the"
                    + " previous month, quarter, half-year or full year as the case may be the"
                    + " necessary journals have been examined to see that the Government"
                    + " servants concerned made the requisite tours and that in case where the"
                    + " requisite tours have not been made the necessary recoveries have been"
                    + " effected. The particulars of recoveries made or yet to be made are furnished"
                    + " below:-", textFont));
            col2cell.setBorder(Rectangle.NO_BORDER);
            col2table.addCell(col2cell);

            //2nd inner table under 1st inner table under table1 for column2
            PdfPTable col2innertable = new PdfPTable(3);
            col2innertable.setWidths(new float[]{0.7f, 0.7f, 3.2f});
            col2innertable.setWidthPercentage(100);
            PdfPCell col2innercell = null;
            col2innercell = new PdfPCell(new Phrase("Under Rs.", textFont));
            col2innercell.setBorder(Rectangle.NO_BORDER);
            col2innertable.addCell(col2innercell);
            col2innercell = new PdfPCell(new Phrase(netTotaUnder + "", boldTextFont));
            col2innercell.setBorder(Rectangle.NO_BORDER);
            col2innertable.addCell(col2innercell);
            col2innercell = new PdfPCell(new Phrase(netTotalinWordUnder, boldTextFont));
            col2innercell.setBorder(Rectangle.NO_BORDER);
            col2innertable.addCell(col2innercell);
            //end of 2nd inner table under 1st inner table under table1 for column2
            col2cell = new PdfPCell(col2innertable);
            col2table.addCell(col2cell);
            //end of 1st inner table under table1 for column2

            cell = new PdfPCell(col2table);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("", textFont));
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);
            cell = new PdfPCell(new Phrase("", textFont));
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            document.add(table);

            //2nd parent table
            table = new PdfPTable(2);
            table.setWidths(new int[]{5, 7});
            table.setWidthPercentage(100);

            cell = new PdfPCell(new Phrase("Pay ___________________ electronically to the account of the beneficiaries as per the "
                    + "list enclosed or to his Current Account, Suspense Head in case of unsuccessful payments.", textFont));
            //cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            //2nd inner table under 2nd parent table
            PdfPTable table2 = new PdfPTable(10);
            table2.setWidths(new float[]{0.5f, 0.8f, 0.8f, 2, 1, 1, 0.8f, 1, 1, 0.8f});
            table2.setWidthPercentage(100);

            PdfPCell cell2 = new PdfPCell(new Phrase("", textFont));
            cell2.setBorder(Rectangle.RIGHT);
            table2.addCell(cell2);
            cell2 = new PdfPCell(new Phrase("Name\nof the\nofficer", textFont));
            cell2.setBorder(Rectangle.RIGHT);
            table2.addCell(cell2);
            cell2 = new PdfPCell(new Phrase("Desig\nnation", textFont));
            cell2.setBorder(Rectangle.RIGHT);
            table2.addCell(cell2);
            cell2 = new PdfPCell(new Phrase("Period for\nwhich\nminimum tour\nis prescribed\nmonth,quarter,\nhalfyear, year", textFont));
            cell2.setBorder(Rectangle.RIGHT);
            table2.addCell(cell2);
            cell2 = new PdfPCell(new Phrase("Minimum\ntour\nrequired", textFont));
            cell2.setBorder(Rectangle.RIGHT);
            table2.addCell(cell2);
            cell2 = new PdfPCell(new Phrase("Short\nage\nin tour", textFont));
            cell2.setBorder(Rectangle.RIGHT);
            table2.addCell(cell2);
            cell2 = new PdfPCell(new Phrase("Amou\nnt\nrecov\nered", textFont));
            cell2.setBorder(Rectangle.RIGHT);
            table2.addCell(cell2);
            cell2 = new PdfPCell(new Phrase("Amou\nnt yet\ndue", textFont));
            cell2.setBorder(Rectangle.RIGHT);
            table2.addCell(cell2);
            cell2 = new PdfPCell(new Phrase("Date\nof\nrecov\nery", textFont));
            cell2.setBorder(Rectangle.RIGHT);
            table2.addCell(cell2);
            cell2 = new PdfPCell(new Phrase("Remar\nks", textFont));
            cell2.setBorder(Rectangle.RIGHT);
            table2.addCell(cell2);

            cell2 = new PdfPCell(new Phrase("", textFont));
            cell2.setFixedHeight(50);
            table2.addCell(cell2);
            cell2 = new PdfPCell(new Phrase("", textFont));
            table2.addCell(cell2);
            cell2 = new PdfPCell(new Phrase("", textFont));
            table2.addCell(cell2);
            cell2 = new PdfPCell(new Phrase("", textFont));
            table2.addCell(cell2);
            cell2 = new PdfPCell(new Phrase("", textFont));
            table2.addCell(cell2);
            cell2 = new PdfPCell(new Phrase("", textFont));
            table2.addCell(cell2);
            cell2 = new PdfPCell(new Phrase("", textFont));
            table2.addCell(cell2);
            cell2 = new PdfPCell(new Phrase("", textFont));
            //cell2.setBorder(Rectangle.RIGHT);
            table2.addCell(cell2);
            cell2 = new PdfPCell(new Phrase("", textFont));
            table2.addCell(cell2);
            cell2 = new PdfPCell(new Phrase("", textFont));
            table2.addCell(cell2);
            //end of 2nd inner table under 2nd parent table

            cell = new PdfPCell(table2);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("", textFont));
            cell.setColspan(2);
            cell.setFixedHeight(10);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            /*cell = new PdfPCell(new Phrase("Pay ___________________ electronically to the account of the beneficiaries as per the list enclosed or to his Current Account, Suspense Head in case of unsuccessful payments.",f1));
             cell.setBorder(Rectangle.NO_BORDER);
             table.addCell(cell);
             cell = new PdfPCell(new Phrase("",f1));
             cell.setBorder(Rectangle.NO_BORDER);
             table.addCell(cell);*/
            cell = new PdfPCell(new Phrase("Station Dated_____________20", textFont));
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);
            cell = new PdfPCell(new Phrase("", textFont));
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("", textFont));
            cell.setColspan(2);
            cell.setFixedHeight(10);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("Signature", textFont));
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);
            cell = new PdfPCell(new Phrase("", textFont));
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("Designation of Drawing Officer", textFont));
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);
            cell = new PdfPCell(new Phrase("", textFont));
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("", textFont));
            cell.setColspan(2);
            cell.setFixedHeight(10);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("Pay Rs.__________________________ Rupees_______________________________________________________________ as follows", textFont));
            cell.setColspan(2);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_LEFT);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("In cash Rs__________________________", textFont));
            cell.setColspan(2);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("Deduct - By transfer credit to personal deposits Rs __________________________", textFont));
            cell.setColspan(2);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("P.L.I Premia Rs __________________________", textFont));
            cell.setColspan(2);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("IV - Taxes on income Rs.__________________________", textFont));
            cell.setColspan(2);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("XXXIX - Civil Works Rs.__________________________", textFont));
            cell.setColspan(2);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            /*cell = new PdfPCell(new Phrase("",f1));
             cell.setColspan(2);
             cell.setFixedHeight(10);
             cell.setBorder(Rectangle.NO_BORDER);
             cell.setHorizontalAlignment(Element.ALIGN_CENTER);
             table.addCell(cell);*/
            cell = new PdfPCell(new Phrase("Examined and entered" + StringUtils.repeat(" ", 39) + "Dated...........................20" + StringUtils.repeat(" ", 45) + "Treasury Officer", textFont));
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setColspan(2);
            cell.setHorizontalAlignment(Element.ALIGN_LEFT);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("Treasury Accountant", textFont));
            cell.setColspan(2);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_LEFT);
            table.addCell(cell);

            document.add(table);

        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            DataBaseFunctions.closeSqlObjects(rs, pst);
            DataBaseFunctions.closeSqlObjects(con);
        }
    }

    @Override
    public int getBasicAmount(String billNo) {

        Connection con = null;

        PreparedStatement pst = null;
        ResultSet rs = null;

        int amt = 0;

        try {
            con = this.dataSource.getConnection();

            String sql = "SELECT SUM(CUR_BASIC) CUR_BASIC FROM AQ_MAST WHERE AQ_MAST.BILL_NO=?";
            pst = con.prepareStatement(sql);
            pst.setInt(1, Integer.parseInt(billNo));
            rs = pst.executeQuery();
            if (rs.next()) {
                amt = rs.getInt("CUR_BASIC");
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            DataBaseFunctions.closeSqlObjects(rs, pst);
            DataBaseFunctions.closeSqlObjects(con);
        }
        return amt;
    }

    @Override
    public int getAllowanceAndDeductionAmount(String billNo, String adType, int month, int year) {

        Connection con = null;

        PreparedStatement pst = null;
        ResultSet rs = null;

        int amt = 0;

        try {
            con = this.dataSource.getConnection();
            if (adType.equals("A")) {
                String sql = "SELECT SUM(AD_AMT) AD_AMT FROM (SELECT AQSL_NO FROM AQ_MAST WHERE BILL_NO=? AND AQ_MONTH=? AND AQ_YEAR=?) AQ_MAST"
                        + " INNER JOIN (SELECT AD_AMT,AQSL_NO FROM AQ_DTLS WHERE AD_TYPE=? AND AQ_MONTH=? AND AQ_YEAR=?) AQ_DTLS ON AQ_MAST.AQSL_NO=AQ_DTLS.AQSL_NO";
                pst = con.prepareStatement(sql);
                pst.setInt(1, Integer.parseInt(billNo));
                pst.setInt(2, month);
                pst.setInt(3, year);
                pst.setString(4, adType);
                pst.setInt(5, month);
                pst.setInt(6, year);
            } else if (adType.equals("D")) {
                String sql = "SELECT SUM(AD_AMT) AD_AMT FROM (SELECT AQSL_NO FROM AQ_MAST WHERE BILL_NO=? AND AQ_MONTH=? AND AQ_YEAR=?) AQ_MAST"
                        + " INNER JOIN (SELECT AD_AMT,AQSL_NO FROM AQ_DTLS WHERE AD_TYPE=? AND SCHEDULE!='PVTL' AND SCHEDULE !='PVTD' AND AQ_MONTH=? AND AQ_YEAR=?) AQ_DTLS ON AQ_MAST.AQSL_NO=AQ_DTLS.AQSL_NO";
                pst = con.prepareStatement(sql);
                pst.setInt(1, Integer.parseInt(billNo));
                pst.setInt(2, month);
                pst.setInt(3, year);
                pst.setString(4, adType);
                pst.setInt(5, month);
                pst.setInt(6, year);
            }
            rs = pst.executeQuery();
            if (rs.next()) {
                amt = rs.getInt("AD_AMT");
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            DataBaseFunctions.closeSqlObjects(rs, pst);
            DataBaseFunctions.closeSqlObjects(con);
        }
        return amt;
    }

    private void printPageSign(WrrScheduleBean wrrBean, PdfPTable signTable, PdfPCell signCell, Font f1) throws Exception {

        signCell = new PdfPCell(new Phrase("", f1));
        signCell.setBorder(Rectangle.NO_BORDER);
        signCell.setColspan(5);
        signTable.addCell(signCell);

        signCell = new PdfPCell(new Phrase("", f1));
        signCell.setBorder(Rectangle.NO_BORDER);
        signCell.setColspan(3);
        signTable.addCell(signCell);

        signCell = new PdfPCell(new Phrase(" Signature of D.D.O " + "\n" + wrrBean.getOfficeName(), f1));
        signCell.setBorder(Rectangle.NO_BORDER);
        signCell.setColspan(2);
        signCell.setHorizontalAlignment(Element.ALIGN_CENTER);
        signTable.addCell(signCell);

        signCell = new PdfPCell(new Phrase("", f1));
        signCell.setBorder(Rectangle.NO_BORDER);
        signCell.setColspan(3);
        signTable.addCell(signCell);

        signCell = new PdfPCell(new Phrase("Date", f1));
        signCell.setBorder(Rectangle.NO_BORDER);
        signCell.setColspan(2);
        signCell.setHorizontalAlignment(Element.ALIGN_CENTER);
        signTable.addCell(signCell);

    }

    private void printPageFooter(WrrScheduleBean wrrBean, PdfPTable dataTable, PdfPCell dataCell, Font f1, double totAmt) throws Exception {

        dataCell = new PdfPCell(new Phrase("", f1));
        dataCell.setColspan(5);
        dataCell.setBorder(Rectangle.BOTTOM);
        dataTable.addCell(dataCell);

        dataCell = new PdfPCell(new Phrase("TOTAL FOR THE MONTH OF " + wrrBean.getTxtMonth() + " - " + wrrBean.getTxtYear(), f1));
        dataCell.setBorder(Rectangle.BOTTOM);
        dataCell.setColspan(3);
        dataCell.setHorizontalAlignment(Element.ALIGN_LEFT);
        dataTable.addCell(dataCell);

        dataCell = new PdfPCell(new Phrase("     " + totAmt + "\n" + "Rupees ( " + Numtowordconvertion.convertNumber((int) totAmt) + ") Only", f1));
        dataCell.setBorder(Rectangle.BOTTOM);
        dataCell.setColspan(2);
        dataCell.setHorizontalAlignment(Element.ALIGN_LEFT);
        dataTable.addCell(dataCell);

        dataCell = new PdfPCell(new Phrase("", f1));
        dataCell.setBorder(Rectangle.NO_BORDER);
        dataCell.setColspan(3);
        dataTable.addCell(dataCell);

    }

    private void printBillDescription(WrrScheduleBean wrrBean, Document document) throws Exception {

        Font bigTextFont = new Font(Font.FontFamily.TIMES_ROMAN, 8.6f, Font.NORMAL, BaseColor.BLACK);
        Font boldTextFont = new Font(Font.FontFamily.TIMES_ROMAN, 8.6f, Font.BOLD, BaseColor.BLACK);

        PdfPTable hdr2Table = null;
        hdr2Table = new PdfPTable(3);
        hdr2Table.setWidths(new int[]{8, 20, 10});
        hdr2Table.setWidthPercentage(100);

        PdfPCell hdr2Cell = null;
        hdr2Cell = new PdfPCell(new Phrase("Name of the Department: ", bigTextFont));
        hdr2Cell.setBorder(Rectangle.NO_BORDER);
        hdr2Cell.setHorizontalAlignment(Element.ALIGN_LEFT);
        hdr2Table.addCell(hdr2Cell);

        hdr2Cell = new PdfPCell(new Phrase(wrrBean.getDeptName(), boldTextFont));
        hdr2Cell.setBorder(Rectangle.NO_BORDER);
        hdr2Cell.setHorizontalAlignment(Element.ALIGN_LEFT);
        hdr2Table.addCell(hdr2Cell);

        hdr2Cell = new PdfPCell(new Phrase(" ", bigTextFont));
        hdr2Cell.setBorder(Rectangle.NO_BORDER);
        hdr2Cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        hdr2Table.addCell(hdr2Cell);

        hdr2Cell = new PdfPCell(new Phrase("Name of the Office: ", bigTextFont));
        hdr2Cell.setBorder(Rectangle.NO_BORDER);
        hdr2Cell.setHorizontalAlignment(Element.ALIGN_LEFT);
        hdr2Table.addCell(hdr2Cell);

        hdr2Cell = new PdfPCell(new Phrase(wrrBean.getOfficeName(), boldTextFont));
        hdr2Cell.setBorder(Rectangle.NO_BORDER);
        hdr2Cell.setHorizontalAlignment(Element.ALIGN_LEFT);
        hdr2Table.addCell(hdr2Cell);

        hdr2Cell = new PdfPCell(new Phrase(" ", bigTextFont));
        hdr2Cell.setBorder(Rectangle.NO_BORDER);
        hdr2Cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        hdr2Table.addCell(hdr2Cell);

        hdr2Cell = new PdfPCell(new Phrase("Designation of DDO: ", bigTextFont));
        hdr2Cell.setBorder(Rectangle.NO_BORDER);
        hdr2Cell.setHorizontalAlignment(Element.ALIGN_LEFT);
        hdr2Table.addCell(hdr2Cell);

        hdr2Cell = new PdfPCell(new Phrase(wrrBean.getDdoDegn(), boldTextFont));
        hdr2Cell.setBorder(Rectangle.NO_BORDER);
        hdr2Cell.setHorizontalAlignment(Element.ALIGN_LEFT);
        hdr2Table.addCell(hdr2Cell);

        hdr2Cell = new PdfPCell(new Phrase(" ", bigTextFont));
        hdr2Cell.setBorder(Rectangle.NO_BORDER);
        hdr2Cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        hdr2Table.addCell(hdr2Cell);

        hdr2Cell = new PdfPCell(new Phrase("Bill No: ", bigTextFont));
        hdr2Cell.setBorder(Rectangle.NO_BORDER);
        hdr2Cell.setHorizontalAlignment(Element.ALIGN_LEFT);
        hdr2Table.addCell(hdr2Cell);

        hdr2Cell = new PdfPCell(new Phrase(wrrBean.getBillDesc(), boldTextFont));
        hdr2Cell.setBorder(Rectangle.NO_BORDER);
        hdr2Cell.setHorizontalAlignment(Element.ALIGN_LEFT);
        hdr2Table.addCell(hdr2Cell);

        hdr2Cell = new PdfPCell(new Phrase(" ", bigTextFont));
        hdr2Cell.setBorder(Rectangle.NO_BORDER);
        hdr2Cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        hdr2Table.addCell(hdr2Cell);

        document.add(hdr2Table);
    }

    private void printPageTotal(PdfPTable table, PdfPCell cell, Font f1, String pageTotal) throws Exception {

        cell = new PdfPCell(new Phrase(" * Page Total * :", f1));
        cell.setColspan(6);
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase(pageTotal + "", f1));
        cell.setBorder(Rectangle.NO_BORDER);
        cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase(StringUtils.repeat("-", 194), f1));
        cell.setColspan(7);
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);

    }

    private void printCarryForward(String pagetotal, PdfPTable table, PdfPCell cell, int pageno, Font f1) throws Exception {

        cell = new PdfPCell(new Phrase(StringUtils.repeat("-", 194), f1));
        cell.setColspan(7);
        cell.setBorder(Rectangle.NO_BORDER);

        cell = new PdfPCell(new Phrase("CARRIED FROM PAGE : " + pageno, f1));
        cell.setBorder(Rectangle.NO_BORDER);
        cell.setColspan(6);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase(pagetotal + "", f1));
        cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase(StringUtils.repeat("-", 194), f1));
        cell.setColspan(7);
        cell.setBorder(Rectangle.NO_BORDER);

        table.addCell(cell);
    }

    private void printPageNo(int pageNo, Document document) throws Exception {

        Font boldTextFont = new Font(Font.FontFamily.TIMES_ROMAN, 8.6f, Font.BOLD, BaseColor.BLACK);

        PdfPTable pageNoTable = null;
        pageNoTable = new PdfPTable(1);
        pageNoTable.setWidthPercentage(100);

        PdfPCell pageNoCell = null;
        pageNoCell = new PdfPCell(new Phrase("Page No :" + pageNo, boldTextFont));
        pageNoCell.setBorder(Rectangle.NO_BORDER);
        pageNoCell.setHorizontalAlignment(Element.ALIGN_RIGHT);
        pageNoTable.addCell(pageNoCell);

        document.add(pageNoTable);

    }

    @Override
    public void ITSchedulePagePDF(CommonReportParamBean crb, Document document, String schedule, String billNo, ItScheduleBean itBean, List empList) {

        double dedutAmt = 0.0;
        double totDedutAmt = 0.0;
        String totalFig = null;
        int slno = 0;
        int pageNo = 0;
        int total = 0;
        String empValue = "NA";
        try {

            ItScheduleBean obj = null;
            if (empList != null && empList.size() > 0) {
                obj = new ItScheduleBean();
                for (int i = 0; i < empList.size(); i++) {
                    obj = (ItScheduleBean) empList.get(i);
                    dedutAmt = Double.parseDouble(obj.getEmpDedutAmount());
                    totDedutAmt = totDedutAmt + dedutAmt;
                    totalFig = Numtowordconvertion.convertNumber((int) totDedutAmt);
                }
            }

            Font textFont = new Font(Font.FontFamily.TIMES_ROMAN, 8.4f, Font.NORMAL, BaseColor.BLACK);
            Font bigTextFont = new Font(Font.FontFamily.TIMES_ROMAN, 8.6f, Font.NORMAL, BaseColor.BLACK);
            Font boldTextFont = new Font(Font.FontFamily.TIMES_ROMAN, 8.6f, Font.BOLD, BaseColor.BLACK);
            Font hdrTextFont = new Font(Font.FontFamily.TIMES_ROMAN, 10f, Font.BOLD, BaseColor.BLACK);

            PdfPTable footerTable = new PdfPTable(5);
            footerTable.setWidths(new int[]{5, 10, 20, 10, 15});
            footerTable.setWidthPercentage(100);
            PdfPCell footerCell = null;

            // CREATING A BLANK TABLE WITH A BLANK CELL    
            PdfPTable blankTable = null;
            blankTable = new PdfPTable(1);
            blankTable.setWidthPercentage(100);

            PdfPCell blankCell = null;
            blankCell = new PdfPCell(new Phrase(" ", textFont));
            blankCell.setBorder(Rectangle.NO_BORDER);
            blankTable.addCell(blankCell);

            PdfPTable table = null;
            table = new PdfPTable(2);
            table.setWidths(new int[]{2, 5});
            table.setWidthPercentage(100);

            PdfPCell cell = null;
            cell = new PdfPCell(new Phrase(StringUtils.defaultString(itBean.getOfficeName()), hdrTextFont));
            cell.setColspan(2);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase(StringUtils.defaultString(itBean.getScheduleName()), hdrTextFont));
            cell.setColspan(2);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("MEMORANDUM INDICATING THE AMOUNTS CREDITABLE", hdrTextFont));
            cell.setColspan(2);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("TO CENTRAL AS SHOWN BELOW", hdrTextFont));
            cell.setColspan(2);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("FOR THE MONTH OF : " + itBean.getAqmonth() + "-" + itBean.getAqyear(), hdrTextFont));
            cell.setColspan(2);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("T.V No / Date : " + crb.getVchNo() + " / " + crb.getVchDate(), hdrTextFont));
            cell.setColspan(2);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("", hdrTextFont));
            cell.setColspan(2);
            cell.setFixedHeight(30);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("Bill No:   " + StringUtils.defaultString(itBean.getBillNo()), hdrTextFont));
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);
            cell = new PdfPCell(new Phrase(StringUtils.repeat(" ", 15) + "TAN No:  " + StringUtils.defaultString(itBean.getTanno()), hdrTextFont));
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            document.add(table);
            if (empList != null && empList.size() > 0) {

                table = new PdfPTable(5);
                table.setWidths(new float[]{0.5f, 4, 1, 1, 1});
                table.setWidthPercentage(100);

                Iterator itr = empList.iterator();
                ItScheduleBean itsbean = null;
                while (itr.hasNext()) {
                    itsbean = (ItScheduleBean) itr.next();

                    empValue = itsbean.getEmpname();

                    if (empValue != null && !empValue.equals("")) {
                        slno++;
                        if (pageNo == 0) {
                            pageNo++;
                            printHeader(table, cell, pageNo, hdrTextFont, schedule, itBean.getBtId());
                        }
                        total = total + Integer.parseInt(itsbean.getEmpDedutAmount());

                        //1st row inside while
                        cell = new PdfPCell(new Phrase(slno + "", textFont));
                        cell.setBorder(Rectangle.NO_BORDER);
                        table.addCell(cell);

                        cell = new PdfPCell(new Phrase(itsbean.getEmpname(), textFont));
                        cell.setBorder(Rectangle.NO_BORDER);
                        table.addCell(cell);

                        if (schedule.equalsIgnoreCase("IT")) {
                            cell = new PdfPCell(new Phrase(itsbean.getEmpPanNo(), textFont));
                            cell.setBorder(Rectangle.NO_BORDER);
                            table.addCell(cell);
                        } else {
                            cell = new PdfPCell();
                            cell.setBorder(Rectangle.NO_BORDER);
                            table.addCell(cell);
                        }
                        cell = new PdfPCell(new Phrase(itsbean.getEmpBasicSal() + StringUtils.repeat(" ", 10), textFont));
                        cell.setBorder(Rectangle.NO_BORDER);
                        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                        table.addCell(cell);

                        cell = new PdfPCell(new Phrase(itsbean.getEmpDedutAmount() + StringUtils.repeat(" ", 10), textFont));
                        cell.setBorder(Rectangle.NO_BORDER);
                        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                        table.addCell(cell);

                        //2nd row inside while
                        cell = new PdfPCell(new Phrase("", textFont));
                        cell.setBorder(Rectangle.BOTTOM);
                        table.addCell(cell);

                        if (schedule.equalsIgnoreCase("IT")) {
                            cell = new PdfPCell(new Phrase(itsbean.getEmpdesg(), textFont));
                            cell.setColspan(4);
                            cell.setBorder(Rectangle.BOTTOM);
                            table.addCell(cell);
                        } else {
                            cell = new PdfPCell(new Phrase(itsbean.getEmpdesg(), textFont));
                            cell.setColspan(3);
                            cell.setBorder(Rectangle.BOTTOM);
                            table.addCell(cell);

                            cell = new PdfPCell();
                            cell.setBorder(Rectangle.BOTTOM);
                            table.addCell(cell);
                        }

                        if (slno % 17 == 0) {

                            printTotal(table, cell, total, boldTextFont, schedule, itBean.getDdoDegn(), pageNo);
                            document.add(table);
                            document.newPage();

                            table = new PdfPTable(5);
                            table.setWidths(new float[]{0.5f, 4f, 1, 1, 1});
                            table.setWidthPercentage(100);

                            pageNo++;
                            printHeader(table, cell, pageNo, hdrTextFont, schedule, itBean.getBtId());

                        }
                        if (slno == empList.size()) {
                            printTotal(table, cell, total, boldTextFont, schedule, itBean.getDdoDegn(), pageNo);
                            document.add(table);
                        }

                    } else {

                        printHeader(table, cell, pageNo, hdrTextFont, schedule, itBean.getBtId());
                        cell = new PdfPCell(new Phrase(" There is no record ", bigTextFont));
                        cell.setBorder(Rectangle.BOTTOM);
                        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                        cell.setColspan(5);
                        table.addCell(cell);
                        document.add(table);
                    }
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void printHeader(PdfPTable table, PdfPCell cell, int pageNo, Font f1, String schedule, String btId) throws Exception {

        if (pageNo == 1) {
            if (schedule.equalsIgnoreCase("IT")) {
                cell = new PdfPCell(new Phrase(StringUtils.defaultString(btId) + " - INCOME TAX DEDUCTION", f1));
                cell.setColspan(5);
                cell.setBorder(Rectangle.NO_BORDER);
                table.addCell(cell);

            } else if (schedule.equalsIgnoreCase("CGEGIS")) {
                cell = new PdfPCell(new Phrase(StringUtils.defaultString(btId) + " - CGEGIS TAX DEDUCTION", f1));
                cell.setColspan(5);
                cell.setBorder(Rectangle.NO_BORDER);
                //cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                table.addCell(cell);

            } else if (schedule.equalsIgnoreCase("GIS")) {
                cell = new PdfPCell(new Phrase(StringUtils.defaultString(btId) + " - GIS TAX DEDUCTION", f1));
                cell.setColspan(5);
                cell.setBorder(Rectangle.NO_BORDER);
                //cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                table.addCell(cell);
            }
        }

        if (schedule.equalsIgnoreCase("IT")) {
            cell = new PdfPCell();
            cell.setColspan(5);
            cell.setFixedHeight(20);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("Sl No", f1));
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("Name and Designation of Employee", f1));
            cell.setBorder(Rectangle.BOX);
            cell.setHorizontalAlignment(Element.ALIGN_LEFT);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("PAN NO", f1));
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            cell.setBorder(Rectangle.BOX);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("Gross Salary", f1));
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("Deduction", f1));
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

        } else {
            cell = new PdfPCell();
            cell.setColspan(5);
            cell.setFixedHeight(20);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("Sl No", f1));
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("Name and Designation of Employee", f1));
            cell.setBorder(Rectangle.BOX);
            cell.setColspan(2);
            cell.setHorizontalAlignment(Element.ALIGN_LEFT);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("Gross Salary", f1));
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("Deduction", f1));
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

        }

        cell = new PdfPCell();
        cell.setColspan(5);
        cell.setFixedHeight(10);
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);
    }

    private void printTotal(PdfPTable table, PdfPCell cell, String ddoname, int total, Font f1) throws Exception {

        cell = new PdfPCell(new Phrase(StringUtils.repeat("-", 173), f1));
        cell.setColspan(4);
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("* Total * :", f1));
        cell.setColspan(2);
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);
        cell = new PdfPCell();
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);
        cell = new PdfPCell(new Phrase(total + "", f1));
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase(StringUtils.repeat("-", 173), f1));
        cell.setColspan(4);
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase(StringUtils.defaultString(ddoname), f1));
        cell.setColspan(4);
        cell.setBorder(Rectangle.NO_BORDER);
        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(cell);

    }

    private void printTotal(PdfPTable table, PdfPCell cell, int total, Font f1, String schedule, String ddoname, int pageno) {

        cell = new PdfPCell(new Phrase(StringUtils.repeat("-", 181), f1));
        cell.setColspan(5);
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("* Grand Total * :", f1));
        cell.setColspan(4);
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);
        cell = new PdfPCell(new Phrase(total + "", f1));
        cell.setBorder(Rectangle.NO_BORDER);
        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase(StringUtils.repeat("-", 181), f1));
        cell.setColspan(5);
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);

        if (total > 0) {
            cell = new PdfPCell(new Phrase("In Words(RUPEES " + StringUtils.upperCase(Numtowordconvertion.convertNumber(total) + ") ONLY"), f1));
            cell.setColspan(5);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            cell = new PdfPCell();
            cell.setColspan(5);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);
        }

        cell = new PdfPCell();
        cell.setColspan(5);
        cell.setFixedHeight(20);
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);

        cell = new PdfPCell();
        cell.setColspan(2);
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);
        cell = new PdfPCell(new Phrase("Designation of the Drawing Officer:", f1));
        cell.setColspan(3);
        cell.setBorder(Rectangle.NO_BORDER);
        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(cell);

        cell = new PdfPCell();
        cell.setColspan(2);
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);
        cell = new PdfPCell(new Phrase(StringUtils.defaultString(ddoname), f1));
        cell.setColspan(3);
        cell.setBorder(Rectangle.NO_BORDER);
        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(cell);

        cell = new PdfPCell();
        cell.setColspan(5);
        cell.setFixedHeight(10);
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("Page: " + StringUtils.defaultString(pageno + ""), f1));
        cell.setColspan(5);
        cell.setBorder(Rectangle.NO_BORDER);
        cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
        table.addCell(cell);

    }

    @Override
    public void PTSchedulePagePDF(CommonReportParamBean crb, Document document, String billNo, PtScheduleBean ptBean, List empList, int aqMonth, int aqYear) {

        int slNo = 0;
        int pageNo = 0;
        int pageTotal = 0;

        try {

            Font textFont = new Font(Font.FontFamily.TIMES_ROMAN, 8.4f, Font.NORMAL, BaseColor.BLACK);
            Font bigTextFont = new Font(Font.FontFamily.TIMES_ROMAN, 8.6f, Font.NORMAL, BaseColor.BLACK);
            Font boldTextFont = new Font(Font.FontFamily.TIMES_ROMAN, 8.6f, Font.BOLD, BaseColor.BLACK);
            Font hdrTextFont = new Font(Font.FontFamily.TIMES_ROMAN, 10f, Font.BOLD, BaseColor.BLACK);

            // CREATING A BLANK TABLE WITH A BLANK CELL    
            PdfPTable blankTable = null;
            blankTable = new PdfPTable(1);
            blankTable.setWidthPercentage(100);

            PdfPCell blankCell = null;
            blankCell = new PdfPCell(new Phrase(" ", textFont));
            blankCell.setBorder(Rectangle.NO_BORDER);
            blankTable.addCell(blankCell);

            PdfPTable table = null;
            table = new PdfPTable(6);
            table.setWidths(new int[]{4, 15, 15, 9, 9, 8});
            table.setWidthPercentage(100);

            PdfPCell cell = null;

            if (empList != null && empList.size() > 0) {
                Iterator itr = empList.iterator();
                PtScheduleBean ptbean = null;
                while (itr.hasNext()) {
                    ptbean = (PtScheduleBean) itr.next();
                    slNo++;
                    if (pageNo == 0) {
                        table = new PdfPTable(6);
                        table.setWidths(new int[]{4, 18, 15, 8, 8, 7});
                        table.setWidthPercentage(100);
                        pageNo++;
                        printPTHeader(crb, ptBean, table, cell, pageNo, hdrTextFont);
                        printPtBillDescription(ptBean, table, cell);
                    }
                    pageTotal = pageTotal + Integer.parseInt(ptbean.getEmpTaxOnProffesion());
                    String totGross = ptbean.getTotalGross();

                    //1st row inside while
                    cell = new PdfPCell(new Paragraph(slNo + "", textFont));
                    cell.setBorder(Rectangle.NO_BORDER);
                    table.addCell(cell);

                    cell = new PdfPCell(new Phrase(ptbean.getEmpname(), textFont));
                    cell.setBorder(Rectangle.NO_BORDER);
                    table.addCell(cell);

                    cell = new PdfPCell(new Phrase(ptbean.getEmpdesg(), textFont));
                    cell.setBorder(Rectangle.NO_BORDER);
                    table.addCell(cell);

                    cell = new PdfPCell(new Phrase(ptbean.getEmpGrossSal(), textFont));
                    cell.setBorder(Rectangle.NO_BORDER);
                    cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                    table.addCell(cell);

                    cell = new PdfPCell(new Phrase(ptbean.getEmpTaxOnProffesion(), textFont));
                    cell.setBorder(Rectangle.NO_BORDER);
                    cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                    table.addCell(cell);

                    cell = new PdfPCell(new Phrase("", textFont));
                    cell.setBorder(Rectangle.NO_BORDER);
                    table.addCell(cell);

                    if (slNo % 30 == 0) {
                        printPageTotalPT(table, cell, boldTextFont, String.valueOf(pageTotal), totGross);
                        document.add(table);
                        document.newPage();

                        table = new PdfPTable(6);
                        table.setWidths(new int[]{4, 18, 15, 8, 8, 7});
                        table.setWidthPercentage(100);

                        pageNo++;
                        printPageNo(pageNo, document);
                        printPtBillDescription(ptBean, table, cell);
                    }
                    if (slNo == empList.size()) {
                        printPageFooterPT(ptBean, table, cell, pageTotal, totGross);
                        document.add(table);
                    }
                }
            }
            if (empList.size() == 0 || empList == null) {
                printPTHeader(crb, ptBean, table, cell, pageNo, hdrTextFont);
                document.add(table);
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void printPageTotalPT(PdfPTable table, PdfPCell cell, Font f1, String pageTotal, String pageGross) throws Exception {

        cell = new PdfPCell(new Phrase(StringUtils.repeat("-", 180), f1));
        cell.setColspan(6);
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase(" * Page Total * :", f1));
        cell.setColspan(3);
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase(pageGross, f1));
        cell.setBorder(Rectangle.NO_BORDER);
        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase(pageTotal + "", f1));
        cell.setBorder(Rectangle.NO_BORDER);
        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("", f1));
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase(StringUtils.repeat("-", 180), f1));
        cell.setColspan(6);
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);

    }

    private void printPTHeader(CommonReportParamBean crb, PtScheduleBean ptbean, PdfPTable table, PdfPCell cell, int pageno, Font f1) throws Exception {

        cell = new PdfPCell(new Paragraph("Page : " + pageno, f1));
        cell.setColspan(6);
        cell.setBorder(Rectangle.NO_BORDER);
        cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
        table.addCell(cell);

        cell = new PdfPCell(new Paragraph("", f1));
        cell.setColspan(6);
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);

        cell = new PdfPCell(new Paragraph(" SCHEDULE OF RECOVERY OF TAX ON PROFESSION ", f1));
        cell.setColspan(6);
        cell.setBorder(Rectangle.NO_BORDER);
        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(cell);

        cell = new PdfPCell(new Paragraph(" FOR THE MONTH OF " + ptbean.getMonthYear(), f1));
        cell.setColspan(6);
        cell.setBorder(Rectangle.NO_BORDER);
        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(cell);

        cell = new PdfPCell(new Paragraph("T.V No / Date: " + crb.getVchNo() + " / " + crb.getVchDate(), f1));
        cell.setColspan(6);
        cell.setBorder(Rectangle.NO_BORDER);
        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(cell);

        cell = new PdfPCell(new Paragraph(" DEMAND NO.- 0028-OTHER TAXES ON INCOME AND EXPENDITURE - 107 - TAXES ON ", f1));
        cell.setColspan(6);
        cell.setBorder(Rectangle.NO_BORDER);
        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(cell);

        cell = new PdfPCell(new Paragraph(" PROFESSION TRADES,CALLING AND EMPLOYMENT-9913780-TAXES ON PROFESSION ", f1));
        cell.setColspan(6);
        cell.setBorder(Rectangle.NO_BORDER);
        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(cell);

        cell = new PdfPCell(new Paragraph(" **********-*-********** ", f1));
        cell.setColspan(6);
        cell.setBorder(Rectangle.NO_BORDER);
        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(cell);

    }

    private void printPtBillDescription(PtScheduleBean ptBean, PdfPTable hdr2Table, PdfPCell hdr2Cell) throws Exception {

        Font bigTextFont = new Font(Font.FontFamily.TIMES_ROMAN, 8.6f, Font.NORMAL, BaseColor.BLACK);
        Font boldTextFont = new Font(Font.FontFamily.TIMES_ROMAN, 8.6f, Font.BOLD, BaseColor.BLACK);

        hdr2Cell = new PdfPCell(new Phrase("Name of the Department: ", bigTextFont));
        hdr2Cell.setColspan(2);
        hdr2Cell.setBorder(Rectangle.NO_BORDER);
        hdr2Cell.setHorizontalAlignment(Element.ALIGN_LEFT);
        hdr2Table.addCell(hdr2Cell);

        hdr2Cell = new PdfPCell(new Phrase(ptBean.getDeptName(), boldTextFont));
        hdr2Cell.setColspan(3);
        hdr2Cell.setBorder(Rectangle.NO_BORDER);
        hdr2Cell.setHorizontalAlignment(Element.ALIGN_LEFT);
        hdr2Table.addCell(hdr2Cell);

        hdr2Cell = new PdfPCell(new Phrase(" ", bigTextFont));
        hdr2Cell.setBorder(Rectangle.NO_BORDER);
        hdr2Cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        hdr2Table.addCell(hdr2Cell);

        hdr2Cell = new PdfPCell(new Phrase("Name of the Office: ", bigTextFont));
        hdr2Cell.setColspan(2);
        hdr2Cell.setBorder(Rectangle.NO_BORDER);
        hdr2Cell.setHorizontalAlignment(Element.ALIGN_LEFT);
        hdr2Table.addCell(hdr2Cell);

        hdr2Cell = new PdfPCell(new Phrase(ptBean.getOfficeName(), boldTextFont));
        hdr2Cell.setColspan(3);
        hdr2Cell.setBorder(Rectangle.NO_BORDER);
        hdr2Cell.setHorizontalAlignment(Element.ALIGN_LEFT);
        hdr2Table.addCell(hdr2Cell);

        hdr2Cell = new PdfPCell(new Phrase(" ", bigTextFont));
        hdr2Cell.setBorder(Rectangle.NO_BORDER);
        hdr2Cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        hdr2Table.addCell(hdr2Cell);

        hdr2Cell = new PdfPCell(new Phrase("Designation of DDO: ", bigTextFont));
        hdr2Cell.setColspan(2);
        hdr2Cell.setBorder(Rectangle.NO_BORDER);
        hdr2Cell.setHorizontalAlignment(Element.ALIGN_LEFT);
        hdr2Table.addCell(hdr2Cell);

        hdr2Cell = new PdfPCell(new Phrase(ptBean.getDdoDegn(), boldTextFont));
        hdr2Cell.setColspan(3);
        hdr2Cell.setBorder(Rectangle.NO_BORDER);
        hdr2Cell.setHorizontalAlignment(Element.ALIGN_LEFT);
        hdr2Table.addCell(hdr2Cell);

        hdr2Cell = new PdfPCell(new Phrase(" ", bigTextFont));
        hdr2Cell.setBorder(Rectangle.NO_BORDER);
        hdr2Cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        hdr2Table.addCell(hdr2Cell);

        hdr2Cell = new PdfPCell(new Phrase("Bill No: ", bigTextFont));
        hdr2Cell.setColspan(2);
        hdr2Cell.setBorder(Rectangle.NO_BORDER);
        hdr2Cell.setHorizontalAlignment(Element.ALIGN_LEFT);
        hdr2Table.addCell(hdr2Cell);

        hdr2Cell = new PdfPCell(new Phrase(ptBean.getBillDesc(), boldTextFont));
        hdr2Cell.setColspan(3);
        hdr2Cell.setBorder(Rectangle.NO_BORDER);
        hdr2Cell.setHorizontalAlignment(Element.ALIGN_LEFT);
        hdr2Table.addCell(hdr2Cell);

        hdr2Cell = new PdfPCell(new Phrase(" ", bigTextFont));
        hdr2Cell.setBorder(Rectangle.NO_BORDER);
        hdr2Cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        hdr2Table.addCell(hdr2Cell);

        hdr2Cell = new PdfPCell(new Phrase(" ", bigTextFont));
        hdr2Cell.setColspan(6);
        hdr2Cell.setBorder(Rectangle.NO_BORDER);
        hdr2Cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        hdr2Table.addCell(hdr2Cell);

        hdr2Cell = new PdfPCell(new Phrase(StringUtils.repeat("-", 180), bigTextFont));
        hdr2Cell.setColspan(6);
        hdr2Cell.setBorder(Rectangle.NO_BORDER);
        hdr2Cell.setHorizontalAlignment(Element.ALIGN_LEFT);
        hdr2Table.addCell(hdr2Cell);

        hdr2Cell = new PdfPCell(new Phrase("Sl No", boldTextFont));
        hdr2Cell.setBorder(Rectangle.NO_BORDER);
        hdr2Cell.setHorizontalAlignment(Element.ALIGN_LEFT);
        hdr2Table.addCell(hdr2Cell);

        hdr2Cell = new PdfPCell(new Phrase("Name of the Employee", boldTextFont));
        hdr2Cell.setBorder(Rectangle.NO_BORDER);
        hdr2Cell.setHorizontalAlignment(Element.ALIGN_LEFT);
        hdr2Table.addCell(hdr2Cell);

        hdr2Cell = new PdfPCell(new Phrase("Designation", boldTextFont));
        hdr2Cell.setBorder(Rectangle.NO_BORDER);
        hdr2Cell.setHorizontalAlignment(Element.ALIGN_LEFT);
        hdr2Table.addCell(hdr2Cell);

        hdr2Cell = new PdfPCell(new Phrase("Gross Salary", boldTextFont));
        hdr2Cell.setBorder(Rectangle.NO_BORDER);
        hdr2Cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        hdr2Table.addCell(hdr2Cell);

        hdr2Cell = new PdfPCell(new Phrase("Tax on Profession", boldTextFont));
        hdr2Cell.setBorder(Rectangle.NO_BORDER);
        hdr2Cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        hdr2Table.addCell(hdr2Cell);

        hdr2Cell = new PdfPCell(new Phrase("Remark", boldTextFont));
        hdr2Cell.setBorder(Rectangle.NO_BORDER);
        hdr2Cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        hdr2Table.addCell(hdr2Cell);

        hdr2Cell = new PdfPCell(new Phrase(StringUtils.repeat("-", 180), bigTextFont));
        hdr2Cell.setColspan(6);
        hdr2Cell.setBorder(Rectangle.NO_BORDER);
        hdr2Table.addCell(hdr2Cell);
    }

    private void printPageFooterPT(PtScheduleBean ptbean, PdfPTable dataTable, PdfPCell dataCell, double totAmt, String totGross) throws Exception {

        Font textFont = new Font(Font.FontFamily.TIMES_ROMAN, 8.4f, Font.NORMAL, BaseColor.BLACK);
        Font bigTextFont = new Font(Font.FontFamily.TIMES_ROMAN, 8.6f, Font.NORMAL, BaseColor.BLACK);
        Font boldTextFont = new Font(Font.FontFamily.TIMES_ROMAN, 8.6f, Font.BOLD, BaseColor.BLACK);

        dataCell = new PdfPCell(new Phrase("", textFont));
        dataCell.setColspan(6);
        dataCell.setBorder(Rectangle.BOTTOM);
        dataTable.addCell(dataCell);

        dataCell = new PdfPCell(new Phrase("TOTAL FOR THE MONTH OF " + ptbean.getMonthYear(), textFont));
        dataCell.setBorder(Rectangle.BOTTOM);
        dataCell.setColspan(3);
        dataCell.setHorizontalAlignment(Element.ALIGN_LEFT);
        dataTable.addCell(dataCell);

        dataCell = new PdfPCell(new Phrase(totGross, boldTextFont));
        dataCell.setBorder(Rectangle.BOTTOM);
        dataCell.setHorizontalAlignment(Element.ALIGN_CENTER);
        dataTable.addCell(dataCell);

        dataCell = new PdfPCell(new Phrase("     " + totAmt + "\n" + "Rupees ( " + Numtowordconvertion.convertNumber((int) totAmt) + ") Only", boldTextFont));
        dataCell.setBorder(Rectangle.BOTTOM);
        dataCell.setColspan(2);
        dataCell.setHorizontalAlignment(Element.ALIGN_LEFT);
        dataTable.addCell(dataCell);

        dataCell = new PdfPCell(new Phrase(" ", textFont));
        dataCell.setColspan(6);
        dataCell.setBorder(Rectangle.NO_BORDER);
        dataCell.setHorizontalAlignment(Element.ALIGN_LEFT);
        dataTable.addCell(dataCell);

        dataCell = new PdfPCell(new Phrase("", bigTextFont));
        dataCell.setColspan(3);
        dataCell.setBorder(Rectangle.NO_BORDER);
        dataCell.setHorizontalAlignment(Element.ALIGN_RIGHT);
        dataTable.addCell(dataCell);

        dataCell = new PdfPCell(new Phrase("Signature of D.D.O.", bigTextFont));
        dataCell.setColspan(3);
        dataCell.setBorder(Rectangle.NO_BORDER);
        dataCell.setHorizontalAlignment(Element.ALIGN_CENTER);
        dataTable.addCell(dataCell);

        dataCell = new PdfPCell(new Phrase("", bigTextFont));
        dataCell.setColspan(2);
        dataCell.setBorder(Rectangle.NO_BORDER);
        dataTable.addCell(dataCell);

        dataCell = new PdfPCell(new Phrase(ptbean.getOfficeName(), textFont));
        dataCell.setColspan(4);
        dataCell.setBorder(Rectangle.NO_BORDER);
        dataCell.setHorizontalAlignment(Element.ALIGN_RIGHT);
        dataTable.addCell(dataCell);

        dataCell = new PdfPCell(new Phrase("", bigTextFont));
        dataCell.setColspan(4);
        dataCell.setBorder(Rectangle.NO_BORDER);
        dataCell.setHorizontalAlignment(Element.ALIGN_RIGHT);
        dataTable.addCell(dataCell);

        dataCell = new PdfPCell(new Phrase("Date :", textFont));
        dataCell.setColspan(2);
        dataCell.setBorder(Rectangle.NO_BORDER);
        dataCell.setHorizontalAlignment(Element.ALIGN_LEFT);
        dataTable.addCell(dataCell);

        dataCell = new PdfPCell(new Phrase("To be filled by the Treasury Officer/ Sub Treasury Officer/ Special Treasury Officer", textFont));
        dataCell.setColspan(6);
        dataCell.setBorder(Rectangle.NO_BORDER);
        dataCell.setHorizontalAlignment(Element.ALIGN_LEFT);
        dataTable.addCell(dataCell);

        dataCell = new PdfPCell(new Phrase("a. 	T.V. No. _____________ and Date ____________ of encashment of Bill", textFont));
        dataCell.setColspan(6);
        dataCell.setBorder(Rectangle.NO_BORDER);
        dataCell.setHorizontalAlignment(Element.ALIGN_LEFT);
        dataTable.addCell(dataCell);

        dataCell = new PdfPCell(new Phrase("b. 	Sl. No. _____________ and Date ____________ of the receipt Schedule in which accounted by Transfer Credit.", textFont));
        dataCell.setColspan(6);
        dataCell.setBorder(Rectangle.NO_BORDER);
        dataCell.setHorizontalAlignment(Element.ALIGN_LEFT);
        dataTable.addCell(dataCell);

    }

    @Override
    public List getHCScheduleEmpList(String billNo, int year, int month) {

        Connection con = null;

        PreparedStatement pst = null;
        ResultSet rs = null;

        List emplist = new ArrayList();

        HCScheduleBean bean = null;
        try {
            con = this.dataSource.getConnection();

            String sql = "select aq_mast.emp_code,emp_name,cur_desg,cur_basic,ad_amt,id_no,aq_mast.aqsl_no from aq_mast"
                    + " inner join aq_dtls on aq_mast.aqsl_no=aq_dtls.aqsl_no"
                    + " inner join bill_mast on aq_mast.bill_no=bill_mast.bill_no"
                    + " left outer join (select ID_NO,EMP_ID from EMP_ID_DOC where ID_DESCRIPTION='PAN')EMP_ID_DOC on aq_mast.emp_code=EMP_ID_DOC.emp_id where bill_mast.bill_no=? and aq_mast.aq_year=" + year + " and aq_mast.aq_month=" + month + " and AQ_DTLS.SCHEDULE='HC' AND AQ_DTLS.AD_TYPE='D' AND AD_AMT > 0";
            pst = con.prepareStatement(sql);
            pst.setInt(1, Integer.parseInt(billNo));
            rs = pst.executeQuery();
            while (rs.next()) {
                bean = new HCScheduleBean();
                bean.setEmpCode(rs.getString("emp_code"));
                bean.setEmpName(rs.getString("emp_name"));
                bean.setDesg(rs.getString("cur_desg"));
                bean.setBasic(rs.getString("cur_basic"));
                bean.setAmt(rs.getString("ad_amt"));
                bean.setIdNumber(rs.getString("id_no"));
                emplist.add(bean);
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            DataBaseFunctions.closeSqlObjects(rs, pst);
            DataBaseFunctions.closeSqlObjects(con);
        }
        return emplist;
    }

    @Override
    public void LoanSchedulePagePDF(CommonReportParamBean crb, Document document, String schedule, String billNo, LoanAdvanceScheduleBean laBean, List priList, List intList) {

        int slno = 0;
        int pageNo = 0;
        double tot = 0;
        double totalP = 0.0;
        LoanAdvanceScheduleBean laBeanP = null;
        try {

            Font textFont = new Font(Font.FontFamily.TIMES_ROMAN, 8.4f, Font.NORMAL, BaseColor.BLACK);
            Font bigTextFont = new Font(Font.FontFamily.TIMES_ROMAN, 8.6f, Font.NORMAL, BaseColor.BLACK);
            Font boldTextFont = new Font(Font.FontFamily.TIMES_ROMAN, 8.6f, Font.BOLD, BaseColor.BLACK);

            // CREATING A BLANK TABLE WITH A BLANK CELL    
            PdfPTable blankTable = null;
            blankTable = new PdfPTable(1);
            blankTable.setWidthPercentage(100);

            PdfPCell blankCell = null;
            blankCell = new PdfPCell(new Phrase(" ", textFont));
            blankCell.setBorder(Rectangle.NO_BORDER);
            blankTable.addCell(blankCell);

            PdfPTable table = null;
            table = new PdfPTable(9);
            table.setWidths(new int[]{3, 15, 8, 6, 8, 6, 6, 7, 6});
            table.setWidthPercentage(100);

            PdfPCell cell = null;

            if (priList != null && priList.size() > 0) {
                String loanName = "PRINCIPAL";
                Iterator itr = priList.iterator();
                while (itr.hasNext()) {
                    laBeanP = (LoanAdvanceScheduleBean) itr.next();
                    slno++;
                    if (pageNo == 0) {

                        table = new PdfPTable(9);
                        table.setWidths(new int[]{3, 15, 8, 6, 8, 6, 6, 7, 6});
                        table.setWidthPercentage(100);
                        pageNo++;
                        printHeaderforPrincipal(crb, table, cell, schedule, laBean, loanName, pageNo);
                    }
                    tot = tot + laBeanP.getDecutedAmt();
                    totalP = laBeanP.getTotal();

                    if (laBeanP.getSlno() > 0) {
                        cell = new PdfPCell(new Phrase(laBeanP.getSlno() + "", textFont));
                    } else {
                        cell = new PdfPCell(new Phrase("", textFont));
                    }
                    cell.setBorder(Rectangle.BOTTOM);
                    cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                    cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
                    table.addCell(cell);

                    cell = new PdfPCell(new Phrase(laBeanP.getEmpNameDesg(), textFont));
                    cell.setFixedHeight(30);
                    cell.setBorder(Rectangle.BOTTOM);
                    cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
                    table.addCell(cell);

                    cell = new PdfPCell(new Phrase(laBeanP.getVchNo() + " / " + laBeanP.getVchDate(), textFont));
                    cell.setBorder(Rectangle.BOTTOM);
                    cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
                    cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
                    table.addCell(cell);

                    cell = new PdfPCell(new Phrase(laBeanP.getOriginalAmt() + "", textFont));
                    cell.setBorder(Rectangle.BOTTOM);
                    cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
                    cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
                    table.addCell(cell);

                    cell = new PdfPCell(new Phrase(laBeanP.getInstalmentRec() + "", textFont));
                    cell.setBorder(Rectangle.BOTTOM);
                    cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
                    cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
                    table.addCell(cell);

                    cell = new PdfPCell(new Phrase(laBeanP.getDecutedAmt() + "", textFont));
                    cell.setBorder(Rectangle.BOTTOM);
                    cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
                    cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
                    table.addCell(cell);

                    cell = new PdfPCell(new Phrase(laBeanP.getRecAmt() + "", textFont));
                    cell.setBorder(Rectangle.BOTTOM);
                    cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
                    cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
                    table.addCell(cell);

                    cell = new PdfPCell(new Phrase(laBeanP.getBalOutstanding() + "", textFont));
                    cell.setBorder(Rectangle.BOTTOM);
                    cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
                    cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
                    table.addCell(cell);

                    cell = new PdfPCell(new Phrase(laBeanP.getGpfNo() + "", textFont));
                    cell.setBorder(Rectangle.BOTTOM);
                    cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                    cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
                    table.addCell(cell);

                    if (slno % 13 == 0) {
                        printPageFooterforPrincipal(laBean, table, cell, tot);
                        document.add(table);
                        document.newPage();

                        table = new PdfPTable(9);
                        table.setWidths(new int[]{3, 15, 8, 6, 8, 6, 6, 7, 6});
                        table.setWidthPercentage(100);

                        pageNo++;
                        printHeaderforPrincipal(crb, table, cell, schedule, laBean, loanName, pageNo);
                        printCarryForwardforPrincipal(table, cell, tot, pageNo - 1, boldTextFont);
                    }
                    if (slno == priList.size()) {
                        printGrandTotalforPrincipal(laBean, table, cell, tot, boldTextFont);
                        document.add(table);
                        document.newPage();

                        table = new PdfPTable(9);
                        table.setWidths(new int[]{3, 15, 8, 6, 8, 6, 6, 7, 6});
                        table.setWidthPercentage(100);
                    }
                }
            }

            if (intList != null && intList.size() > 0) {
                document.add(table);
                document.newPage();

                String loanName = "INTEREST";

                table = new PdfPTable(10);
                table.setWidths(new int[]{3, 15, 8, 6, 6, 8, 6, 6, 7, 6});
                table.setWidthPercentage(100);

                pageNo++;
                printHeaderforInterest(crb, table, cell, schedule, laBean, loanName, pageNo);

                slno = 0;
                tot = 0;
                if (intList != null && intList.size() > 0) {
                    Iterator itr = intList.iterator();

                    while (itr.hasNext()) {
                        laBeanP = (LoanAdvanceScheduleBean) itr.next();
                        slno++;
                        tot = tot + laBeanP.getDecutedAmt();

                        if (laBeanP.getSlno() > 0) {
                            cell = new PdfPCell(new Phrase(laBeanP.getSlno() + "", textFont));
                        } else {
                            cell = new PdfPCell(new Phrase("", textFont));
                        }
                        cell.setBorder(Rectangle.BOTTOM);
                        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                        cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
                        table.addCell(cell);

                        cell = new PdfPCell(new Phrase(laBeanP.getEmpNameDesg(), textFont));
                        cell.setFixedHeight(30);
                        cell.setBorder(Rectangle.BOTTOM);
                        cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
                        table.addCell(cell);

                        cell = new PdfPCell(new Phrase(laBeanP.getVchNo() + " / " + laBeanP.getVchDate(), textFont));
                        cell.setBorder(Rectangle.BOTTOM);
                        cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
                        cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
                        table.addCell(cell);

                        cell = new PdfPCell(new Phrase(laBeanP.getAccNo(), textFont));
                        cell.setBorder(Rectangle.BOTTOM);
                        cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
                        cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
                        table.addCell(cell);

                        cell = new PdfPCell(new Phrase(laBeanP.getOriginalAmt() + "", textFont));
                        cell.setBorder(Rectangle.BOTTOM);
                        cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
                        cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
                        table.addCell(cell);

                        if (laBeanP.getInstalmentRec() != null) {
                            cell = new PdfPCell(new Phrase(laBeanP.getInstalmentRec() + "", textFont));
                            cell.setBorder(Rectangle.BOTTOM);
                            cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
                            cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
                            table.addCell(cell);

                        } else {
                            cell = new PdfPCell(new Phrase(" ", textFont));
                            cell.setBorder(Rectangle.BOTTOM);
                            cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
                            cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
                            table.addCell(cell);
                        }

                        cell = new PdfPCell(new Phrase(laBeanP.getDecutedAmt() + "", textFont));
                        cell.setBorder(Rectangle.BOTTOM);
                        cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
                        cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
                        table.addCell(cell);

                        cell = new PdfPCell(new Phrase(laBeanP.getRecAmt() + "", textFont));
                        cell.setBorder(Rectangle.BOTTOM);
                        cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
                        cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
                        table.addCell(cell);

                        cell = new PdfPCell(new Phrase(laBeanP.getBalOutstanding() + "", textFont));
                        cell.setBorder(Rectangle.BOTTOM);
                        cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
                        cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
                        table.addCell(cell);

                        cell = new PdfPCell(new Phrase(laBeanP.getGpfNo() + "", textFont));
                        cell.setBorder(Rectangle.BOTTOM);
                        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                        cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
                        table.addCell(cell);

                        if (slno % 13 == 0) {
                            printPageFooterforPrincipal(laBean, table, cell, tot);
                            document.add(table);
                            document.newPage();

                            table = new PdfPTable(10);
                            table.setWidths(new int[]{3, 15, 8, 6, 6, 8, 6, 6, 7, 6});
                            table.setWidthPercentage(100);

                            pageNo++;
                            printHeaderforInterest(crb, table, cell, schedule, laBean, loanName, pageNo);
                            printCarryForwardforPrincipal(table, cell, tot, pageNo - 1, boldTextFont);
                        }
                        if (slno == intList.size()) {
                            printGrandTotalforPrincipal(laBean, table, cell, tot, boldTextFont);
                            document.add(table);
                            document.newPage();

                            table = new PdfPTable(10);
                            table.setWidths(new int[]{3, 15, 8, 6, 6, 8, 6, 6, 7, 6});
                            table.setWidthPercentage(100);
                        }
                    }
                }
            }

            if (slno == 0) {
                pageNo++;
                printHeaderforPrincipal(crb, table, cell, schedule, laBean, "PRINCIPAL", pageNo);
                cell = new PdfPCell(new Phrase(" There is no record ", bigTextFont));
                cell.setBorder(Rectangle.BOTTOM);
                cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                cell.setColspan(9);
                table.addCell(cell);

                printPageSignLoan(table, cell, laBean);
            }
            document.add(table);

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void printHeaderforPrincipal(CommonReportParamBean crb, PdfPTable table, PdfPCell cell, String schedule, LoanAdvanceScheduleBean laBean, String loanName, int pageno) throws Exception {

        Font hdrTextFont = new Font(Font.FontFamily.TIMES_ROMAN, 10f, Font.BOLD, BaseColor.BLACK);
        Font bigTextFont = new Font(Font.FontFamily.TIMES_ROMAN, 8.6f, Font.NORMAL, BaseColor.BLACK);
        Font boldTextFont = new Font(Font.FontFamily.TIMES_ROMAN, 8.6f, Font.BOLD, BaseColor.BLACK);

        cell = new PdfPCell(new Phrase("Page No : " + pageno, hdrTextFont));
        cell.setColspan(9);
        cell.setBorder(Rectangle.NO_BORDER);
        cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
        table.addCell(cell);

        if (schedule.equalsIgnoreCase("HBA")) {

            cell = new PdfPCell(new Phrase(StringUtils.defaultString(laBean.getScheduleOfRecovery()), hdrTextFont));
            cell.setColspan(9);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("OF " + laBean.getDeptName(), hdrTextFont));
            cell.setColspan(9);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase(" 7610-Loans to Government Servants Etc-201-House Building Advances ", hdrTextFont));
            cell.setColspan(9);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("0079-Loans to Govt. servants for construction of house-13072-Normal House Building Advance", hdrTextFont));
            cell.setColspan(9);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("For the month of : " + laBean.getMonth() + "-" + laBean.getYear(), hdrTextFont));
            cell.setColspan(9);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("T.V No / Date: " + crb.getVchNo() + "-" + crb.getVchDate(), hdrTextFont));
            cell.setColspan(9);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase(" **********-*-********** ", hdrTextFont));
            cell.setColspan(9);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

//            cell = new PdfPCell(new Phrase(" ", hdrTextFont));
//            cell.setColspan(9);
//            cell.setBorder(Rectangle.NO_BORDER);
//            cell.setHorizontalAlignment(Element.ALIGN_LEFT);
//            table.addCell(cell);
        }
        if (schedule.equalsIgnoreCase("VE")) {

            cell = new PdfPCell(new Phrase(StringUtils.defaultString(laBean.getScheduleOfRecovery()), hdrTextFont));
            cell.setColspan(9);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("OF " + laBean.getDeptName(), hdrTextFont));
            cell.setColspan(9);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("For the month of : " + laBean.getMonth() + "-" + laBean.getYear(), hdrTextFont));
            cell.setColspan(9);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("T.V No / Date: " + crb.getVchNo() + "-" + crb.getVchDate(), hdrTextFont));
            cell.setColspan(9);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase(" **********-*-********** ", hdrTextFont));
            cell.setColspan(9);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase(" ", hdrTextFont));
            cell.setColspan(9);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_LEFT);
            table.addCell(cell);

        }
        if (schedule.equalsIgnoreCase("SHBA")) {

            cell = new PdfPCell(new Phrase(StringUtils.defaultString(laBean.getScheduleOfRecovery()), hdrTextFont));
            cell.setColspan(9);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("OF " + laBean.getDeptName(), hdrTextFont));
            cell.setColspan(9);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase(" 7610-LOANS TO GOVERNMENT SERVANTS ETC-201-HOUSE BUILDING ADVANCES ", hdrTextFont));
            cell.setColspan(9);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase(" 0079-Loans to Govt. servants for construction of house-13073-Special House Building Advance ", hdrTextFont));
            cell.setColspan(9);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("For the month of : " + laBean.getMonth() + "-" + laBean.getYear(), hdrTextFont));
            cell.setColspan(9);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("T.V No / Date: " + crb.getVchNo() + "-" + crb.getVchDate(), hdrTextFont));
            cell.setColspan(9);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase(" **********-*-********** ", hdrTextFont));
            cell.setColspan(9);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("", hdrTextFont));
            cell.setColspan(9);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_LEFT);
            table.addCell(cell);

        }
        if (schedule.equalsIgnoreCase("MCA")) {

            cell = new PdfPCell(new Phrase(StringUtils.defaultString(laBean.getScheduleOfRecovery()), hdrTextFont));
            cell.setColspan(9);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("OF " + laBean.getDeptName(), hdrTextFont));
            cell.setColspan(9);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase(" 7610-Loans to Government Servants Etc-202-Advances For Purchase of Motor Conveyance-0080-Loans to ", hdrTextFont));
            cell.setColspan(9);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase(" Govt. servants for purchase of motor conveyance-13001-Advance for purchase of Motor Car/Motor Cycle ", hdrTextFont));
            cell.setColspan(9);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("For the month of : " + laBean.getMonth() + "-" + laBean.getYear(), hdrTextFont));
            cell.setColspan(9);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("T.V No / Date: " + crb.getVchNo() + "-" + crb.getVchDate(), hdrTextFont));
            cell.setColspan(9);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase(" **********-*-********** ", hdrTextFont));
            cell.setColspan(9);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("", hdrTextFont));
            cell.setColspan(9);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_LEFT);
            table.addCell(cell);
        }

        if (schedule.equalsIgnoreCase("MOPA")) {

            cell = new PdfPCell(new Phrase(StringUtils.defaultString(laBean.getScheduleOfRecovery()), hdrTextFont));
            cell.setColspan(9);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("OF " + laBean.getDeptName(), hdrTextFont));
            cell.setColspan(9);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase(" 7610-Loans to Government Servants Etc-202-Advances For Purchase of Motor Conveyance-0080-Loans to Govt. ", hdrTextFont));
            cell.setColspan(9);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase(" servants for purchase of motor conveyance-13001-Advance for purchase of Motor Car/Motor Cycle ", hdrTextFont));
            cell.setColspan(9);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("For the month of : " + laBean.getMonth() + "-" + laBean.getYear(), hdrTextFont));
            cell.setColspan(9);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("T.V No / Date: " + crb.getVchNo() + "-" + crb.getVchDate(), hdrTextFont));
            cell.setColspan(9);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase(" **********-*-********** ", hdrTextFont));
            cell.setColspan(9);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("", hdrTextFont));
            cell.setColspan(9);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_LEFT);
            table.addCell(cell);

        }
        if (schedule.equalsIgnoreCase("CMPA")) {

            cell = new PdfPCell(new Phrase(StringUtils.defaultString(laBean.getScheduleOfRecovery()), hdrTextFont));
            cell.setColspan(9);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("OF " + laBean.getDeptName(), hdrTextFont));
            cell.setColspan(9);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase(" 5-7610-loans to Government Servants etc 00-800-Other Advances-1018-Other Items-48057-Personal Computer Advance", hdrTextFont));
            cell.setColspan(9);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("For the month of : " + laBean.getMonth() + "-" + laBean.getYear(), hdrTextFont));
            cell.setColspan(9);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("T.V No / Date: " + crb.getVchNo() + "-" + crb.getVchDate(), hdrTextFont));
            cell.setColspan(9);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase(" **********-*-********** ", hdrTextFont));
            cell.setColspan(9);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("", hdrTextFont));
            cell.setColspan(9);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_LEFT);
            table.addCell(cell);
        }
        if (schedule.equalsIgnoreCase("EV")) {

            cell = new PdfPCell(new Phrase(StringUtils.defaultString(laBean.getScheduleOfRecovery()), hdrTextFont));
            cell.setColspan(9);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("OF " + laBean.getDeptName(), hdrTextFont));
            cell.setColspan(9);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("05-7610-Loans to Government servants etc.-00-Administrative", hdrTextFont));
            cell.setColspan(9);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("Expenditure-202-Advance for purchase of Motor Conveyances-3609", hdrTextFont));
            cell.setColspan(9);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("Advance for purchase of Electric Operated Motor car/Motor cycle-48001-Advances", hdrTextFont));
            cell.setColspan(9);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("For the month of : " + laBean.getMonth() + "-" + laBean.getYear(), hdrTextFont));
            cell.setColspan(9);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("T.V No / Date: " + crb.getVchNo() + "-" + crb.getVchDate(), hdrTextFont));
            cell.setColspan(9);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase(" **********-*-********** ", hdrTextFont));
            cell.setColspan(9);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("", hdrTextFont));
            cell.setColspan(9);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_LEFT);
            table.addCell(cell);
        }

        cell = new PdfPCell(new Phrase("Name of the Department : ", boldTextFont));
        cell.setColspan(2);
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase(laBean.getDeptName(), bigTextFont));
        cell.setColspan(7);
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("Name of the Office : ", boldTextFont));
        cell.setColspan(2);
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase(laBean.getOffName(), bigTextFont));
        cell.setColspan(7);
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("Designation of DDO : ", boldTextFont));
        cell.setColspan(2);
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase(laBean.getDdoName(), bigTextFont));
        cell.setColspan(7);
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("Name of Treasury : ", boldTextFont));
        cell.setColspan(2);
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase(laBean.getTrName(), bigTextFont));
        cell.setColspan(7);
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("Bill No : ", boldTextFont));
        cell.setColspan(2);
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase(laBean.getBilldesc(), bigTextFont));
        cell.setColspan(7);
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase(" ", bigTextFont));
        cell.setColspan(9);
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("", boldTextFont));
        cell.setColspan(9);
        cell.setBorder(Rectangle.BOTTOM);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("Sl. No.", boldTextFont));
        cell.setRowspan(2);
        cell.setBorder(Rectangle.BOX);
        cell.setVerticalAlignment(Element.ALIGN_CENTER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("Name of the Employee / Designation", boldTextFont));
        cell.setRowspan(2);
        cell.setBorder(Rectangle.BOX);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("Month in which Original Advance was Drawn", boldTextFont));
        cell.setRowspan(2);
        cell.setBorder(Rectangle.BOX);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase(loanName, boldTextFont));
        cell.setColspan(6);
        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        cell.setBorder(Rectangle.BOX);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("Amount of Original Advance", boldTextFont));
        cell.setBorder(Rectangle.BOX);
        cell.setVerticalAlignment(Element.ALIGN_CENTER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("No of Installment of Recovery", boldTextFont));
        cell.setBorder(Rectangle.BOX);
        cell.setVerticalAlignment(Element.ALIGN_CENTER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("Amount Deducted in the Bill", boldTextFont));
        cell.setBorder(Rectangle.BOX);
        cell.setVerticalAlignment(Element.ALIGN_CENTER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("Recovery Upto the Month", boldTextFont));
        cell.setBorder(Rectangle.BOX);
        cell.setVerticalAlignment(Element.ALIGN_CENTER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("Balance Outstanding", boldTextFont));
        cell.setBorder(Rectangle.BOX);
        cell.setVerticalAlignment(Element.ALIGN_CENTER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("Remarks", boldTextFont));
        cell.setBorder(Rectangle.BOX);
        cell.setVerticalAlignment(Element.ALIGN_CENTER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("", boldTextFont));
        cell.setColspan(9);
        cell.setBorder(Rectangle.BOTTOM);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("", boldTextFont));
        cell.setBorder(Rectangle.NO_BORDER);
        cell.setHorizontalAlignment(Element.ALIGN_LEFT);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("1", boldTextFont));
        cell.setBorder(Rectangle.NO_BORDER);
        cell.setHorizontalAlignment(Element.ALIGN_LEFT);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("2", boldTextFont));
        cell.setBorder(Rectangle.NO_BORDER);
        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("3", boldTextFont));
        cell.setBorder(Rectangle.NO_BORDER);
        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("4", boldTextFont));
        cell.setBorder(Rectangle.NO_BORDER);
        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("5", boldTextFont));
        cell.setBorder(Rectangle.NO_BORDER);
        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("6", boldTextFont));
        cell.setBorder(Rectangle.NO_BORDER);
        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("7", boldTextFont));
        cell.setBorder(Rectangle.NO_BORDER);
        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("8", boldTextFont));
        cell.setBorder(Rectangle.NO_BORDER);
        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("", boldTextFont));
        cell.setColspan(9);
        cell.setBorder(Rectangle.BOTTOM);
        table.addCell(cell);

    }

    private void printPageFooterforPrincipal(LoanAdvanceScheduleBean laBean, PdfPTable table, PdfPCell cell, double total) throws Exception {

        Font boldTextFont = new Font(Font.FontFamily.TIMES_ROMAN, 8f, Font.BOLD, BaseColor.BLACK);

        cell = new PdfPCell(new Phrase(StringUtils.repeat("-", 193), boldTextFont));
        cell.setColspan(10);
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("* Page Total * :", boldTextFont));
        cell.setColspan(6);
        cell.setBorder(Rectangle.NO_BORDER);
        cell.setHorizontalAlignment(Element.ALIGN_LEFT);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase(total + "", boldTextFont));
        cell.setBorder(Rectangle.NO_BORDER);
        cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("", boldTextFont));
        cell.setColspan(3);
        cell.setBorder(Rectangle.NO_BORDER);
        cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase(StringUtils.repeat("-", 193), boldTextFont));
        cell.setColspan(10);
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase(" RUPEES " + Numtowordconvertion.convertNumber((int) total).toUpperCase() + " Only", boldTextFont));
        cell.setColspan(10);
        cell.setBorder(Rectangle.NO_BORDER);
        cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase(" ", boldTextFont));
        cell.setColspan(10);
        cell.setBorder(Rectangle.NO_BORDER);
        cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
        table.addCell(cell);

    }

    private void printCarryForwardforPrincipal(PdfPTable table, PdfPCell cell, double total, int pageno, Font f1) throws Exception {

        cell = new PdfPCell(new Phrase("", f1));
        cell.setBorder(Rectangle.NO_BORDER);
        cell.setHorizontalAlignment(Element.ALIGN_LEFT);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("CARRIED FROM PAGE :" + pageno, f1));
        cell.setColspan(5);
        cell.setBorder(Rectangle.NO_BORDER);
        cell.setHorizontalAlignment(Element.ALIGN_LEFT);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase(total + "", f1));
        cell.setBorder(Rectangle.NO_BORDER);
        cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("", f1));
        cell.setColspan(3);
        cell.setBorder(Rectangle.NO_BORDER);
        cell.setHorizontalAlignment(Element.ALIGN_LEFT);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase(StringUtils.repeat("-", 180), f1));
        cell.setColspan(10);
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);
    }

    private void printHeaderforLoadAdvance(PdfPTable table, PdfPCell cell, String schedule, LoanAdvanceScheduleBean laBean, String loanName, int pageno) throws Exception {

        Font hdrTextFont = new Font(Font.FontFamily.TIMES_ROMAN, 10f, Font.BOLD, BaseColor.BLACK);
        Font bigTextFont = new Font(Font.FontFamily.TIMES_ROMAN, 8.6f, Font.NORMAL, BaseColor.BLACK);
        Font boldTextFont = new Font(Font.FontFamily.TIMES_ROMAN, 8.6f, Font.BOLD, BaseColor.BLACK);

        cell = new PdfPCell(new Phrase("Page No : " + pageno, hdrTextFont));
        cell.setColspan(9);
        cell.setBorder(Rectangle.NO_BORDER);
        cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
        table.addCell(cell);

        if (schedule.equalsIgnoreCase("HBA")) {

            cell = new PdfPCell(new Phrase(StringUtils.defaultString(laBean.getScheduleOfRecovery()), hdrTextFont));
            cell.setColspan(9);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("OF " + laBean.getDeptName(), hdrTextFont));
            cell.setColspan(9);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("7610-LOANS TO GOVERNMENT SERVANTS ETC-201-HOUSE BUILDING ADVANCES ", hdrTextFont));
            cell.setColspan(9);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("0079-Loans to Govt. servants for construction of house-13072-Normal House Building Advance", hdrTextFont));
            cell.setColspan(9);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("FOR THE MONTH OF : " + laBean.getMonth() + "-" + laBean.getYear(), hdrTextFont));
            cell.setColspan(9);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase(" **********-*-********** ", hdrTextFont));
            cell.setColspan(9);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase(" ", hdrTextFont));
            cell.setColspan(9);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_LEFT);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("Name of the Department : ", boldTextFont));
            cell.setColspan(2);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase(laBean.getDeptName(), bigTextFont));
            cell.setColspan(7);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("Name of the Office : ", boldTextFont));
            cell.setColspan(2);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase(laBean.getOffName(), bigTextFont));
            cell.setColspan(7);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("Designation of DDO : ", boldTextFont));
            cell.setColspan(2);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase(laBean.getDdoName(), bigTextFont));
            cell.setColspan(7);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("Name of Treasury : ", boldTextFont));
            cell.setColspan(2);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase(laBean.getTrName(), bigTextFont));
            cell.setColspan(7);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("Bill No : ", boldTextFont));
            cell.setColspan(2);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase(laBean.getBilldesc(), bigTextFont));
            cell.setColspan(7);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase(" ", bigTextFont));
            cell.setColspan(9);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

        }
        if (schedule.equalsIgnoreCase("VE")) {

            cell = new PdfPCell(new Phrase(StringUtils.defaultString(laBean.getScheduleOfRecovery()), hdrTextFont));
            cell.setColspan(9);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("OF " + laBean.getDeptName(), hdrTextFont));
            cell.setColspan(9);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("FOR THE MONTH OF : " + laBean.getMonth() + "-" + laBean.getYear(), hdrTextFont));
            cell.setColspan(9);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase(" **********-*-********** ", hdrTextFont));
            cell.setColspan(9);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase(" ", hdrTextFont));
            cell.setColspan(9);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_LEFT);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("Name of the Department : ", boldTextFont));
            cell.setColspan(2);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase(laBean.getDeptName(), bigTextFont));
            cell.setColspan(7);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("Name of the Office : ", boldTextFont));
            cell.setColspan(2);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase(laBean.getOffName(), bigTextFont));
            cell.setColspan(7);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("Designation of DDO : ", boldTextFont));
            cell.setColspan(2);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase(laBean.getDdoName(), bigTextFont));
            cell.setColspan(7);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("Name of Treasury : ", boldTextFont));
            cell.setColspan(2);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase(laBean.getTrName(), bigTextFont));
            cell.setColspan(7);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("Bill No : ", boldTextFont));
            cell.setColspan(2);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase(laBean.getBilldesc(), bigTextFont));
            cell.setColspan(7);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase(" ", bigTextFont));
            cell.setColspan(9);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

        }

        cell = new PdfPCell(new Phrase("", boldTextFont));
        cell.setColspan(9);
        cell.setBorder(Rectangle.BOTTOM);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("Sl. No.", boldTextFont));
        cell.setRowspan(2);
        cell.setBorder(Rectangle.BOX);
        cell.setVerticalAlignment(Element.ALIGN_CENTER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("Name of the Employee / Designation", boldTextFont));
        cell.setRowspan(2);
        cell.setBorder(Rectangle.BOX);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("Month in which Original Advance was Drawn", boldTextFont));
        cell.setRowspan(2);
        cell.setBorder(Rectangle.BOX);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase(loanName, boldTextFont));
        cell.setColspan(6);
        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        cell.setBorder(Rectangle.BOX);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("Amount of Original Advance", boldTextFont));
        cell.setBorder(Rectangle.BOX);
        cell.setVerticalAlignment(Element.ALIGN_CENTER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("No of Installment of Recovery", boldTextFont));
        cell.setBorder(Rectangle.BOX);
        cell.setVerticalAlignment(Element.ALIGN_CENTER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("Amount Deducted in the Bill", boldTextFont));
        cell.setBorder(Rectangle.BOX);
        cell.setVerticalAlignment(Element.ALIGN_CENTER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("Recovery Upto the Month", boldTextFont));
        cell.setBorder(Rectangle.BOX);
        cell.setVerticalAlignment(Element.ALIGN_CENTER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("Balance Outstanding", boldTextFont));
        cell.setBorder(Rectangle.BOX);
        cell.setVerticalAlignment(Element.ALIGN_CENTER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("Remarks", boldTextFont));
        cell.setBorder(Rectangle.BOX);
        cell.setVerticalAlignment(Element.ALIGN_CENTER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("", boldTextFont));
        cell.setColspan(9);
        cell.setBorder(Rectangle.BOTTOM);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("", boldTextFont));
        cell.setBorder(Rectangle.NO_BORDER);
        cell.setHorizontalAlignment(Element.ALIGN_LEFT);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("1", boldTextFont));
        cell.setBorder(Rectangle.NO_BORDER);
        cell.setHorizontalAlignment(Element.ALIGN_LEFT);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("2", boldTextFont));
        cell.setBorder(Rectangle.NO_BORDER);
        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("3", boldTextFont));
        cell.setBorder(Rectangle.NO_BORDER);
        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("4", boldTextFont));
        cell.setBorder(Rectangle.NO_BORDER);
        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("5", boldTextFont));
        cell.setBorder(Rectangle.NO_BORDER);
        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("6", boldTextFont));
        cell.setBorder(Rectangle.NO_BORDER);
        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("7", boldTextFont));
        cell.setBorder(Rectangle.NO_BORDER);
        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("8", boldTextFont));
        cell.setBorder(Rectangle.NO_BORDER);
        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("", boldTextFont));
        cell.setColspan(9);
        cell.setBorder(Rectangle.BOTTOM);
        table.addCell(cell);
    }

    private void printHeaderforInterest(CommonReportParamBean crb, PdfPTable table, PdfPCell cell, String schedule, LoanAdvanceScheduleBean laBean, String loanName, int pageno) throws Exception {

        Font hdrTextFont = new Font(Font.FontFamily.TIMES_ROMAN, 10f, Font.BOLD, BaseColor.BLACK);
        Font bigTextFont = new Font(Font.FontFamily.TIMES_ROMAN, 8.6f, Font.NORMAL, BaseColor.BLACK);
        Font boldTextFont = new Font(Font.FontFamily.TIMES_ROMAN, 8.6f, Font.BOLD, BaseColor.BLACK);

        cell = new PdfPCell(new Phrase("Page No : " + pageno, hdrTextFont));
        cell.setColspan(10);
        cell.setBorder(Rectangle.NO_BORDER);
        cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
        table.addCell(cell);

        if (schedule.equalsIgnoreCase("HBA")) {

            cell = new PdfPCell(new Phrase(StringUtils.defaultString(laBean.getScheduleOfRecovery()), hdrTextFont));
            cell.setColspan(10);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("OF " + laBean.getDeptName(), hdrTextFont));
            cell.setColspan(10);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("0049-Interest Receipts of State/Union-Territory Governments-800-Other\n"
                    + "Receipts-0060-Interest Receipts-10019-Interest on Loans and advances to Govt.\n"
                    + "Servants-076-House Building Advance", hdrTextFont));
            cell.setColspan(10);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("For the month of : " + laBean.getMonth() + "-" + laBean.getYear(), hdrTextFont));
            cell.setColspan(10);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("T.V No / Date: " + crb.getVchNo() + "-" + crb.getVchDate(), hdrTextFont));
            cell.setColspan(10);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase(" **********-*-********** ", hdrTextFont));
            cell.setColspan(10);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase(" ", hdrTextFont));
            cell.setColspan(10);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_LEFT);
            table.addCell(cell);
        }
        if (schedule.equalsIgnoreCase("VE")) {

            cell = new PdfPCell(new Phrase(StringUtils.defaultString(laBean.getScheduleOfRecovery()), hdrTextFont));
            cell.setColspan(10);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("OF " + laBean.getDeptName(), hdrTextFont));
            cell.setColspan(10);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("For the month of : " + laBean.getMonth() + "-" + laBean.getYear(), hdrTextFont));
            cell.setColspan(10);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("T.V No / Date: " + crb.getVchNo() + "-" + crb.getVchDate(), hdrTextFont));
            cell.setColspan(10);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase(" **********-*-********** ", hdrTextFont));
            cell.setColspan(10);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase(" ", hdrTextFont));
            cell.setColspan(10);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_LEFT);
            table.addCell(cell);
        }

        if (schedule.equalsIgnoreCase("SHBA")) {

            cell = new PdfPCell(new Phrase(StringUtils.defaultString(laBean.getScheduleOfRecovery()), hdrTextFont));
            cell.setColspan(10);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("OF " + laBean.getDeptName(), hdrTextFont));
            cell.setColspan(10);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("0049-INTEREST RECEIPTS OF STATE/UNION-TERRITORY GOVERNMENTS-800-OTHER\n"
                    + "RECEIPTS-0060-Interest Receipts-10019-Interest on Loans and advances to Govt.\n"
                    + "Servants-230-Special House Building Advance", hdrTextFont));
            cell.setColspan(10);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("For the month of : " + laBean.getMonth() + "-" + laBean.getYear(), hdrTextFont));
            cell.setColspan(10);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("T.V No / Date: " + crb.getVchNo() + "-" + crb.getVchDate(), hdrTextFont));
            cell.setColspan(10);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase(" **********-*-********** ", hdrTextFont));
            cell.setColspan(10);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase(" ", hdrTextFont));
            cell.setColspan(10);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

        }
        if (schedule.equalsIgnoreCase("MCA")) {

            cell = new PdfPCell(new Phrase(StringUtils.defaultString(laBean.getScheduleOfRecovery()), hdrTextFont));
            cell.setColspan(10);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("OF " + laBean.getDeptName(), hdrTextFont));
            cell.setColspan(10);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase(" 0049-Interest Receipts of State/Union-Territory Governments 800-Other Receipts-0060-Interest Receipts-10019 ", hdrTextFont));
            cell.setColspan(10);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase(" -Interest on Loans and advances to Govt. Servants-003-Advances for Purchase of Motor Conveyances ", hdrTextFont));
            cell.setColspan(10);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("For the month of : " + laBean.getMonth() + "-" + laBean.getYear(), hdrTextFont));
            cell.setColspan(10);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("T.V No / Date: " + crb.getVchNo() + "-" + crb.getVchDate(), hdrTextFont));
            cell.setColspan(10);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase(" **********-*-********** ", hdrTextFont));
            cell.setColspan(10);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase(" ", hdrTextFont));
            cell.setColspan(10);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

        }
        if (schedule.equalsIgnoreCase("MOPA")) {

            cell = new PdfPCell(new Phrase(StringUtils.defaultString(laBean.getScheduleOfRecovery()), hdrTextFont));
            cell.setColspan(10);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("OF " + laBean.getDeptName(), hdrTextFont));
            cell.setColspan(10);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase(" 0049-Interest Receipts of State/Union-Territory Governments 800-Other Receipts-0060-Interest Receipts- ", hdrTextFont));
            cell.setColspan(10);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase(" 10019-Interest on Loans and advances to Govt. Servants-003-Advances for Purchase of Motor Conveyances ", hdrTextFont));
            cell.setColspan(10);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("For the month of : " + laBean.getMonth() + "-" + laBean.getYear(), hdrTextFont));
            cell.setColspan(10);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("T.V No / Date: " + crb.getVchNo() + "-" + crb.getVchDate(), hdrTextFont));
            cell.setColspan(10);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase(" **********-*-********** ", hdrTextFont));
            cell.setColspan(10);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase(" ", hdrTextFont));
            cell.setColspan(10);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);
        }
        if (schedule.equalsIgnoreCase("CMPA")) {

            cell = new PdfPCell(new Phrase(StringUtils.defaultString(laBean.getScheduleOfRecovery()), hdrTextFont));
            cell.setColspan(10);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("OF " + laBean.getDeptName(), hdrTextFont));
            cell.setColspan(10);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase(" 0049-Interest Receipts-04-Interest Receipts of State / University Govt.-800-receipts of State / University ", hdrTextFont));
            cell.setColspan(10);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase(" Govt.-800-receipts-10019 -Interest on loans and Advances to Govt. Servants-231- ", hdrTextFont));
            cell.setColspan(10);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase(" Interest for Purchase of Personal Computer, Interest on Computer Advance. ", hdrTextFont));
            cell.setColspan(10);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("For the month of : " + laBean.getMonth() + "-" + laBean.getYear(), hdrTextFont));
            cell.setColspan(10);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("T.V No / Date: " + crb.getVchNo() + "-" + crb.getVchDate(), hdrTextFont));
            cell.setColspan(10);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase(" **********-*-********** ", hdrTextFont));
            cell.setColspan(10);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase(" ", hdrTextFont));
            cell.setColspan(10);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);
        }

        cell = new PdfPCell(new Phrase("Name of the Department : ", boldTextFont));
        cell.setColspan(2);
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase(laBean.getDeptName(), bigTextFont));
        cell.setColspan(8);
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("Name of the Office : ", boldTextFont));
        cell.setColspan(2);
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase(laBean.getOffName(), bigTextFont));
        cell.setColspan(8);
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("Designation of DDO : ", boldTextFont));
        cell.setColspan(2);
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase(laBean.getDdoName(), bigTextFont));
        cell.setColspan(8);
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("Name of Treasury : ", boldTextFont));
        cell.setColspan(2);
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase(laBean.getTrName(), bigTextFont));
        cell.setColspan(8);
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("Bill No : ", boldTextFont));
        cell.setColspan(2);
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase(laBean.getBilldesc(), bigTextFont));
        cell.setColspan(8);
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase(" ", bigTextFont));
        cell.setColspan(10);
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("", boldTextFont));
        cell.setColspan(10);
        cell.setBorder(Rectangle.BOTTOM);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("Sl. No.", boldTextFont));
        cell.setRowspan(2);
        cell.setBorder(Rectangle.BOX);
        cell.setVerticalAlignment(Element.ALIGN_CENTER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("Name of the Employee / Designation", boldTextFont));
        cell.setRowspan(2);
        cell.setBorder(Rectangle.BOX);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("T.V. No. & Date in which original adv drawn with Treasury Name", boldTextFont));
        cell.setRowspan(2);
        cell.setBorder(Rectangle.BOX);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("Account No", boldTextFont));
        cell.setRowspan(2);
        cell.setBorder(Rectangle.BOX);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase(loanName, boldTextFont));
        cell.setColspan(6);
        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        cell.setBorder(Rectangle.BOX);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("Amount of Original Advance", boldTextFont));
        cell.setBorder(Rectangle.BOX);
        cell.setVerticalAlignment(Element.ALIGN_CENTER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("No of Installment of Recovery", boldTextFont));
        cell.setBorder(Rectangle.BOX);
        cell.setVerticalAlignment(Element.ALIGN_CENTER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("Amount Deducted in the Bill", boldTextFont));
        cell.setBorder(Rectangle.BOX);
        cell.setVerticalAlignment(Element.ALIGN_CENTER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("Recovery Upto the Month", boldTextFont));
        cell.setBorder(Rectangle.BOX);
        cell.setVerticalAlignment(Element.ALIGN_CENTER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("Balance Outstanding", boldTextFont));
        cell.setBorder(Rectangle.BOX);
        cell.setVerticalAlignment(Element.ALIGN_CENTER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("Remarks", boldTextFont));
        cell.setBorder(Rectangle.BOX);
        cell.setVerticalAlignment(Element.ALIGN_CENTER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("", boldTextFont));
        cell.setColspan(10);
        cell.setBorder(Rectangle.BOTTOM);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("", boldTextFont));
        cell.setBorder(Rectangle.NO_BORDER);
        cell.setHorizontalAlignment(Element.ALIGN_LEFT);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("1", boldTextFont));
        cell.setBorder(Rectangle.NO_BORDER);
        cell.setHorizontalAlignment(Element.ALIGN_LEFT);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("2", boldTextFont));
        cell.setBorder(Rectangle.NO_BORDER);
        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("3", boldTextFont));
        cell.setBorder(Rectangle.NO_BORDER);
        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("4", boldTextFont));
        cell.setBorder(Rectangle.NO_BORDER);
        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("5", boldTextFont));
        cell.setBorder(Rectangle.NO_BORDER);
        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("6", boldTextFont));
        cell.setBorder(Rectangle.NO_BORDER);
        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("7", boldTextFont));
        cell.setBorder(Rectangle.NO_BORDER);
        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("8", boldTextFont));
        cell.setBorder(Rectangle.NO_BORDER);
        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("9", boldTextFont));
        cell.setBorder(Rectangle.NO_BORDER);
        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("", boldTextFont));
        cell.setColspan(10);
        cell.setBorder(Rectangle.BOTTOM);
        table.addCell(cell);

    }

    private void printGrandTotalforPrincipal(LoanAdvanceScheduleBean laBean, PdfPTable table, PdfPCell cell, double grandtotal, Font f1) throws Exception {

        cell = new PdfPCell(new Phrase(StringUtils.repeat("-", 180), f1));
        cell.setColspan(10);
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("* Grand Total * :", f1));
        cell.setColspan(5);
        cell.setBorder(Rectangle.NO_BORDER);
        cell.setHorizontalAlignment(Element.ALIGN_LEFT);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase(grandtotal + "", f1));
        cell.setBorder(Rectangle.NO_BORDER);
        cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("", f1));
        cell.setColspan(4);
        cell.setBorder(Rectangle.NO_BORDER);
        cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase(StringUtils.repeat("-", 180), f1));
        cell.setColspan(10);
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("FOR THE MONTH OF : " + laBean.getMonth() + "-" + laBean.getYear(), f1));
        cell.setColspan(4);
        cell.setBorder(Rectangle.NO_BORDER);
        cell.setHorizontalAlignment(Element.ALIGN_LEFT);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase(" RUPEES " + Numtowordconvertion.convertNumber((int) grandtotal).toUpperCase() + " Only", f1));
        cell.setColspan(6);
        cell.setBorder(Rectangle.NO_BORDER);
        cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase(" ", f1));
        cell.setColspan(10);
        cell.setBorder(Rectangle.NO_BORDER);
        cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase(" ", f1));
        cell.setColspan(10);
        cell.setBorder(Rectangle.NO_BORDER);
        cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase(" ", f1));
        cell.setColspan(6);
        cell.setBorder(Rectangle.NO_BORDER);
        cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase(" Signature of the DDO: ", f1));
        cell.setColspan(4);
        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase(" ", f1));
        cell.setColspan(6);
        cell.setBorder(Rectangle.NO_BORDER);
        cell.setHorizontalAlignment(Element.ALIGN_LEFT);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase(laBean.getDdoName(), f1));
        cell.setColspan(4);
        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase(" ", f1));
        cell.setColspan(6);
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("Date : ", f1));
        cell.setColspan(4);
        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);
    }

    private void printPageSignLoan(PdfPTable table, PdfPCell cell, LoanAdvanceScheduleBean laBean) {

        Font textFont = new Font(Font.FontFamily.TIMES_ROMAN, 8.4f, Font.NORMAL, BaseColor.BLACK);
        Font boldTextFont = new Font(Font.FontFamily.TIMES_ROMAN, 8.6f, Font.BOLD, BaseColor.BLACK);

        cell = new PdfPCell(new Phrase(" ", boldTextFont));
        cell.setColspan(9);
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase(" ", boldTextFont));
        cell.setColspan(9);
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase(" ", boldTextFont));
        cell.setColspan(6);
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("Signature of D.D.O.", textFont));
        cell.setColspan(3);
        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase(" ", boldTextFont));
        cell.setColspan(6);
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase(laBean.getDdoName(), textFont));
        cell.setColspan(3);
        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase(" ", boldTextFont));
        cell.setColspan(6);
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("Date : ", textFont));
        cell.setColspan(3);
        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase(StringUtils.repeat("-", 181), textFont));
        cell.setColspan(9);
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);

    }

    private void printTotalLoan(PdfPTable table, PdfPCell cell, double total, String schedule, LoanAdvanceScheduleBean laBean, int pageno) {

        Font bigTextFont = new Font(Font.FontFamily.TIMES_ROMAN, 8.6f, Font.NORMAL, BaseColor.BLACK);
        Font boldTextFont = new Font(Font.FontFamily.TIMES_ROMAN, 8.6f, Font.BOLD, BaseColor.BLACK);

        cell = new PdfPCell(new Phrase(StringUtils.repeat("-", 181), bigTextFont));
        cell.setColspan(9);
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase(" RECOVERY FOR THE MONTH OF :" + laBean.getMonth() + "-" + laBean.getYear(), boldTextFont));
        cell.setColspan(5);
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase(total + "", boldTextFont));
        cell.setBorder(Rectangle.NO_BORDER);
        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase(" ", boldTextFont));
        cell.setColspan(3);
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase(" ", boldTextFont));
        cell.setColspan(4);
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase(" RUPEES " + Numtowordconvertion.convertNumber((int) total).toUpperCase() + " Only", boldTextFont));
        cell.setColspan(5);
        cell.setBorder(Rectangle.NO_BORDER);
        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase(StringUtils.repeat("-", 181), bigTextFont));
        cell.setColspan(9);
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);

    }

    @Override
    public List getLTCScheduleEmpList(String billNo, int year, int month) {

        Connection con = null;
        PreparedStatement pst = null;
        ResultSet rs = null;
        List emplist = new ArrayList();
        LTCScheduleBean ltcBean = null;
        String aqDtlsTbl = "";
        try {
            con = this.dataSource.getConnection();

            aqDtlsTbl = getAqDtlsTableName(billNo);

            String sql = "SELECT BILL_MAST.VCH_NO,BILL_MAST.VCH_DATE,DTL.EMP_CODE,DTL.EMP_NAME,DTL.GPF_ACC_NO,DTL.CUR_DESG,DTL.CUR_BASIC,DTL.ACC_NO,DTL.AD_AMT,"
                    + " DTL.AQSL_NO,P_ORG_AMT,REF_DESC,TOT_REC_AMT FROM ("
                    + " (SELECT * FROM BILL_MAST WHERE BILL_MAST.BILL_NO=?)BILL_MAST LEFT OUTER JOIN"
                    + " (SELECT AQ_MAST.EMP_CODE,AQ_MAST.GPF_ACC_NO,AQ_MAST.BILL_NO,AQ_MAST.CUR_DESG,AQ_MAST.EMP_NAME,"
                    + " AQ_MAST.CUR_BASIC,AQ_MAST.POST_SL_NO,AQ_DTLS.TOT_REC_AMT,AQ_DTLS.REF_DESC,AQ_DTLS.AD_REF_ID,"
                    + " AQ_DTLS.ACC_NO,AQ_DTLS.AD_AMT,AQ_DTLS.AQSL_NO"
                    + " FROM((SELECT * FROM AQ_MAST WHERE AQ_MAST.BILL_NO=? and aq_year=" + year + " and aq_month=" + month + ")AQ_MAST INNER JOIN (SELECT *"
                    + " FROM " + aqDtlsTbl + " WHERE " + aqDtlsTbl + ".SCHEDULE='LTCA' AND " + aqDtlsTbl + ".AD_TYPE='D' AND AD_AMT >0)AQ_DTLS ON"
                    + " AQ_DTLS.AQSL_NO=AQ_MAST.AQSL_NO))DTL ON BILL_MAST.BILL_NO=DTL.BILL_NO"
                    + " left outer join emp_loan_sanc on dtl.AD_REF_ID=emp_loan_sanc.loanid) order by POST_SL_NO";
            pst = con.prepareStatement(sql);
            pst.setInt(1, Integer.parseInt(billNo));
            pst.setInt(2, Integer.parseInt(billNo));
            rs = pst.executeQuery();
            while (rs.next()) {
                ltcBean = new LTCScheduleBean();
                ltcBean.setEmpName(rs.getString("EMP_NAME"));
                ltcBean.setEmpDesg(rs.getString("CUR_DESG"));
                ltcBean.setGpfNo(rs.getString("GPF_ACC_NO"));

                ltcBean.setAdAmt(rs.getInt("AD_AMT"));
                ltcBean.setPrincipalAmt(rs.getInt("P_ORG_AMT"));
                ltcBean.setTotRecAmt(rs.getInt("TOT_REC_AMT"));
                ltcBean.setRefDesc(rs.getString("REF_DESC"));
                ltcBean.setAccNo(rs.getString("ACC_NO"));

                ltcBean.setVchNo(rs.getString("VCH_NO"));
                emplist.add(ltcBean);
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            DataBaseFunctions.closeSqlObjects(rs, pst);
            DataBaseFunctions.closeSqlObjects(con);
        }
        return emplist;
    }

    @Override
    public String getChartOfAccount(String billNo) {

        Connection con = null;

        PreparedStatement pst = null;
        ResultSet rs = null;

        String chartOfAccount = "";
        try {
            con = this.dataSource.getConnection();

            String sql = "SELECT DEMAND_NO,MAJOR_HEAD,SUB_MAJOR_HEAD,MINOR_HEAD,SUB_MINOR_HEAD1,SUB_MINOR_HEAD2,SUB_MINOR_HEAD3,PLAN,SECTOR FROM BILL_MAST WHERE BILL_NO=?";
            pst = con.prepareStatement(sql);
            pst.setInt(1, Integer.parseInt(billNo));
            rs = pst.executeQuery();
            if (rs.next()) {
                chartOfAccount = StringUtils.defaultString(rs.getString("DEMAND_NO")) + "-" + StringUtils.defaultString(rs.getString("MAJOR_HEAD")) + "-" + StringUtils.defaultString(rs.getString("SUB_MAJOR_HEAD")) + "-" + StringUtils.defaultString(rs.getString("MINOR_HEAD")) + "-" + StringUtils.defaultString(rs.getString("SUB_MINOR_HEAD1")) + "-" + StringUtils.defaultString(rs.getString("SUB_MINOR_HEAD2")) + "-" + StringUtils.defaultString(rs.getString("PLAN")) + "-" + StringUtils.defaultString(rs.getString("SUB_MINOR_HEAD3")) + "-" + StringUtils.defaultString(rs.getString("SECTOR"));
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            DataBaseFunctions.closeSqlObjects(rs, pst);
            DataBaseFunctions.closeSqlObjects(con);
        }
        return chartOfAccount;
    }

    @Override
    public VehicleScheduleBean getVehicleScheduleList(String billNo, int year, int month) {

        Connection con = null;
        PreparedStatement pst = null;
        ResultSet rs = null;
        VehicleScheduleBean vBean = new VehicleScheduleBean();

        String aqDTLS = "";
        int totMCAPri = 0;
        int totMCAInt = 0;

        int totMOPAPri = 0;
        int totMOPAInt = 0;

        int totVEPri = 0;
        int totVEInt = 0;
        try {
            con = this.dataSource.getConnection();
            aqDTLS = getAqDtlsTableName(billNo);

            String sql = "SELECT AD_AMT,AD_CODE,NOW_DEDN FROM(SELECT AD_AMT,AD_CODE,NOW_DEDN FROM (SELECT AQSL_NO from AQ_MAST WHERE BILL_NO = ? "
                    + "and aq_month = ? and aq_year= ?)AQMAST "
                    + "INNER JOIN (SELECT AQSL_NO,AD_AMT,AD_CODE,NOW_DEDN FROM " + aqDTLS + " WHERE AD_AMT>0)AQDTLS ON AQDTLS.AQSL_NO=AQMAST.AQSL_NO)TAB "
                    + "INNER JOIN G_LOAN ON G_LOAN.LOAN_TP=TAB.AD_CODE AND G_LOAN.IS_VEHICLE_LOAN='Y'";
            pst = con.prepareStatement(sql);
            pst.setInt(1, Integer.parseInt(billNo));
            pst.setInt(2, month);
            pst.setInt(3, year);
            rs = pst.executeQuery();
            while (rs.next()) {
                if (rs.getString("AD_CODE").equals("MOPA") && (rs.getString("NOW_DEDN") != null && rs.getString("NOW_DEDN").equals("P"))) {
                    totMCAPri += rs.getInt("AD_AMT");
                }
                if (rs.getString("AD_CODE").equals("MOPA") && (rs.getString("NOW_DEDN") != null && rs.getString("NOW_DEDN").equals("P"))) {
                    totMOPAPri += rs.getInt("AD_AMT");;
                }
                if (rs.getString("AD_CODE").equals("VE") && (rs.getString("NOW_DEDN") != null && rs.getString("NOW_DEDN").equals("P"))) {
                    totVEPri += rs.getInt("AD_AMT");
                }
                if (rs.getString("AD_CODE").equals("MCA") && (rs.getString("NOW_DEDN") != null && rs.getString("NOW_DEDN").equals("I"))) {
                    totMCAInt += rs.getInt("AD_AMT");
                }
                if (rs.getString("AD_CODE").equals("MOPA") && (rs.getString("NOW_DEDN") != null && rs.getString("NOW_DEDN").equals("I"))) {
                    totMOPAInt += rs.getInt("AD_AMT");
                }
                if (rs.getString("AD_CODE").equals("VE") && (rs.getString("NOW_DEDN") != null && rs.getString("NOW_DEDN").equals("I"))) {
                    totVEInt += rs.getInt("AD_AMT");
                }
            }
            vBean.setTotMCAPri(totMCAPri);
            vBean.setTotMCAInt(totMCAInt);
            vBean.setTotMopaPri(totMOPAPri);
            vBean.setTotMopaInt(totMOPAInt);
            vBean.setTotVEPri(totVEPri);
            vBean.setTotVEInt(totVEInt);

        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            DataBaseFunctions.closeSqlObjects(rs, pst);
            DataBaseFunctions.closeSqlObjects(con);
        }
        return vBean;
    }

    @Override
    public void downloadPayDetailExcel(OutputStream out, String offcode, WritableWorkbook workbook, String billNo) {
        Connection con = null;
        PreparedStatement pst = null;
        ResultSet rs = null;
        try {
            con = this.dataSource.getConnection();

            WritableSheet sheet = workbook.createSheet(offcode, 0);
            WritableFont headformat = new WritableFont(WritableFont.ARIAL, 10, WritableFont.BOLD);
            WritableCellFormat headcell3 = new WritableCellFormat(headformat);
            headcell3.setAlignment(Alignment.LEFT);
            headcell3.setVerticalAlignment(VerticalAlignment.CENTRE);
            headcell3.setWrap(true);

            WritableCellFormat headcell = new WritableCellFormat(headformat);
            headcell.setAlignment(Alignment.LEFT);
            headcell.setVerticalAlignment(VerticalAlignment.CENTRE);
            headcell.setWrap(true);
            headcell.setBorder(Border.ALL, BorderLineStyle.DOUBLE);

            WritableCellFormat innercell = new WritableCellFormat(NumberFormats.INTEGER);
            innercell.setAlignment(Alignment.LEFT);
            innercell.setVerticalAlignment(VerticalAlignment.CENTRE);
            innercell.setWrap(true);

            int col = 0;
            int widthInChars = 40;

            Label label = null;
            jxl.write.Number num = null;

            label = new Label(0, 0, "BENF_ACCT_NO", headcell);//column,row
            sheet.setColumnView(col, widthInChars);
            col++;
            widthInChars = 40;
            sheet.addCell(label);
            label = new Label(1, 0, "BENF_BANK_IFSC_CODE", headcell);//column,row
            sheet.setColumnView(col, widthInChars);
            col++;
            widthInChars = 16;
            sheet.addCell(label);
            label = new Label(2, 0, "AMOUNT", headcell);//column,row
            sheet.setColumnView(col, widthInChars);
            col++;
            widthInChars = 16;
            sheet.addCell(label);
            label = new Label(3, 0, "BENF_FLAG", headcell);//column,row
            sheet.setColumnView(col, widthInChars);
            col++;
            widthInChars = 40;
            sheet.addCell(label);

            int row = 0;
            int slno = 0;

            String sql = "SELECT AQSL_NO,gross_amt, ded_amt, pvt_ded_amt, bank_acc_no,g_branch.ifsc_code FROM aq_mast "
                    + "left outer join g_branch on aq_mast.branch_name = g_branch.branch_code "
                    + "WHERE bill_no = ? AND emp_name <> '' ORDER BY POST_SL_NO";

            pst = con.prepareStatement(sql);
            pst.setInt(1, Integer.parseInt(billNo));
            rs = pst.executeQuery();
            while (rs.next()) {
                int gross = rs.getInt("gross_amt");
                int dedAmt = rs.getInt("ded_amt");
                int pvtDed = rs.getInt("pvt_ded_amt");
                int net = gross - (dedAmt + pvtDed);

                slno += 1;
                row += 1;

                label = new Label(0, row, rs.getString("bank_acc_no"), innercell);//column,row
                sheet.setColumnView(col, widthInChars);
                col++;
                widthInChars = 40;
                sheet.addCell(label);
                label = new Label(1, row, rs.getString("ifsc_code"), innercell);//column,row
                sheet.setColumnView(col, widthInChars);
                col++;
                widthInChars = 16;
                sheet.addCell(label);
                num = new jxl.write.Number(2, row, net, innercell);//column,row
                sheet.setColumnView(col, widthInChars);
                col++;
                widthInChars = 25;
                sheet.addCell(num);
                label = new Label(3, row, "Employee", innercell);//column,row
                sheet.setColumnView(col, widthInChars);
                sheet.addCell(label);
                ArrayList pvtdednP = getPrivateDeductionLoan(rs.getString("AQSL_NO"), billNo);
                if (pvtdednP.size() > 0) {
                    for (int t = 0; t < pvtdednP.size(); t++) {
                        row += 1;
                        PrivateDeduction privdd = (PrivateDeduction) pvtdednP.get(t);
                        label = new Label(0, row, privdd.getLoanaccno(), innercell);
                        sheet.addCell(label);
                        label = new Label(1, row, privdd.getBankifsccode(), innercell);
                        sheet.addCell(label);
                        label = new Label(2, row, privdd.getLoanamt() + "", innercell);
                        sheet.addCell(label);
                        label = new Label(3, row, "Vendor", innercell);
                        sheet.addCell(label);

                    }
                }
            }
            pst = con.prepareStatement("SELECT PVT_DED_AMT,G_OFFICE.BANK_CODE,G_OFFICE.BRANCH_CODE,IFSC_CODE,MICR_CODE,DDO_CUR_ACC_NO FROM BILL_MAST "
                    + "INNER JOIN G_OFFICE ON BILL_MAST.OFF_CODE = G_OFFICE.OFF_CODE "
                    + "LEFT OUTER JOIN G_BRANCH ON G_OFFICE.BRANCH_CODE = G_BRANCH.BRANCH_CODE WHERE BILL_NO=? and PVT_DED_AMT>0");
            pst.setInt(1, Integer.parseInt(billNo));
            rs = pst.executeQuery();
            if (rs.next()) {
                row += 1;
                label = new Label(0, row, rs.getString("DDO_CUR_ACC_NO"), innercell);//column,row
                sheet.setColumnView(col, widthInChars);
                col++;
                widthInChars = 40;
                sheet.addCell(label);
                label = new Label(1, row, rs.getString("IFSC_CODE"), innercell);//column,row
                sheet.setColumnView(col, widthInChars);
                col++;
                widthInChars = 16;
                sheet.addCell(label);
                num = new jxl.write.Number(2, row, rs.getInt("PVT_DED_AMT"), innercell);//column,row
                sheet.setColumnView(col, widthInChars);
                col++;
                widthInChars = 25;
                sheet.addCell(num);
                label = new Label(3, row, "DDO", innercell);//column,row
                sheet.setColumnView(col, widthInChars);
                sheet.addCell(label);

            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            DataBaseFunctions.closeSqlObjects(rs, pst);
            DataBaseFunctions.closeSqlObjects(con);
        }
    }

    public ArrayList getPrivateDeductionLoan(String aqslno, String billno) throws Exception {
        ResultSet rs = null;
        Connection con = null;
        PreparedStatement pst = null;
        ArrayList privateDeduction = new ArrayList();
        String aqDTLS = "";
        try {
            con = this.dataSource.getConnection();
            aqDTLS = getAqDtlsTableName(billno);
            pst = con.prepareStatement("SELECT T2.ACC_NO,AD_AMT,IFSC_CODE,MICR_CODE FROM(SELECT T1.ACC_NO,AD_AMT,BRANCH_CODE FROM "
                    + "(SELECT ACC_NO,AD_AMT AD_AMT,AD_REF_ID FROM " + aqDTLS + " WHERE AQSL_NO=? AND (SCHEDULE='PVTD' OR SCHEDULE='PVTL') AND "
                    + "ACC_NO IS NOT NULL)T1 "
                    + "INNER JOIN EMP_LOAN_SANC ON T1.AD_REF_ID = EMP_LOAN_SANC.LOANID)T2 "
                    + "INNER JOIN G_BRANCH ON T2.BRANCH_CODE = G_BRANCH.BRANCH_CODE");
            pst.setString(1, aqslno);
            rs = pst.executeQuery();

            while (rs.next()) {
                PrivateDeduction pvd = new PrivateDeduction();
                pvd.setLoanaccno(rs.getString("ACC_NO"));
                pvd.setAcctype("Loan (Cash Credit)");
                pvd.setBankifsccode(rs.getString("IFSC_CODE"));
                pvd.setBankmicrcode(rs.getString("MICR_CODE"));
                pvd.setLoanamt(rs.getInt("AD_AMT"));
                privateDeduction.add(pvd);
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        } finally {
            DataBaseFunctions.closeSqlObjects(rs, pst, con);
        }

        return privateDeduction;
    }

    @Override
    public void downloadDACertificatePDF(Document document) {

        try {
            Font f1 = new Font();
            f1.setSize(10);
            f1.setFamily("Times New Roman");

            PdfPTable table = new PdfPTable(1);
            table.setWidths(new int[]{6});
            table.setWidthPercentage(100);

            PdfPCell cell = null;

            cell = new PdfPCell(new Phrase("1.  Certified that all those for whom dearness Allowance has been charged in this Bill are eligible to draw the same\n"
                    + " under the terms & conditions laid down in the Finance Department Office Memorendum No.43937/F.,dated 29-11-1992,No."
                    + " 35864/F., dated 14-08-1992., No.31204/F., dated 17-07-1993, No. 49950/F., dated 27-11-1993, No. 21720/F., dated"
                    + " 16-06-1994 , No. 37371., dated 1-11-1994, No.23058/F.,dated 2-06-1995, No. 41732/F.,dated 25-10-1995, No.23986/F.,"
                    + " dated20-05-1996,No.46402/F.,dated 5-11-96, No.27177/F.,dated 21-061997, No.50461/F.,dated 20-12-1997, No.5744/GA.,"
                    + " dated 4-12-1997,No.33929/F.,dated 12-08-1998,No.52561/F.,dated 23-12-1998,No.39597/F.,dated 26-09-2000,No.31902/F.,"
                    + " dated 21-05-2001,No.33417/F.,dated 15-07-2002,No.8335/F.,dated 28-02-2003,No.43255/F.,dated 6-10-2003,No.7226/F.,"
                    + " dated 21-02-2004 and No.45455/F.,dated 16-10-2004,No.22481/F.,dated 06-05-2005,No.39341/F.,dated15-09-2006,No.55805/F,"
                    + " dated 29-12-2008,No.23134/F dated 14-03-2010,No.31434/F dated 8-10-2013,No.13884/F dated 26-4-2014.,No.29187/F dated 15-10-2014., No.12410/F dated 20-04-2015 and No.27766/F dated 17-10-2015.\n\n2.  Certified that all those for whom Interim Relief has been charged in this Bill are eligible to draw the same under"
                    + " under the terms & conditions laid down in the Finance Department Office Menorandum No.22835/F.,dated 31-5-1995, Office"
                    + " Memorandum No. 8647/F., dated 2-03-1996 and Office Menorandum No.36427/F., dated 08-09-1997.\n\n3.  Certified that in respect of the Employee whose Pay and Allowance have been drawn in this Bill, instalment of all"
                    + " short-term advance due for  recovery from them have been recovered by  deduction  and  that  the  same have been duly"
                    + " exhibited in the register maintanied for the purpose.\n\n4.  Certified that the Government Servent whose Pay and Allowance are being drawn under this Bill has made the deposit"
                    + " as required under the Group Insurance Scheme as per the Resolution No.19043/F., dated 15-04-1976 of the Government in"
                    + " the Finance Department. Recovery of the advance has been shown in this bill in respect of those who have availed the"
                    + " advance from government to make such deposit. \n\n5. Certified that the money drawn in shape of Cash/Draft through the bills presented during the previous months has been"
                    + " distrubuted except the money drawn in A.C. Bills and the amount now proposed for withdrwal in this bill in shape of the"
                    + " Cash/ Bank Draft shall be distributed within a period of therr days from the date of actual drawl from the Bank/Treasury.\n\n6.  Certified that the loan account number in respect of House Building Advance, Car/Scooter/Motor Cycle/moped Advance"
                    + " etc. has not yet been communicated by Accountant General, Odisha to this office as a result the same has not yet been"
                    + " indicated in the relevant recovery schedules and the loan account number would be quoted as and when the same is"
                    + " communicated by Accountant General, Odisha.\n\n7.  All the money drawn in Cash/Bank Draft upto the period 31-03-2001 have been fully disbursed and no amount is laying"
                    + " undisbursed with me.\n\n8.  Certified that in pursuance to Finance Department Office, memorandum No.31271/F., dated 16th July,1999 no amount"
                    + " has been drawn against abolition of base level posts.\n\n9.  Certify that no base level vacant post has been filled up without prior approval of the Finance Department.\n\n10. Certify that the GPF Account nos have been allotted in favour of the employees whose pay have been drawn in"
                    + " this bill A.G., Odisha, has been requested to allot New Account nos vide F.D.L No.19012/F., dated 02-04-2008 in"
                    + " respect of those employees who have been allotted A/C Nos.\n\n11. G.I.S premium has been deposited according to the Basic Pay of all the Employees and a discrepancy if any"
                    + " found later in I shall be held responsible.\n\n12. Certified the annual certificate on proper maintenance of Service Books for the preceding financial year has"
                    + " been sent to the controlling officer F.D and D.T.I.,(O),Bhubaneswar vide F.D letter No._ _ _ _ _ _Date:_ _ _ _ _. \n\n13. Certify that all those from whose Income Tax has not been deducted at source from salary are not liable to pay"
                    + " Income Tax during the Financial Year2005-06.\n\n    Further certified that the annual certificate of verification of services with local records in respect of all"
                    + " the incumbents whose pay is drawn in this bill has been complited.\n\n14. Certified that the certificate prescribed by Govt. have been obtained from the Govt. servents for whom House"
                    + " Rent Allowance has been drawn in this bill has been complited.\n\n15. Certified that where no deduction has been made in this bill on account of Subscription to the GPF from any"
                    + " person from whom pay has been drawn in the bill, the application for admission to the GPF scheme sent to A.G vide\n"
                    + " F.D letter No_ _ _ _ _ _ _ date_ _ _ _ _ _ _ not received back with account number allotted.\n\n", f1));
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell();
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setFixedHeight(10);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("(DRAWING AND DISBURSING OFFICER)", f1));
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            document.add(table);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    @Override
    public void OtcForm52SchedulePDF(Document document, String billNo, OtcFormBean otcBean) {

        try {
            Font textFont = new Font(Font.FontFamily.TIMES_ROMAN, 10f, Font.NORMAL, BaseColor.BLACK);
            Font bigTextFont = new Font(Font.FontFamily.TIMES_ROMAN, 10f, Font.NORMAL, BaseColor.BLACK);
            Font boldTextFont1 = new Font(Font.FontFamily.TIMES_ROMAN, 10f, Font.BOLD | Font.UNDERLINE, BaseColor.BLACK);
            Font boldTextFont = new Font(Font.FontFamily.TIMES_ROMAN, 9f, Font.BOLD, BaseColor.BLACK);
            Font hdrTextFont = new Font(Font.FontFamily.TIMES_ROMAN, 10f, Font.BOLD, BaseColor.BLACK);

            PdfPTable table = new PdfPTable(1);
            table.setWidths(new int[]{7});
            table.setWidthPercentage(100);

            PdfPCell cell = null;

            cell = new PdfPCell(new Phrase("(O.T.C NO.52)", hdrTextFont));
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            cell = new PdfPCell();
            cell.setFixedHeight(10);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("(See Rules-138(I), 265(I) & 368)", hdrTextFont));
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            cell = new PdfPCell();
            cell.setFixedHeight(10);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase(" **********-*-********** ", hdrTextFont));
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            cell = new PdfPCell();
            cell.setFixedHeight(10);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("To", bigTextFont));
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase(StringUtils.repeat(" ", 4) + " The Treasury Officer,", boldTextFont));
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase(StringUtils.repeat(" ", 4) + StringUtils.defaultString(otcBean.getTreasuryOffice()) + StringUtils.repeat(" ", 4) + StringUtils.defaultString(otcBean.getBranchManager()), boldTextFont));
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell();
            cell.setFixedHeight(20);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("Sir,", textFont));
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase(StringUtils.repeat(" ", 4) + "With reference to Finance Department Memo No. PRC-32/0433553/F dated 13-JUL-2005 please pay\n\n"
                    + StringUtils.repeat(" ", 4) + "endorsed Bill No " + StringUtils.defaultString(otcBean.getBillDesc()) + " Dated " + otcBean.getBillDate() + " for net amount Rs. " + StringUtils.defaultString(otcBean.getNetAmount()) + "\n\n"
                    + StringUtils.repeat(" ", 4) + "In words (Rupees " + StringUtils.defaultString(otcBean.getNetAmountWord()) + ") Only in shape of\n\n"
                    + StringUtils.repeat(" ", 4) + "Transfer of credit and a copy of statement duly signed by you showing amount credit to bank Account of\n\n"
                    + StringUtils.repeat(" ", 4) + "the Employees and current account of D.D.O may please be handed over\n\n"
                    + StringUtils.repeat(" ", 4) + "to Sri.........................................................................of this Directorate whose signature attested by me below.", textFont));
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell();
            cell.setFixedHeight(40);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("Yours Faithfully,", textFont));
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
            table.addCell(cell);

            cell = new PdfPCell();
            cell.setFixedHeight(10);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase(StringUtils.repeat(" ", 4) + "Attested Specimen Signature", textFont));
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase(StringUtils.repeat(" ", 4) + "of the Manager.", textFont));
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell();
            cell.setFixedHeight(10);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("Signature of Drawing & Disbursing Officer", textFont));
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
            table.addCell(cell);

            cell = new PdfPCell();
            cell.setFixedHeight(40);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("Details of Transfer of Credit", boldTextFont1));
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            cell = new PdfPCell();
            cell.setFixedHeight(10);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase(StringUtils.repeat(" ", 4) + "..................................................S.B Account of the........................................................", textFont));
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_LEFT);
            table.addCell(cell);

            cell = new PdfPCell();
            cell.setFixedHeight(10);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase(StringUtils.repeat(" ", 4) + "No. of employees Rs....................................................................................No. of D.D.OS", textFont));
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_LEFT);
            table.addCell(cell);

            cell = new PdfPCell();
            cell.setFixedHeight(10);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase(StringUtils.repeat(" ", 4) + "No. ................................... of...................................................................................No. of employees", textFont));
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_LEFT);
            table.addCell(cell);

            cell = new PdfPCell();
            cell.setFixedHeight(10);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase(StringUtils.repeat(" ", 4) + "............................................................................................to Current Account of D.D.O towards loan.", textFont));
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_LEFT);
            table.addCell(cell);

            document.add(table);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    @Override
    public void OtcForm40SchedulePDF(Document document, String billNo, OtcPlanForm40Bean otcBean, String payHead, List alowanceList, List deductList) {

        try {
            Font textFont = new Font(Font.FontFamily.TIMES_ROMAN, 8.8f, Font.NORMAL, BaseColor.BLACK);
            Font bigTextFont = new Font(Font.FontFamily.TIMES_ROMAN, 9f, Font.NORMAL, BaseColor.BLACK);
            Font boldTextFont1 = new Font(Font.FontFamily.TIMES_ROMAN, 9f, Font.BOLD | Font.UNDERLINE, BaseColor.BLACK);
            Font boldTextFont = new Font(Font.FontFamily.TIMES_ROMAN, 9f, Font.BOLD, BaseColor.BLACK);
            Font hdrTextFont = new Font(Font.FontFamily.TIMES_ROMAN, 10f, Font.BOLD, BaseColor.BLACK);

            PdfPTable table = new PdfPTable(7);
            table.setWidths(new float[]{1, 1, 1, 1, 1, 1, 1});
            table.setWidthPercentage(100);

            PdfPCell cell = null;

            cell = new PdfPCell(new Phrase(StringUtils.defaultString(otcBean.getOfficeName()), hdrTextFont));
            cell.setColspan(7);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("TAN NO:" + StringUtils.defaultString(otcBean.getTanNo()), hdrTextFont));
            cell.setColspan(7);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("O.T.C. 40" + ((otcBean.getOtcStatus() != null) ? "(" + otcBean.getOtcStatus() + ")" : "") + "   (Ref Id-" + StringUtils.defaultString(otcBean.getBenRefNo()) + ")" + StringUtils.repeat(" ", 20) + "Token No: " + StringUtils.defaultString(otcBean.getToken()), hdrTextFont));
            cell.setColspan(7);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            cell = new PdfPCell();
            cell.setColspan(7);
            cell.setFixedHeight(10);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("Go No.  62710", boldTextFont));
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("Dated     07-SEP-1996", boldTextFont));
            cell.setColspan(2);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("Bill No:" + StringUtils.defaultString(otcBean.getBillDesc()), boldTextFont));
            cell.setColspan(2);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("Date:" + StringUtils.defaultString(otcBean.getBillDate()), boldTextFont));
            cell.setColspan(2);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("", boldTextFont));
            cell.setColspan(2);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase(" Head of Account: " + otcBean.getDdoCode(), boldTextFont));
            cell.setColspan(3);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("", boldTextFont));
            cell.setColspan(2);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell();
            cell.setColspan(7);
            cell.setFixedHeight(10);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("Demand No", textFont));
            //cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("Major", textFont));
            //cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("Sub Major", textFont));
            //cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("Minor", textFont));
            //cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("Sub Minor", textFont));
            //cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("Detail", textFont));
            //cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("Charge/Voted", textFont));
            //cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase(StringUtils.defaultString(otcBean.getDemandNo()), textFont));
            //cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase(StringUtils.defaultString(otcBean.getMajorHead()), textFont));
            //cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase(StringUtils.defaultString(otcBean.getSubMajorHead()), textFont));
            //cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase(StringUtils.defaultString(otcBean.getMinorHead()), textFont));
            //cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase(StringUtils.defaultString(otcBean.getSubMinorHead()), textFont));
            //cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase(StringUtils.defaultString(otcBean.getSubMinorHead2()), textFont));
            //cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase(StringUtils.defaultString(otcBean.getSubMinorHead3()), textFont));
            //cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            cell = new PdfPCell();
            cell.setColspan(7);
            cell.setFixedHeight(10);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            document.add(table);

            table = new PdfPTable(5);
            table.setWidths(new float[]{1.7f, 1.5f, 1.5f, 1.5f, 1.5f});
            table.setWidthPercentage(100);

            Phrase phrs = new Phrase();
            Chunk c1 = new Chunk("Received the sum of Rs.", textFont);
            Chunk c2 = new Chunk(StringUtils.defaultString(otcBean.getGrossTot()), boldTextFont);
            Chunk c3 = new Chunk(" (", textFont);
            Chunk c4 = new Chunk(StringUtils.defaultString(otcBean.getGrandTotinWord()), boldTextFont);
            Chunk c5 = new Chunk(") only being the Grant-in to ", textFont);
            Chunk c6 = new Chunk(StringUtils.defaultString(otcBean.getOfficeName()), boldTextFont);
            Chunk c7 = new Chunk(" for the month of " + StringUtils.defaultString(otcBean.getBillMonth()) + "-" + StringUtils.defaultString(otcBean.getBillYear()) + " "
                    + "placed by the ____________________in his letter No.                         dated               ", textFont);
            phrs.add(c1);
            phrs.add(c2);
            phrs.add(c3);
            phrs.add(c4);
            phrs.add(c5);
            phrs.add(c6);
            phrs.add(c7);

            cell = new PdfPCell(phrs);
            cell.setColspan(5);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell();
            cell.setColspan(5);
            cell.setFixedHeight(10);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            if (payHead == null || payHead.equals("")) {
                payHead = "";
            }
            cell = new PdfPCell(new Phrase("Pay + GP     " + payHead + (otcBean.getOtcCode() != null && otcBean.getOtcCode().equals("SP") ? "(112)" : ""), textFont));
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase(StringUtils.defaultString(otcBean.getBasicPlusGp()), textFont));
            cell.setColspan(4);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            OtcPlanForm40Bean otc40 = null;
            if (alowanceList != null && alowanceList.size() > 0) {
                PdfPTable innertable = null;
                PdfPCell innercell = null;

                for (int i = 0; i < alowanceList.size(); i++) {
                    otc40 = (OtcPlanForm40Bean) alowanceList.get(i);
                    if (otc40.getBtId() != null && !otc40.getBtId().equals("") && !otc40.getAdCode().equals("GP")) {
                        //start of inner table
                        innertable = new PdfPTable(2);
                        innertable.setWidths(new int[]{1, 1});
                        innertable.setWidthPercentage(100);

                        innercell = new PdfPCell(new Phrase(StringUtils.defaultString(otc40.getAdCode()) + ((otc40.getNowDedn() != null) ? " (" : "") + StringUtils.defaultString(otc40.getNowDedn()) + ((otc40.getNowDedn() != null) ? ")" : ""), textFont));
                        innercell.setBorder(Rectangle.NO_BORDER);
                        innertable.addCell(innercell);

                        innercell = new PdfPCell(new Phrase(StringUtils.defaultString(otc40.getBtId()), textFont));
                        innercell.setBorder(Rectangle.NO_BORDER);
                        innertable.addCell(innercell);
                        //end of inner table

                        cell = new PdfPCell(innertable);
                        cell.setBorder(Rectangle.NO_BORDER);
                        table.addCell(cell);
                        cell = new PdfPCell(new Phrase(StringUtils.defaultString("" + otc40.getAdAmt()), textFont));
                        cell.setColspan(4);
                        cell.setBorder(Rectangle.NO_BORDER);
                        table.addCell(cell);
                    }
                }
            }

            cell = new PdfPCell();
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase(StringUtils.repeat("-", 30), textFont));
            cell.setColspan(4);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("Grand Total", boldTextFont));
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase(StringUtils.defaultString(otcBean.getGrossTot()), boldTextFont));
            cell.setColspan(4);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell();
            cell.setColspan(3);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase(StringUtils.defaultString(otcBean.getDdoName()), boldTextFont));
            cell.setColspan(2);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            cell = new PdfPCell();
            cell.setColspan(3);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase(StringUtils.defaultString(otcBean.getOfficeName()), boldTextFont));
            cell.setColspan(2);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            Phrase phrs1 = new Phrase();
            Chunk c11 = new Chunk("Countersigned and passed for Rs ", textFont);
            Chunk c22 = new Chunk(StringUtils.defaultString(otcBean.getGrossTot()) + " ( ", boldTextFont);
            Chunk c33 = new Chunk(StringUtils.defaultString(otcBean.getGrandTotinWord()) + " ) ", boldTextFont);
            Chunk c44 = new Chunk("only.", textFont);

            phrs1.add(c11);
            phrs1.add(c22);
            phrs1.add(c33);
            phrs1.add(c44);

            cell = new PdfPCell(phrs1);
            cell.setColspan(5);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase(" ", textFont));
            cell.setColspan(5);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell();
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell();
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("Allotment Received", textFont));
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell();
            cell.setColspan(2);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("Collector/Sub-Collector", textFont));
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
            cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
            table.addCell(cell);

            cell = new PdfPCell();
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("Expenditure including this bill", boldTextFont1));
            cell.setColspan(2);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell();
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell();
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell();
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("Balance", textFont));
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell();
            cell.setColspan(2);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("Details of Bill", boldTextFont1));
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
            table.addCell(cell);

            cell = new PdfPCell();
            cell.setColspan(4);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("Net Amount", textFont));
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase(StringUtils.defaultString(otcBean.getNetAmount()), boldTextFont));
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell();
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase(StringUtils.defaultString(otcBean.getDdoName()), boldTextFont));
            cell.setColspan(2);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase());
            cell.setColspan(3);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase(StringUtils.defaultString(otcBean.getOfficeName()), boldTextFont));
            cell.setColspan(2);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            if (deductList != null && deductList.size() > 0) {
                Iterator itr = deductList.iterator();
                PdfPTable innertable = null;
                PdfPCell innercell = null;

                while (itr.hasNext()) {
                    otc40 = (OtcPlanForm40Bean) itr.next();
                    innertable = new PdfPTable(2);
                    innertable.setWidths(new int[]{1, 1});
                    innertable.setWidthPercentage(100);

                    innercell = new PdfPCell(new Phrase(StringUtils.defaultString(otc40.getAdCode()) + ((otc40.getNowDedn() != null) ? " (" : "") + StringUtils.defaultString(otc40.getNowDedn()) + ((otc40.getNowDedn() != null) ? ")" : ""), textFont));
                    innercell.setBorder(Rectangle.NO_BORDER);
                    innertable.addCell(innercell);

                    innercell = new PdfPCell(new Phrase(StringUtils.defaultString(otc40.getBtId()), textFont));
                    innercell.setBorder(Rectangle.NO_BORDER);
                    innercell.setHorizontalAlignment(Element.ALIGN_CENTER);
                    innertable.addCell(innercell);

                    cell = new PdfPCell(innertable);
                    cell.setBorder(Rectangle.NO_BORDER);
                    table.addCell(cell);

                    cell = new PdfPCell(new Phrase(StringUtils.defaultString(otc40.getAdAmt() + ""), textFont));
                    cell.setBorder(Rectangle.NO_BORDER);
                    table.addCell(cell);

                    cell = new PdfPCell();
                    cell.setColspan(3);
                    cell.setBorder(Rectangle.NO_BORDER);
                    table.addCell(cell);

                }
            }

            cell = new PdfPCell();
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase(StringUtils.repeat("-", 29), textFont));
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell();
            cell.setColspan(3);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("Gross Total", boldTextFont));
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase(StringUtils.defaultString(otcBean.getDeductTot()), boldTextFont));
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell();
            cell.setColspan(3);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase(" ", textFont));
            cell.setColspan(5);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell();
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("FOR USE IN THE TREASURY", boldTextFont1));
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setColspan(4);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("CASH", textFont));
            cell.setColspan(5);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("Transferred to GPF 7058", textFont));
            cell.setColspan(5);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("Professional Tax", textFont));
            cell.setColspan(5);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("Income Tax", textFont));
            cell.setColspan(5);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("LIC", textFont));
            cell.setColspan(5);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("Grand Total", textFont));
            cell.setColspan(5);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("Examined", textFont));
            cell.setColspan(5);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell();
            cell.setColspan(5);
            cell.setFixedHeight(10);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("Treasury Accountant", textFont));
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("DA", textFont));
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
            table.addCell(cell);

            cell = new PdfPCell();
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase(otcBean.getTreasuryName(), textFont));
            cell.setColspan(2);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("Admitted", textFont));
            cell.setColspan(5);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("Collection", textFont));
            cell.setColspan(5);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("Reason for Objection", textFont));
            cell.setColspan(5);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("Auditor", textFont));
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("Superintendent", textFont));
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
            table.addCell(cell);

            cell = new PdfPCell();
            cell.setColspan(3);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase(" ", textFont));
            cell.setColspan(5);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            document.add(table);
            document.newPage();

            table = new PdfPTable(5);
            table.setWidths(new float[]{1, 1.5f, 1.5f, 1.5f, 1.5f});
            table.setWidthPercentage(100);

            cell = new PdfPCell(new Phrase("Under Rs " + StringUtils.defaultString(otcBean.getNetAmtUnder()) + "(" + StringUtils.defaultString(otcBean.getNetAmtUnderWord()) + ") Only", textFont));
            cell.setColspan(5);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell();
            cell.setColspan(5);
            cell.setFixedHeight(30);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase(StringUtils.defaultString(otcBean.getDdoName()), textFont));
            cell.setColspan(2);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            cell = new PdfPCell();
            cell.setColspan(3);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase(StringUtils.defaultString(otcBean.getOfficeName()), textFont));
            cell.setColspan(2);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            cell = new PdfPCell();
            cell.setColspan(3);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell();
            cell.setColspan(5);
            cell.setFixedHeight(10);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell();
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("RECEIVED CONTENTS", textFont));
            cell.setColspan(2);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("Submitted By", textFont));
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell();
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell();
            cell.setColspan(5);
            cell.setFixedHeight(20);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell();
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase(StringUtils.defaultString(otcBean.getDdoName()), textFont));
            cell.setColspan(2);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase(StringUtils.defaultString(otcBean.getDdoName()), textFont));
            cell.setColspan(2);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            cell = new PdfPCell();
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase(StringUtils.defaultString(otcBean.getOfficeName()), textFont));
            cell.setColspan(2);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase(StringUtils.defaultString(otcBean.getOfficeName()), textFont));
            cell.setColspan(2);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            cell = new PdfPCell();
            cell.setColspan(5);
            cell.setFixedHeight(20);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell();
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("II nd discharge to", textFont));
            cell.setColspan(2);
            cell.setBorder(Rectangle.NO_BORDER);
            //cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            cell = new PdfPCell();
            cell.setColspan(2);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            cell = new PdfPCell();
            cell.setColspan(5);
            cell.setFixedHeight(20);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell();
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase(StringUtils.defaultString(otcBean.getDdoName()), textFont));
            cell.setColspan(2);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase(StringUtils.defaultString(otcBean.getDdoName()), textFont));
            cell.setColspan(2);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            cell = new PdfPCell();
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase(StringUtils.defaultString(otcBean.getOfficeName()), textFont));
            cell.setColspan(2);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase(StringUtils.defaultString(otcBean.getOfficeName()), textFont));
            cell.setColspan(2);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            cell = new PdfPCell();
            cell.setColspan(5);
            cell.setFixedHeight(20);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell();
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("RECEIVED PAYMENTS", textFont));
            cell.setColspan(2);
            cell.setBorder(Rectangle.NO_BORDER);
            //cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("Signature Attested", textFont));
            cell.setColspan(2);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            cell = new PdfPCell();
            cell.setColspan(5);
            cell.setFixedHeight(30);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell();
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase(StringUtils.defaultString(otcBean.getDdoName()), textFont));
            cell.setColspan(2);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase(StringUtils.defaultString(otcBean.getDdoName()), textFont));
            cell.setColspan(2);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            cell = new PdfPCell();
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase(StringUtils.defaultString(otcBean.getOfficeName()), textFont));
            cell.setColspan(2);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase(StringUtils.defaultString(otcBean.getOfficeName()), textFont));
            cell.setColspan(2);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            cell = new PdfPCell();
            cell.setColspan(5);
            cell.setFixedHeight(20);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("1.Certified that the D.A. claimed @ 119% vide Go No 27766/F Dated 17-10-2015", textFont));
            cell.setColspan(5);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("2.Certified that no arrear salary and leave salary has been included in this bill.", textFont));
            cell.setColspan(5);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("3.Certified that the amount claimed in this bill was not drawn previously.", textFont));
            cell.setColspan(5);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("4.Certified that the amount claimed in this bill in favour of this college U.C of previous quarters has already been submitted.", textFont));
            cell.setColspan(5);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("5.Certified that this previous drawal have already examined.", textFont));
            cell.setColspan(5);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("6.certified that the allotment has been fully and properly utilized.", textFont));
            cell.setColspan(5);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("7.Certified that the fees and fines has been deposited in Govt. Treasury.", textFont));
            cell.setColspan(5);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("8.Certified that the net claim of this will be transferred electronically in to the bank account of the beneficiaries and the correct bank details of the"
                    + " beneficiaries have been furnished in a separate list after due verification and uploaded in the treasury portal bearing reference ID-" + StringUtils.defaultString(otcBean.getBenRefNo()), textFont));
            cell.setColspan(5);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell();
            cell.setColspan(5);
            cell.setFixedHeight(20);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell();
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell();
            cell.setColspan(2);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase(StringUtils.defaultString(otcBean.getDdoName()), textFont));
            cell.setColspan(2);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            cell = new PdfPCell();
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell();
            cell.setColspan(2);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase(StringUtils.defaultString(otcBean.getOfficeName()), textFont));
            cell.setColspan(2);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            document.add(table);

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    @Override
    public void OTCForm84PDF(Document document, String billNo, OTC84Bean otc84Bean) {

        try {
            Font textFont = new Font(Font.FontFamily.TIMES_ROMAN, 9f, Font.NORMAL, BaseColor.BLACK);
            Font boldTextFont1 = new Font(Font.FontFamily.TIMES_ROMAN, 9f, Font.BOLD | Font.UNDERLINE, BaseColor.BLACK);
            Font boldTextFont = new Font(Font.FontFamily.TIMES_ROMAN, 9f, Font.BOLD, BaseColor.BLACK);
            Font hdrTextFont = new Font(Font.FontFamily.TIMES_ROMAN, 10f, Font.BOLD, BaseColor.BLACK);

            PdfPTable table = new PdfPTable(1);
            table.setWidths(new int[]{6});
            table.setWidthPercentage(100);

            PdfPCell cell = null;

            cell = new PdfPCell(new Phrase("O.T.C. 84", hdrTextFont));
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("See Subsidary Rule(256)(1)(351)", hdrTextFont));
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("FORM OF ADVICE", hdrTextFont));
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("Letter No__________________________________/ Date", hdrTextFont));
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            cell = new PdfPCell();
            cell.setFixedHeight(10);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("To", boldTextFont));
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("The Treasury officer," + StringUtils.defaultString(otc84Bean.getTreasuryOffice()), boldTextFont1));
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            /*cell = new PdfPCell(new Phrase(StringUtils.defaultString(opfb.getBranchmanager())+((opfb.getBranchname() != null)?","+opfb.getBranchname():""),f1));
             cell.setBorder(Rectangle.NO_BORDER);
             table.addCell(cell);*/
            cell = new PdfPCell();
            cell.setFixedHeight(20);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell();
            cell.setFixedHeight(10);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("Sub- Advice for payment of salary for the month of " + StringUtils.defaultString(otc84Bean.getBillMonth()) + " - " + StringUtils.defaultString(otc84Bean.getBillYear()), boldTextFont));
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell();
            cell.setFixedHeight(10);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("Sir,", boldTextFont));
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell();
            cell.setFixedHeight(10);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            Chunk c1 = new Chunk("I am to intimate that the Bill No : ", textFont);
            Chunk c2 = new Chunk(StringUtils.defaultString(otc84Bean.getBillDesc()), boldTextFont);
            Chunk c3 = new Chunk(" / ", textFont);
            Chunk c4 = new Chunk(StringUtils.defaultString(otc84Bean.getBillDate()), boldTextFont);
            Chunk c5 = new Chunk(" amounting to Rs ", textFont);
            Chunk c6 = new Chunk(StringUtils.defaultString(otc84Bean.getGross()), boldTextFont);
            Chunk c7 = new Chunk(" /- (Rupees  ", textFont);
            Chunk c8 = new Chunk(StringUtils.defaultString(otc84Bean.getGrossAmountWord()), boldTextFont);
            Chunk c9 = new Chunk(" )only has been counter signed by me today in favor of the", textFont);
            Chunk c10 = new Chunk(otc84Bean.getOffName(), boldTextFont);

            Phrase p1 = new Phrase();
            p1.add(c1);
            p1.add(c2);
            p1.add(c3);
            p1.add(c4);
            p1.add(c5);
            p1.add(c6);
            p1.add(c7);
            p1.add(c8);
            p1.add(c9);
            p1.add(c10);

            cell = new PdfPCell(p1);
            cell.setFixedHeight(20);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell();
            cell.setFixedHeight(20);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("Yours Faithfully", textFont));
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
            table.addCell(cell);

            cell = new PdfPCell();
            cell.setFixedHeight(20);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("Signature of", textFont));
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("Counter Signature Authority", textFont));
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
            table.addCell(cell);

            cell = new PdfPCell();
            cell.setFixedHeight(10);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("Memo No.................", textFont));
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            Chunk c11 = new Chunk("Copy with bill in original are sent to ", textFont);
            Chunk c22 = new Chunk(StringUtils.defaultString(otc84Bean.getOffName()), boldTextFont);
            Chunk c33 = new Chunk(" for information and directed to send the monthly return of expenditure of each month along with bill no ", textFont);
            Chunk c44 = new Chunk(" and date and TV No and date and amount of drawal to the _______________________________________________, ", textFont);
            Chunk c55 = new Chunk(" At the earliest possible under information to this office. ", textFont);

            Phrase p2 = new Phrase();
            p2.add(c11);
            p2.add(c22);
            p2.add(c33);
            p2.add(c44);
            p2.add(c55);

            cell = new PdfPCell(p2);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell();
            cell.setFixedHeight(10);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("", textFont));
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
            table.addCell(cell);

            cell = new PdfPCell();
            cell.setFixedHeight(20);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("Signature of", textFont));
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("Counter Signature Authority", textFont));
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("Memo No.................", textFont));
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("Copy forwarded to the ________________________________________________________.", textFont));
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell();
            cell.setFixedHeight(10);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("", textFont));
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
            table.addCell(cell);

            cell = new PdfPCell();
            cell.setFixedHeight(20);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("Signature of", textFont));
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("Counter Signature Authority", textFont));
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
            table.addCell(cell);

            document.add(table);

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    @Override
    public List getCSDataList(String billNo, int year, int month) {

        Connection con = null;
        PreparedStatement pst = null;
        ResultSet rs = null;
        List emplist = new ArrayList();
        ConveyanceBean csBean = null;
        int i = 0;
        try {
            con = this.dataSource.getConnection();

//            String sql = "SELECT AD_AMT,AQ_MAST.AQSL_NO,AQ_MAST.EMP_NAME,AQ_MAST.CUR_DESG FROM  (SELECT * FROM AQ_MAST WHERE AQ_MAST.BILL_NO='"+billNo+"')AQ_MAST "
//                    + " INNER JOIN  (SELECT AQSL_NO,AD_AMT FROM AQ_DTLS WHERE AD_CODE='CC' AND AD_TYPE='D')AQ_DTLS ON AQ_DTLS.AQSL_NO=AQ_MAST.AQSL_NO ORDER BY EMP_NAME";
            String csSql = "select ad_amt,aq.aqsl_no,aq.emp_name,aq.cur_desg from aq_mast aq, aq_dtls ad where aq.aqsl_no=ad.aqsl_no and aq.aq_year=ad.aq_year and aq.aq_month=ad.aq_month "
                    + "and aq.aq_month = ? and aq.aq_year = ? and aq.bill_no = ? and ad_code = 'CC' and ad_type= 'D' order by emp_name;";
            pst = con.prepareStatement(csSql);
            pst.setInt(1, month);
            pst.setInt(2, year);
            pst.setInt(3, Integer.parseInt(billNo));
            rs = pst.executeQuery();
            while (rs.next()) {
                csBean = new ConveyanceBean();

                i++;
                csBean.setSlNo(i + "");
                csBean.setEmpName(rs.getString("EMP_NAME"));
                csBean.setEmpDesg(rs.getString("CUR_DESG"));
                csBean.setAmtDed(rs.getInt("AD_AMT"));

                emplist.add(csBean);
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            DataBaseFunctions.closeSqlObjects(rs, pst);
            DataBaseFunctions.closeSqlObjects(con);
        }
        return emplist;
    }

    @Override
    public void getConveyanceSchedulePDF(Document document, String billNo, CommonReportParamBean crb, List dataList) {

        int pageNo = 0;
        int slno = 0;
        double total = 0;
        String totalFig = "";
        try {
            Font textFont = new Font(Font.FontFamily.TIMES_ROMAN, 9f, Font.NORMAL, BaseColor.BLACK);
            Font boldTextFont = new Font(Font.FontFamily.TIMES_ROMAN, 9f, Font.BOLD, BaseColor.BLACK);
            Font hdrTextFont = new Font(Font.FontFamily.TIMES_ROMAN, 10f, Font.BOLD, BaseColor.BLACK);

            PdfPTable table = new PdfPTable(4);
            table.setWidths(new float[]{1, 3, 4, 1});
            table.setWidthPercentage(100);

            PdfPCell cell = null;

            if (dataList != null && dataList.size() > 0) {
                ConveyanceBean obj = null;

                for (int i = 0; i < dataList.size(); i++) {
                    obj = (ConveyanceBean) dataList.get(i);
                    total = total + obj.getAmtDed();

                    slno++;
                    if (pageNo == 0) {
                        pageNo++;
                        printHeader(table, cell, hdrTextFont, crb, pageNo);
                    }
                    cell = new PdfPCell(new Phrase(obj.getSlNo(), textFont));
                    cell.setFixedHeight(20);
                    cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                    table.addCell(cell);

                    cell = new PdfPCell(new Phrase(StringUtils.defaultString(obj.getEmpName()), textFont));
                    cell.setFixedHeight(20);
                    table.addCell(cell);

                    cell = new PdfPCell(new Phrase(StringUtils.defaultString(obj.getEmpDesg()), textFont));
                    cell.setFixedHeight(20);
                    table.addCell(cell);

                    cell = new PdfPCell(new Phrase(StringUtils.defaultString(obj.getAmtDed() + ""), textFont));
                    cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
                    cell.setFixedHeight(20);
                    table.addCell(cell);

                    if (slno % 20 == 0) {
                        printFooter(table, cell, boldTextFont, total);
                        document.add(table);
                        document.newPage();

                        table = new PdfPTable(4);
                        table.setWidths(new float[]{1, 3, 4, 1});
                        table.setWidthPercentage(100);

                        pageNo++;
                        printHeader(table, cell, hdrTextFont, crb, pageNo);
                    }
                    if (slno == dataList.size()) {
                        printGrandTotal(table, cell, boldTextFont, total);

                        cell = new PdfPCell();
                        cell.setColspan(4);
                        cell.setBorder(Rectangle.NO_BORDER);
                        cell.setFixedHeight(20);
                        table.addCell(cell);

                        cell = new PdfPCell();
                        cell.setColspan(4);
                        cell.setBorder(Rectangle.NO_BORDER);
                        cell.setFixedHeight(20);
                        table.addCell(cell);

                        cell = new PdfPCell(new Phrase(StringUtils.defaultString(crb.getDdoname()), boldTextFont));
                        cell.setColspan(4);
                        cell.setBorder(Rectangle.NO_BORDER);
                        cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
                        table.addCell(cell);

                        cell = new PdfPCell(new Phrase("", boldTextFont));
                        cell.setColspan(3);
                        cell.setBorder(Rectangle.NO_BORDER);
                        cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
                        table.addCell(cell);

                        cell = new PdfPCell(new Phrase("Date: ", boldTextFont));
                        cell.setBorder(Rectangle.NO_BORDER);
                        cell.setHorizontalAlignment(Element.ALIGN_LEFT);
                        table.addCell(cell);
                    }
                }
            }

            if (slno == 0) {
                cell = new PdfPCell(new Phrase(" There is no record ", boldTextFont));
                cell.setBorder(Rectangle.BOTTOM);
                cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                cell.setColspan(4);
                table.addCell(cell);
            }

            document.add(table);

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void printHeader(PdfPTable table, PdfPCell cell, Font f1, CommonReportParamBean crb, int pageNo) throws Exception {

        cell = new PdfPCell(new Phrase("Page : " + pageNo, f1));
        cell.setColspan(4);
        cell.setBorder(Rectangle.NO_BORDER);
        cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase(StringUtils.defaultString(crb.getOfficename()), f1));
        cell.setColspan(4);
        cell.setBorder(Rectangle.NO_BORDER);
        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("RECOVERY SCHEDULE OF CONVEYANCE CHARGES for the month of : " + crb.getAqMonthAsName() + " - " + crb.getAqyear(), f1));
        cell.setColspan(4);
        cell.setBorder(Rectangle.NO_BORDER);
        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("Bill No : " + StringUtils.defaultString(crb.getBilldesc()), f1));
        cell.setColspan(4);
        cell.setBorder(Rectangle.NO_BORDER);
        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase(" **********-*-********** ", f1));
        cell.setColspan(4);
        cell.setBorder(Rectangle.NO_BORDER);
        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase(StringUtils.repeat("-", 155), f1));
        cell.setColspan(4);
        cell.setBorder(Rectangle.NO_BORDER);
        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(cell);

        cell = new PdfPCell(new PdfPCell(new Phrase("Sl No", f1)));
        cell.setBorder(Rectangle.BOX);
        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("Name of the Staff", f1));
        cell.setBorder(Rectangle.BOX);
        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("Designation", f1));
        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("Amount Deducted", f1));
        cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
        table.addCell(cell);
    }

    private void printFooter(PdfPTable table, PdfPCell cell, Font f1, double total) throws Exception {

        cell = new PdfPCell();
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("Total", f1));
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);

        cell = new PdfPCell();
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase(total + "", f1));
        cell.setBorder(Rectangle.NO_BORDER);
        cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
        table.addCell(cell);
    }

    private void printGrandTotal(PdfPTable table, PdfPCell cell, Font f1, double total) throws Exception {

        cell = new PdfPCell(new Phrase(StringUtils.repeat("-", 194), f1));
        cell.setColspan(7);
        cell.setBorder(Rectangle.NO_BORDER);
        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("Grand Total", f1));
        cell.setColspan(6);
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase(total + "", f1));
        cell.setBorder(Rectangle.NO_BORDER);
        cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase(StringUtils.repeat("-", 194), f1));
        cell.setColspan(7);
        cell.setBorder(Rectangle.NO_BORDER);
        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(cell);

        String totalFig = "";
        if (total > 0) {
            totalFig = Numtowordconvertion.convertNumber((int) total);
        }

        cell = new PdfPCell(new Phrase("In Words (Rupees " + totalFig + " ) Only", f1));
        cell.setColspan(7);
        cell.setBorder(Rectangle.NO_BORDER);
        cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
        table.addCell(cell);

    }

    @Override
    public WrrScheduleBean getWRRScheduleEmployeeList(String billno, String schedule, int aqMonth, int aqYear) {

        Connection con = null;
        WrrScheduleBean wrrBean = new WrrScheduleBean();
        PreparedStatement pstmtBtId = null;
        ResultSet rsBtId = null;

        List empDataList = new ArrayList();
        String address1 = null;

        int slno = 0;
        int cnt1 = 0;
        int pageNo = 0;
        int recAmt = 0;
        int payBillMonth = 0;
        int payBillYear = 0;
        int totaldeduct = 0;
        String poolName = "";
        String demandNo = "";
        String poolDesc = "";

        try {
            con = repodataSource.getConnection();

            String wrrBtId = null;
            String swrBtId = null;
            pstmtBtId = con.prepareStatement("SELECT * FROM G_AD_LIST WHERE AD_CODE_NAME='WRR' OR AD_CODE_NAME='SWR'");
            rsBtId = pstmtBtId.executeQuery();
            while (rsBtId.next()) {
                if (rsBtId.getString("AD_CODE_NAME").equals("WRR")) {
                    wrrBtId = rsBtId.getString("BT_ID");
                } else if (rsBtId.getString("AD_CODE_NAME").equals("SWR")) {
                    swrBtId = rsBtId.getString("BT_ID");
                }
            }

            ArrayList poolNameList = new ArrayList();
            ArrayList poolAmountList = new ArrayList();
            ArrayList qpoollist = getQuarterList();
            for (int m = 0; m < qpoollist.size(); m++) {
                QuarterPool qpool = (QuarterPool) qpoollist.get(m);
                totaldeduct = 0;
                String btid = null;
                if (schedule.equals("HRR")) {
                    btid = qpool.getBtid();
                } else if (schedule.equals("WRR")) {
                    btid = wrrBtId;
                } else {
                    btid = swrBtId;
                }

                String isDefault = qpool.getIsdefault();
                String qtrPoolId = qpool.getQid();
                poolName = qpool.getPoolName();
                demandNo = qpool.getDemandNoString();

                empDataList = getWRRSchEmpList4Pdf(billno, schedule, qtrPoolId, aqMonth, aqYear);
                if (empDataList != null && empDataList.size() > 0) {
                    wrrBean.setEmplist(empDataList);
                }
                if (totaldeduct > 0) {
                    poolNameList.add(poolName);
                    poolAmountList.add(new Integer(totaldeduct));
                }

            }

        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            DataBaseFunctions.closeSqlObjects(rsBtId, pstmtBtId, con);
        }
        return wrrBean;
    }

    private List getWRRSchEmpList4PdfF1(String billno, String schedule, String qtrPoolId, int aqMonth, int aqYear) {

        Connection con = null;
        Statement stmt = null;
        ResultSet rs = null;
        WrrScheduleBean wrrBean = null;
        ArrayList wrrList = new ArrayList();
        String aqDtlsTbl = "";
        int slno = 1;
        int recamt = 0;

        try {
            aqDtlsTbl = getAqDtlsTableName(billno);

            con = repodataSource.getConnection();
            stmt = con.createStatement();
            /*String dataQry = "select GPF_ACC_NO,EMP_QTR_ALLOT.QUARTER_NO,EMP_QTR_ALLOT.ADDRESS,AQ_MAST.EMP_NAME,AQ_MAST.EMP_CODE,AQ_MAST.CUR_DESG,"
             + "AQ_DTLS.ACC_NO,AQ_DTLS.REF_DESC,AQ_DTLS.AD_AMT,POST_SL_NO,consumer_no from "
             + "( select GPF_ACC_NO,aq_mast.EMP_CODE,aq_mast.EMP_NAME,aq_mast.CUR_DESG,aq_mast.AQSL_NO,POST_SL_NO from AQ_MAST where "
             + "BILL_NO = " + billno + " and AQ_MONTH = '" + aqMonth + "' AND AQ_YEAR = '" + aqYear + "' ORDER BY POST_SL_NO) AQ_MAST "
             + "INNER JOIN " + aqDtlsTbl + "  as AQ_DTLS on AQ_DTLS.AQSL_NO=AQ_MAST.AQSL_NO "
             + "inner join (select quarter_no, EMP_ID, address, consumer_no, QA_ID from emp_qtr_allot WHERE Q_ID = " + qtrPoolId + " AND "
             + "(if_surrendered IS NULL OR if_surrendered != 'Y'))emp_qtr_allot on emp_qtr_allot.EMP_ID=AQ_MAST.EMP_CODE AND emp_qtr_allot.QA_ID=AQ_DTLS.REF_DESC where SCHEDULE='" + schedule + "' AND AD_TYPE='D' AND AD_AMT >0 ORDER BY POST_SL_NO";*/

            String dataQry = "select GPF_ACC_NO,EMP_QTR_ALLOT.QUARTER_NO,EMP_QTR_ALLOT.ADDRESS,AQ_MAST.EMP_NAME,AQ_MAST.EMP_CODE,AQ_MAST.CUR_DESG,"
                    + "AQ_DTLS.ACC_NO,AQ_DTLS.AD_AMT,POST_SL_NO,consumer_no from "
                    + "( select GPF_ACC_NO,aq_mast.EMP_CODE,aq_mast.EMP_NAME,aq_mast.CUR_DESG,aq_mast.AQSL_NO,POST_SL_NO from AQ_MAST where "
                    + "BILL_NO = " + billno + " ORDER BY POST_SL_NO) AQ_MAST "
                    + "INNER JOIN " + aqDtlsTbl + " as AQ_DTLS on AQ_DTLS.AQSL_NO=AQ_MAST.AQSL_NO "
                    + "inner join (select quarter_no, EMP_ID, address, consumer_no, QA_ID from emp_qtr_allot WHERE Q_ID = " + qtrPoolId + " AND "
                    + "(if_surrendered IS NULL OR if_surrendered != 'Y'))emp_qtr_allot on aq_dtls.REF_DESC=emp_qtr_allot.QA_ID::TEXT where SCHEDULE='" + schedule + "' AND AD_TYPE='D' AND AD_AMT >0 ORDER BY POST_SL_NO";
            rs = stmt.executeQuery(dataQry);
            while (rs.next()) {
                wrrBean = new WrrScheduleBean();

                String consumerno = "";
                if (rs.getString("EMP_NAME") != null && !rs.getString("EMP_NAME").equals("")) {
                    wrrBean.setSlNo(slno);
                    slno++;
                    wrrBean.setEmpname(rs.getString("EMP_NAME"));
                    wrrBean.setEmpdesg(rs.getString("CUR_DESG"));

                    String qtrno = "";
                    String qtraddr = "";
                    if (rs.getString("QUARTER_NO") != null) {
                        qtrno = rs.getString("QUARTER_NO").toUpperCase();
                        wrrBean.setQuarterNo(qtrno);
                    }
                    if (rs.getString("ADDRESS") != null) {
                        qtraddr = rs.getString("ADDRESS").toUpperCase();
                        wrrBean.setAddress(qtraddr);
                    }
                    if (rs.getString("CONSUMER_NO") != null && !rs.getString("CONSUMER_NO").equals("")) {
                        consumerno = "Consumer No: " + rs.getString("CONSUMER_NO");
                        wrrBean.setConsumerno(rs.getString("CONSUMER_NO"));
                    }
                    recamt = rs.getInt("AD_AMT");
                    wrrBean.setAmount(recamt + "");
                }
                wrrList.add(wrrBean);
            }

        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            DataBaseFunctions.closeSqlObjects(rs, stmt);
            DataBaseFunctions.closeSqlObjects(con);
        }
        return wrrList;
    }

    private List getWRRSchEmpList4Pdf(String billno, String schedule, String qtrPoolId, int aqMonth, int aqYear) {

        Connection con = null;
        Statement stmt = null;
        ResultSet rs = null;
        WrrScheduleBean wrrBean = null;
        ArrayList wrrList = new ArrayList();
        String aqDtlsTbl = "";
        int slno = 1;
        int recamt = 0;

        try {
            aqDtlsTbl = getAqDtlsTableName(billno);

            con = repodataSource.getConnection();
            stmt = con.createStatement();
            /*String dataQry = "select GPF_ACC_NO,EMP_QTR_ALLOT.QUARTER_NO,EMP_QTR_ALLOT.ADDRESS,AQ_MAST.EMP_NAME,AQ_MAST.EMP_CODE,AQ_MAST.CUR_DESG,"
             + "AQ_DTLS.ACC_NO,AQ_DTLS.AD_AMT,POST_SL_NO,consumer_no from "
             + "( select GPF_ACC_NO,aq_mast.EMP_CODE,aq_mast.EMP_NAME,aq_mast.CUR_DESG,aq_mast.AQSL_NO,POST_SL_NO from AQ_MAST where "
             + "BILL_NO = " + billno + " ORDER BY POST_SL_NO) AQ_MAST "
             + "INNER JOIN " + aqDtlsTbl + " as AQ_DTLS on AQ_DTLS.AQSL_NO=AQ_MAST.AQSL_NO "
             + "inner join (select quarter_no, EMP_ID, address, consumer_no, QA_ID from emp_qtr_allot WHERE Q_ID = " + qtrPoolId + " AND "
             + "(if_surrendered IS NULL OR if_surrendered != 'Y'))emp_qtr_allot on emp_qtr_allot.EMP_ID=AQ_MAST.EMP_CODE where SCHEDULE='" + schedule + "' AND AD_TYPE='D' AND AD_AMT >0 ORDER BY POST_SL_NO";*/
            String dataQry = "select GPF_ACC_NO,EMP_QTR_ALLOT.QUARTER_NO,EMP_QTR_ALLOT.ADDRESS,AQ_MAST.EMP_NAME,AQ_MAST.EMP_CODE,AQ_MAST.CUR_DESG,"
                    + "AQ_DTLS.ACC_NO,AQ_DTLS.AD_AMT,POST_SL_NO,consumer_no from "
                    + "( select GPF_ACC_NO,aq_mast.EMP_CODE,aq_mast.EMP_NAME,aq_mast.CUR_DESG,aq_mast.AQSL_NO,POST_SL_NO from AQ_MAST where "
                    + "BILL_NO = " + billno + " and aq_year=" + aqYear + " and aq_month=" + aqMonth + " ORDER BY POST_SL_NO) AQ_MAST "
                    + "INNER JOIN " + aqDtlsTbl + " as AQ_DTLS on AQ_DTLS.AQSL_NO=AQ_MAST.AQSL_NO "
                    + "inner join (select quarter_no, EMP_ID, address, consumer_no, QA_ID from emp_qtr_allot WHERE Q_ID = " + qtrPoolId + " AND "
                    + "(if_surrendered IS NULL OR if_surrendered != 'Y'))emp_qtr_allot on aq_dtls.REF_DESC=emp_qtr_allot.QA_ID::TEXT where SCHEDULE='" + schedule + "' AND AD_TYPE='D' AND AD_AMT >0 ORDER BY POST_SL_NO";
            rs = stmt.executeQuery(dataQry);
            while (rs.next()) {
                wrrBean = new WrrScheduleBean();

                String consumerno = "";
                if (rs.getString("EMP_NAME") != null && !rs.getString("EMP_NAME").equals("")) {
                    wrrBean.setSlNo(slno);
                    slno++;
                    wrrBean.setEmpname(rs.getString("EMP_NAME"));
                    wrrBean.setEmpdesg(rs.getString("CUR_DESG"));

                    String qtrno = "";
                    String qtraddr = "";
                    if (rs.getString("QUARTER_NO") != null) {
                        qtrno = rs.getString("QUARTER_NO").toUpperCase();
                        wrrBean.setQuarterNo(qtrno);
                    }
                    if (rs.getString("ADDRESS") != null) {
                        qtraddr = rs.getString("ADDRESS").toUpperCase();
                        wrrBean.setAddress(qtraddr);
                    }
                    if (rs.getString("CONSUMER_NO") != null && !rs.getString("CONSUMER_NO").equals("")) {
                        consumerno = "Consumer No: " + rs.getString("CONSUMER_NO");
                        wrrBean.setConsumerno(rs.getString("CONSUMER_NO"));
                    }
                    recamt = rs.getInt("AD_AMT");
                    wrrBean.setAmount(recamt + "");
                }
                wrrList.add(wrrBean);
            }

        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            DataBaseFunctions.closeSqlObjects(rs, stmt);
            DataBaseFunctions.closeSqlObjects(con);
        }
        return wrrList;
    }

    @Override
    public void WRRSchedulePagePDF(Document document, String schedule, String billNo, CommonReportParamBean crb) {

        Connection con = null;
        PreparedStatement pstmtBtId = null;
        ResultSet rsBtId = null;
        List empDataList = new ArrayList();
        String address1 = null;

        try {

            con = this.repodataSource.getConnection();

            Font textFont = new Font(Font.FontFamily.TIMES_ROMAN, 7.5f, Font.NORMAL, BaseColor.BLACK);
            Font bigTextFont = new Font(Font.FontFamily.TIMES_ROMAN, 8, Font.NORMAL, BaseColor.BLACK);
            Font boldTextFont = new Font(Font.FontFamily.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK);
            Font hdrTextFont = new Font(Font.FontFamily.TIMES_ROMAN, 9, Font.BOLD, BaseColor.BLACK);

            PdfPTable table = new PdfPTable(7);
            table.setWidths(new float[]{0.5f, 4, 3, 1.3f, 1, 1, 1});
            table.setWidthPercentage(100);

            PdfPCell cell = null;

            int slno = 0;
            int cnt1 = 0;
            int pageNo = 0;
            int recAmt = 0;
            int payBillMonth = 0;
            int payBillYear = 0;
            int totaldeduct = 0;
            String poolName = "";
            String demandNo = "";
            String poolDesc = "";

            String wrrBtId = null;
            String swrBtId = null;
            pstmtBtId = con.prepareStatement("SELECT * FROM G_AD_LIST WHERE AD_CODE_NAME='WRR' OR AD_CODE_NAME='SWR'");
            rsBtId = pstmtBtId.executeQuery();
            while (rsBtId.next()) {
                if (rsBtId.getString("AD_CODE_NAME").equals("WRR")) {
                    wrrBtId = rsBtId.getString("BT_ID");
                } else if (rsBtId.getString("AD_CODE_NAME").equals("SWR")) {
                    swrBtId = rsBtId.getString("BT_ID");
                }
            }

            ArrayList poolNameList = new ArrayList();
            ArrayList poolAmountList = new ArrayList();
            ArrayList qpoollist = getQuarterList();
            for (int m = 0; m < qpoollist.size(); m++) {
                QuarterPool qpool = (QuarterPool) qpoollist.get(m);
                totaldeduct = 0;
                String btid = null;
                if (schedule.equals("HRR")) {
                    btid = qpool.getBtid();
                } else if (schedule.equals("WRR")) {
                    btid = wrrBtId;
                } else {
                    btid = swrBtId;
                }

                String isDefault = qpool.getIsdefault();
                String qtrPoolId = qpool.getQid();
                poolName = qpool.getPoolName();
                demandNo = qpool.getDemandNoString();

                empDataList = getWRRSchEmpList4Pdf(billNo, schedule, qtrPoolId, crb.getAqmonth(), crb.getAqyear());
                slno = 0;
                if (empDataList != null && empDataList.size() > 0) {
                    Iterator itr = empDataList.iterator();
                    WrrScheduleBean wrrBean = null;
                    while (itr.hasNext()) {
                        wrrBean = (WrrScheduleBean) itr.next();

                        slno++;
                        if (totaldeduct == 0 && pageNo != 0) {
                            pageNo++;
                            printWrrHeader(crb, table, cell, schedule, pageNo, poolName);
                        }
                        if (pageNo == 0) {

                            table = new PdfPTable(7);
                            table.setWidths(new float[]{0.5f, 4, 3, 1.3f, 1, 1, 1});
                            table.setWidthPercentage(100);
                            pageNo++;

                            printWrrHeader(crb, table, cell, schedule, pageNo, poolName);
                        }

                        totaldeduct = totaldeduct + Integer.parseInt(wrrBean.getAmount());
//                        namelength = wrapText(wrrBean.getEmpname(),32);
//                        desiglength = wrapText(wrrBean.getEmpdesg(),50);
                        wrrBean.getEmpname();
                        wrrBean.getEmpdesg();
                        if (wrrBean.getAddress() == null || wrrBean.getAddress().equals("")) {
                            address1 = "";
                        } else {
                            address1 = " " + wrrBean.getAddress();
                        }
                        String address = StringUtils.defaultString(wrrBean.getQuarterNo()) + address1;
                        //qtrlength = wrapText(address,16);

                        //1st row inside while
                        cell = new PdfPCell(new Phrase(slno + "", textFont));
                        cell.setBorder(Rectangle.BOTTOM);
                        table.addCell(cell);

                        cell = new PdfPCell(new Phrase(StringUtils.defaultString(wrrBean.getEmpname()) + "\n" + StringUtils.defaultString(wrrBean.getEmpdesg()), textFont));
                        cell.setBorder(Rectangle.BOTTOM);
                        cell.setFixedHeight(30);
                        table.addCell(cell);

                        cell = new PdfPCell(new Phrase(StringUtils.defaultString(address), textFont));
                        cell.setBorder(Rectangle.BOTTOM);
                        table.addCell(cell);

                        if (schedule.equals("WRR")) {
                            cell = new PdfPCell(new Phrase(StringUtils.defaultString(wrrBean.getConsumerno()), textFont));
                            cell.setBorder(Rectangle.BOTTOM);
                            table.addCell(cell);
                        } else {
                            cell = new PdfPCell();
                            cell.setBorder(Rectangle.BOTTOM);
                            table.addCell(cell);
                        }

                        cell = new PdfPCell(new Phrase("", textFont));
                        cell.setBorder(Rectangle.BOTTOM);
                        table.addCell(cell);
                        cell = new PdfPCell(new Phrase(StringUtils.defaultString(wrrBean.getAmount()), textFont));
                        cell.setBorder(Rectangle.BOTTOM);
                        cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
                        table.addCell(cell);
                        cell = new PdfPCell(new Phrase(StringUtils.defaultString(wrrBean.getAmount()), textFont));
                        cell.setBorder(Rectangle.BOTTOM);
                        cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
                        table.addCell(cell);

                        if (slno % 12 == 0) {
                            printPageTotal(table, cell, boldTextFont, totaldeduct + "");
                            document.add(table);
                            document.newPage();

                            table = new PdfPTable(7);
                            table.setWidths(new float[]{0.5f, 4, 3, 1.3f, 1, 1, 1});
                            table.setWidthPercentage(100);

                            pageNo++;
                            printWrrHeader(crb, table, cell, schedule, pageNo, poolName);

                            printCarryForward(totaldeduct + "", table, cell, pageNo - 1, boldTextFont);
                        }

                        if (slno == empDataList.size()) {
                            if (pageNo > 0) {
                                printGrandTotal(table, cell, boldTextFont, totaldeduct);
                                document.add(table);
                                document.newPage();

                                table = new PdfPTable(7);
                                table.setWidths(new float[]{0.5f, 4, 3, 1.3f, 1, 1, 1});
                                table.setWidthPercentage(100);
                            }
                        }
                    }
                }
                if (totaldeduct > 0) {
                    poolNameList.add(poolName);
                    poolAmountList.add(new Integer(totaldeduct));
                }
            }

            if (poolAmountList != null && poolAmountList.size() > 1) {
                document.add(table);
                document.newPage();

                table = new PdfPTable(7);
                table.setWidths(new float[]{0.5f, 4, 3, 1.3f, 1, 1, 1});
                table.setWidthPercentage(100);

                int totalSum = 0;
                cell = new PdfPCell(new Phrase("Page : " + (pageNo + 1), boldTextFont));
                cell.setColspan(7);
                cell.setBorder(Rectangle.NO_BORDER);
                cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
                table.addCell(cell);

                if (schedule.endsWith("HRR")) {
                    cell = new PdfPCell(new Phrase("SCHEDULE OF DEDUCTION OF HOUSE RENT", hdrTextFont));
                    cell.setColspan(7);
                    cell.setBorder(Rectangle.NO_BORDER);
                    cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                    table.addCell(cell);

                    cell = new PdfPCell(new Phrase("OF " + StringUtils.defaultString(crb.getDeptname()), hdrTextFont));
                    cell.setColspan(7);
                    cell.setBorder(Rectangle.NO_BORDER);
                    cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                    table.addCell(cell);

                    cell = new PdfPCell(new Phrase("---------- * ---------", boldTextFont));
                    cell.setColspan(7);
                    cell.setBorder(Rectangle.NO_BORDER);
                    cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                    table.addCell(cell);
                }
                if (schedule.endsWith("WRR")) {
                    cell = new PdfPCell(new Phrase("SCHEDULE OF DEDUCTION OF WATER SUPPLY AND SANITATION CHARGE RENT", hdrTextFont));
                    cell.setColspan(7);
                    cell.setBorder(Rectangle.NO_BORDER);
                    cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                    table.addCell(cell);

                    cell = new PdfPCell(new Phrase("OF " + StringUtils.defaultString(crb.getDeptname()), hdrTextFont));
                    cell.setColspan(7);
                    cell.setBorder(Rectangle.NO_BORDER);
                    cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                    table.addCell(cell);

                    cell = new PdfPCell(new Phrase("---------- * ---------", boldTextFont));
                    cell.setColspan(7);
                    cell.setBorder(Rectangle.NO_BORDER);
                    cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                    table.addCell(cell);
                }

                if (schedule.endsWith("SWR")) {
                    cell = new PdfPCell(new Phrase("SCHEDULE OF DEDUCTION OF SWERAGE RENT", hdrTextFont));
                    cell.setColspan(7);
                    cell.setBorder(Rectangle.NO_BORDER);
                    cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                    table.addCell(cell);

                    cell = new PdfPCell(new Phrase("OF " + StringUtils.defaultString(crb.getDeptname()), hdrTextFont));
                    cell.setColspan(7);
                    cell.setBorder(Rectangle.NO_BORDER);
                    cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                    table.addCell(cell);

                    cell = new PdfPCell(new Phrase("---------- * ---------", boldTextFont));
                    cell.setColspan(7);
                    cell.setBorder(Rectangle.NO_BORDER);
                    cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                    table.addCell(cell);
                }
                //Creating space
                cell = new PdfPCell(new Phrase("", hdrTextFont));
                cell.setColspan(7);
                cell.setFixedHeight(10);
                cell.setBorder(Rectangle.NO_BORDER);
                //cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                table.addCell(cell);

                cell = new PdfPCell(new Phrase("GRAND TOTAL", boldTextFont));
                cell.setColspan(7);
                cell.setBorder(Rectangle.NO_BORDER);
                cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                table.addCell(cell);

                cell = new PdfPCell(new Phrase("-------------------", boldTextFont));
                cell.setColspan(7);
                cell.setBorder(Rectangle.NO_BORDER);
                cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                table.addCell(cell);

                cell = new PdfPCell(new Phrase("", boldTextFont));
                cell.setColspan(7);
                cell.setFixedHeight(10);
                cell.setBorder(Rectangle.NO_BORDER);
                table.addCell(cell);

                cell = new PdfPCell(new Phrase("", boldTextFont));
                cell.setBorder(Rectangle.NO_BORDER);
                table.addCell(cell);
                cell = new PdfPCell(new Phrase("DEPT NAME", boldTextFont));
                cell.setBorder(Rectangle.NO_BORDER);
                table.addCell(cell);
                cell = new PdfPCell(new Phrase("", boldTextFont));
                cell.setBorder(Rectangle.NO_BORDER);
                table.addCell(cell);
                cell = new PdfPCell(new Phrase("", boldTextFont));
                cell.setBorder(Rectangle.NO_BORDER);
                table.addCell(cell);
                cell = new PdfPCell(new Phrase("TOTAL AMOUNT", boldTextFont));
                cell.setColspan(3);
                cell.setBorder(Rectangle.NO_BORDER);
                cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
                table.addCell(cell);

                cell = new PdfPCell(new Phrase(StringUtils.repeat("-", 194), boldTextFont));
                cell.setColspan(7);
                cell.setBorder(Rectangle.NO_BORDER);
                table.addCell(cell);
                for (int i = 0; i < poolAmountList.size(); i++) {
                    if (Integer.parseInt(poolAmountList.get(i).toString()) > 0) {
                        totalSum = totalSum + Integer.parseInt(poolAmountList.get(i).toString());
                        printPageFooterWRR(poolNameList.get(i).toString(), Integer.parseInt(poolAmountList.get(i).toString()), schedule, table, cell, pageNo + 1, boldTextFont);
                    }
                }

                cell = new PdfPCell(new Phrase(StringUtils.repeat("-", 194), boldTextFont));
                cell.setColspan(7);
                cell.setBorder(Rectangle.NO_BORDER);
                table.addCell(cell);
                cell = new PdfPCell(new Phrase(totalSum + "", boldTextFont));
                cell.setColspan(7);
                cell.setBorder(Rectangle.NO_BORDER);
                cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
                table.addCell(cell);

                for (int m = 0; m < 5; m++) {
                    cell = new PdfPCell();
                    cell.setColspan(7);
                    cell.setFixedHeight(10);
                    cell.setBorder(Rectangle.NO_BORDER);
                    cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
                    table.addCell(cell);
                }

                cell = new PdfPCell(new Phrase("Signature of D.D.O.", boldTextFont));
                cell.setColspan(7);
                cell.setBorder(Rectangle.NO_BORDER);
                cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
                table.addCell(cell);

                cell = new PdfPCell(new Phrase(StringUtils.defaultString(crb.getOfficename()), boldTextFont));
                cell.setColspan(7);
                cell.setBorder(Rectangle.NO_BORDER);
                cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
                table.addCell(cell);

                cell = new PdfPCell();
                cell.setColspan(3);
                cell.setBorder(Rectangle.NO_BORDER);
                cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
                table.addCell(cell);

                cell = new PdfPCell(new Phrase("Date:", boldTextFont));
                cell.setColspan(4);
                cell.setBorder(Rectangle.NO_BORDER);
                cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                table.addCell(cell);

                document.add(table);

            }
            if (pageNo == 0) {
                cell = new PdfPCell(new Phrase(" There is no record ", boldTextFont));
                cell.setBorder(Rectangle.BOTTOM);
                cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                cell.setColspan(7);
                table.addCell(cell);
                document.add(table);
            }

        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            DataBaseFunctions.closeSqlObjects(rsBtId, pstmtBtId);
            DataBaseFunctions.closeSqlObjects(con);
        }
    }

    public ArrayList getQuarterList() {
        Connection con = null;
        Statement stmt = null;
        ResultSet rs = null;

        ArrayList poolList = new ArrayList();
        try {
            con = dataSource.getConnection();
            String sql = "SELECT * from g_qtr_pool order by q_id";
            stmt = con.createStatement();
            rs = stmt.executeQuery(sql);
            while (rs.next()) {
                QuarterPool qpool = new QuarterPool();
                qpool.setBtid(rs.getString("BT_ID"));
                qpool.setDemandNoString(rs.getString("DEMAND_NO_STRING"));
                qpool.setIsdefault(rs.getString("IS_DEFAULT"));
                qpool.setPoolName(rs.getString("pool_name"));
                qpool.setQid(rs.getString("q_id"));
                poolList.add(qpool);
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            DataBaseFunctions.closeSqlObjects(rs, stmt, con);
        }
        return poolList;
    }

    @Override
    public void WRRSchedulePagePDFF1(Document document, String schedule, String billNo, CommonReportParamBean crb) {

        Connection con = null;
        PreparedStatement pstmtBtId = null;
        ResultSet rsBtId = null;

        //PreparedStatement pstmtQPool = null;
        //ResultSet rsQPool = null;
        List empDataList = new ArrayList();
        String address1 = null;

        try {

            con = this.repodataSource.getConnection();

            Font textFont = new Font(Font.FontFamily.TIMES_ROMAN, 7.5f, Font.NORMAL, BaseColor.BLACK);
            Font bigTextFont = new Font(Font.FontFamily.TIMES_ROMAN, 8, Font.NORMAL, BaseColor.BLACK);
            Font boldTextFont = new Font(Font.FontFamily.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK);
            Font hdrTextFont = new Font(Font.FontFamily.TIMES_ROMAN, 9, Font.BOLD, BaseColor.BLACK);

            PdfPTable table = new PdfPTable(7);
            table.setWidths(new float[]{0.5f, 4, 3, 1.3f, 1, 1, 1});
            table.setWidthPercentage(100);

            PdfPCell cell = null;

            int slno = 0;
            int cnt1 = 0;
            int pageNo = 0;
            int recAmt = 0;
            int payBillMonth = 0;
            int payBillYear = 0;
            int totaldeduct = 0;
            String poolName = "";
            String demandNo = "";
            String poolDesc = "";

            String wrrBtId = null;
            String swrBtId = null;
            pstmtBtId = con.prepareStatement("SELECT * FROM G_AD_LIST WHERE AD_CODE_NAME='WRR' OR AD_CODE_NAME='SWR'");
            rsBtId = pstmtBtId.executeQuery();
            while (rsBtId.next()) {
                if (rsBtId.getString("AD_CODE_NAME").equals("WRR")) {
                    wrrBtId = rsBtId.getString("BT_ID");
                } else if (rsBtId.getString("AD_CODE_NAME").equals("SWR")) {
                    swrBtId = rsBtId.getString("BT_ID");
                }
            }

            ArrayList poolNameList = new ArrayList();
            ArrayList poolAmountList = new ArrayList();
            ArrayList qpoollist = getQuarterList();
            for (int m = 0; m < qpoollist.size(); m++) {
                QuarterPool qpool = (QuarterPool) qpoollist.get(m);
                totaldeduct = 0;
                String btid = null;
                if (schedule.equals("HRR")) {
                    btid = qpool.getBtid();
                } else if (schedule.equals("WRR")) {
                    btid = wrrBtId;
                } else {
                    btid = swrBtId;
                }

                String isDefault = qpool.getIsdefault();
                String qtrPoolId = qpool.getQid();
                poolName = qpool.getPoolName();
                demandNo = qpool.getDemandNoString();

                empDataList = getWRRSchEmpList4PdfF1(billNo, schedule, qtrPoolId, crb.getAqmonth(), crb.getAqyear());
                slno = 0;
                if (empDataList != null && empDataList.size() > 0) {
                    Iterator itr = empDataList.iterator();
                    WrrScheduleBean wrrBean = null;
                    while (itr.hasNext()) {
                        wrrBean = (WrrScheduleBean) itr.next();

                        slno++;
                        if (totaldeduct == 0 && pageNo != 0) {
                            pageNo++;
                            printWrrHeader(crb, table, cell, schedule, pageNo, poolName);
                        }
                        if (pageNo == 0) {

                            table = new PdfPTable(7);
                            table.setWidths(new float[]{0.5f, 4, 3, 1.3f, 1, 1, 1});
                            table.setWidthPercentage(100);
                            pageNo++;

                            printWrrHeader(crb, table, cell, schedule, pageNo, poolName);
                        }

                        totaldeduct = totaldeduct + Integer.parseInt(wrrBean.getAmount());
//                        namelength = wrapText(wrrBean.getEmpname(),32);
//                        desiglength = wrapText(wrrBean.getEmpdesg(),50);
                        wrrBean.getEmpname();
                        wrrBean.getEmpdesg();
                        if (wrrBean.getAddress() == null || wrrBean.getAddress().equals("")) {
                            address1 = "";
                        } else {
                            address1 = " " + wrrBean.getAddress();
                        }
                        String address = StringUtils.defaultString(wrrBean.getQuarterNo()) + address1;
                        //qtrlength = wrapText(address,16);

                        //1st row inside while
                        cell = new PdfPCell(new Phrase(slno + "", textFont));
                        cell.setBorder(Rectangle.BOTTOM);
                        table.addCell(cell);

                        cell = new PdfPCell(new Phrase(StringUtils.defaultString(wrrBean.getEmpname()) + "\n" + StringUtils.defaultString(wrrBean.getEmpdesg()), textFont));
                        cell.setBorder(Rectangle.BOTTOM);
                        cell.setFixedHeight(30);
                        table.addCell(cell);

                        cell = new PdfPCell(new Phrase(StringUtils.defaultString(address), textFont));
                        cell.setBorder(Rectangle.BOTTOM);
                        table.addCell(cell);

                        if (schedule.equals("WRR")) {
                            cell = new PdfPCell(new Phrase(StringUtils.defaultString(wrrBean.getConsumerno()), textFont));
                            cell.setBorder(Rectangle.BOTTOM);
                            table.addCell(cell);
                        } else {
                            cell = new PdfPCell();
                            cell.setBorder(Rectangle.BOTTOM);
                            table.addCell(cell);
                        }

                        cell = new PdfPCell(new Phrase("", textFont));
                        cell.setBorder(Rectangle.BOTTOM);
                        table.addCell(cell);
                        cell = new PdfPCell(new Phrase(StringUtils.defaultString(wrrBean.getAmount()), textFont));
                        cell.setBorder(Rectangle.BOTTOM);
                        cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
                        table.addCell(cell);
                        cell = new PdfPCell(new Phrase(StringUtils.defaultString(wrrBean.getAmount()), textFont));
                        cell.setBorder(Rectangle.BOTTOM);
                        cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
                        table.addCell(cell);

                        if (slno % 12 == 0) {
                            printPageTotal(table, cell, boldTextFont, totaldeduct + "");
                            document.add(table);
                            document.newPage();

                            table = new PdfPTable(7);
                            table.setWidths(new float[]{0.5f, 4, 3, 1.3f, 1, 1, 1});
                            table.setWidthPercentage(100);

                            pageNo++;
                            printWrrHeader(crb, table, cell, schedule, pageNo, poolName);

                            printCarryForward(totaldeduct + "", table, cell, pageNo - 1, boldTextFont);
                        }

                        if (slno == empDataList.size()) {
                            if (pageNo > 0) {
                                printGrandTotal(table, cell, boldTextFont, totaldeduct);
                                document.add(table);
                                document.newPage();

                                table = new PdfPTable(7);
                                table.setWidths(new float[]{0.5f, 4, 3, 1.3f, 1, 1, 1});
                                table.setWidthPercentage(100);
                            }
                        }
                    }
                }
                if (totaldeduct > 0) {
                    poolNameList.add(poolName);
                    poolAmountList.add(new Integer(totaldeduct));
                }
            }

            if (poolAmountList != null && poolAmountList.size() > 1) {
                document.add(table);
                document.newPage();

                table = new PdfPTable(7);
                table.setWidths(new float[]{0.5f, 4, 3, 1.3f, 1, 1, 1});
                table.setWidthPercentage(100);

                int totalSum = 0;
                cell = new PdfPCell(new Phrase("Page : " + (pageNo + 1), boldTextFont));
                cell.setColspan(7);
                cell.setBorder(Rectangle.NO_BORDER);
                cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
                table.addCell(cell);

                if (schedule.endsWith("HRR")) {
                    cell = new PdfPCell(new Phrase("SCHEDULE OF DEDUCTION OF HOUSE RENT", hdrTextFont));
                    cell.setColspan(7);
                    cell.setBorder(Rectangle.NO_BORDER);
                    cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                    table.addCell(cell);

                    cell = new PdfPCell(new Phrase("OF " + StringUtils.defaultString(crb.getDeptname()), hdrTextFont));
                    cell.setColspan(7);
                    cell.setBorder(Rectangle.NO_BORDER);
                    cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                    table.addCell(cell);

                    cell = new PdfPCell(new Phrase("---------- * ---------", boldTextFont));
                    cell.setColspan(7);
                    cell.setBorder(Rectangle.NO_BORDER);
                    cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                    table.addCell(cell);
                }
                if (schedule.endsWith("WRR")) {
                    cell = new PdfPCell(new Phrase("SCHEDULE OF DEDUCTION OF WATER SUPPLY AND SANITATION CHARGE RENT", hdrTextFont));
                    cell.setColspan(7);
                    cell.setBorder(Rectangle.NO_BORDER);
                    cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                    table.addCell(cell);

                    cell = new PdfPCell(new Phrase("OF " + StringUtils.defaultString(crb.getDeptname()), hdrTextFont));
                    cell.setColspan(7);
                    cell.setBorder(Rectangle.NO_BORDER);
                    cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                    table.addCell(cell);

                    cell = new PdfPCell(new Phrase("---------- * ---------", boldTextFont));
                    cell.setColspan(7);
                    cell.setBorder(Rectangle.NO_BORDER);
                    cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                    table.addCell(cell);
                }

                if (schedule.endsWith("SWR")) {
                    cell = new PdfPCell(new Phrase("SCHEDULE OF DEDUCTION OF SWERAGE RENT", hdrTextFont));
                    cell.setColspan(7);
                    cell.setBorder(Rectangle.NO_BORDER);
                    cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                    table.addCell(cell);

                    cell = new PdfPCell(new Phrase("OF " + StringUtils.defaultString(crb.getDeptname()), hdrTextFont));
                    cell.setColspan(7);
                    cell.setBorder(Rectangle.NO_BORDER);
                    cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                    table.addCell(cell);

                    cell = new PdfPCell(new Phrase("---------- * ---------", boldTextFont));
                    cell.setColspan(7);
                    cell.setBorder(Rectangle.NO_BORDER);
                    cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                    table.addCell(cell);
                }
                //Creating space
                cell = new PdfPCell(new Phrase("", hdrTextFont));
                cell.setColspan(7);
                cell.setFixedHeight(10);
                cell.setBorder(Rectangle.NO_BORDER);
                //cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                table.addCell(cell);

                cell = new PdfPCell(new Phrase("GRAND TOTAL", boldTextFont));
                cell.setColspan(7);
                cell.setBorder(Rectangle.NO_BORDER);
                cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                table.addCell(cell);

                cell = new PdfPCell(new Phrase("-------------------", boldTextFont));
                cell.setColspan(7);
                cell.setBorder(Rectangle.NO_BORDER);
                cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                table.addCell(cell);

                cell = new PdfPCell(new Phrase("", boldTextFont));
                cell.setColspan(7);
                cell.setFixedHeight(10);
                cell.setBorder(Rectangle.NO_BORDER);
                table.addCell(cell);

                cell = new PdfPCell(new Phrase("", boldTextFont));
                cell.setBorder(Rectangle.NO_BORDER);
                table.addCell(cell);
                cell = new PdfPCell(new Phrase("DEPT NAME", boldTextFont));
                cell.setBorder(Rectangle.NO_BORDER);
                table.addCell(cell);
                cell = new PdfPCell(new Phrase("", boldTextFont));
                cell.setBorder(Rectangle.NO_BORDER);
                table.addCell(cell);
                cell = new PdfPCell(new Phrase("", boldTextFont));
                cell.setBorder(Rectangle.NO_BORDER);
                table.addCell(cell);
                cell = new PdfPCell(new Phrase("TOTAL AMOUNT", boldTextFont));
                cell.setColspan(3);
                cell.setBorder(Rectangle.NO_BORDER);
                cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
                table.addCell(cell);

                cell = new PdfPCell(new Phrase(StringUtils.repeat("-", 194), boldTextFont));
                cell.setColspan(7);
                cell.setBorder(Rectangle.NO_BORDER);
                table.addCell(cell);
                for (int i = 0; i < poolAmountList.size(); i++) {
                    if (Integer.parseInt(poolAmountList.get(i).toString()) > 0) {
                        totalSum = totalSum + Integer.parseInt(poolAmountList.get(i).toString());
                        printPageFooterWRR(poolNameList.get(i).toString(), Integer.parseInt(poolAmountList.get(i).toString()), schedule, table, cell, pageNo + 1, boldTextFont);
                    }
                }

                cell = new PdfPCell(new Phrase(StringUtils.repeat("-", 194), boldTextFont));
                cell.setColspan(7);
                cell.setBorder(Rectangle.NO_BORDER);
                table.addCell(cell);
                cell = new PdfPCell(new Phrase(totalSum + "", boldTextFont));
                cell.setColspan(7);
                cell.setBorder(Rectangle.NO_BORDER);
                cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
                table.addCell(cell);

                for (int m = 0; m < 5; m++) {
                    cell = new PdfPCell();
                    cell.setColspan(7);
                    cell.setFixedHeight(10);
                    cell.setBorder(Rectangle.NO_BORDER);
                    cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
                    table.addCell(cell);
                }

                cell = new PdfPCell(new Phrase("Signature of D.D.O.", boldTextFont));
                cell.setColspan(7);
                cell.setBorder(Rectangle.NO_BORDER);
                cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
                table.addCell(cell);

                cell = new PdfPCell(new Phrase(StringUtils.defaultString(crb.getOfficename()), boldTextFont));
                cell.setColspan(7);
                cell.setBorder(Rectangle.NO_BORDER);
                cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
                table.addCell(cell);

                cell = new PdfPCell();
                cell.setColspan(3);
                cell.setBorder(Rectangle.NO_BORDER);
                cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
                table.addCell(cell);

                cell = new PdfPCell(new Phrase("Date:", boldTextFont));
                cell.setColspan(4);
                cell.setBorder(Rectangle.NO_BORDER);
                cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                table.addCell(cell);

                document.add(table);

            }
            if (pageNo == 0) {
                cell = new PdfPCell(new Phrase(" There is no record ", boldTextFont));
                cell.setBorder(Rectangle.BOTTOM);
                cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                cell.setColspan(7);
                table.addCell(cell);
                document.add(table);
            }

        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            DataBaseFunctions.closeSqlObjects(rsBtId, pstmtBtId, con);
        }
    }

    private void printPageFooterWRR(String poolName, int poolAmt, String schedule, PdfPTable table, PdfPCell cell, int pageno, Font f1) throws Exception {

        cell = new PdfPCell(new Phrase("", f1));
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);
        cell = new PdfPCell(new Phrase(StringUtils.defaultString(poolName), f1));
        cell.setColspan(2);
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);
        cell = new PdfPCell(new Phrase("", f1));
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);
        cell = new PdfPCell(new Phrase(poolAmt + "", f1));
        cell.setColspan(3);
        cell.setBorder(Rectangle.NO_BORDER);
        cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
        table.addCell(cell);

    }

    private void printWrrHeader(CommonReportParamBean crb, PdfPTable table, PdfPCell cell, String schedule, int pageNo, String poolName) throws Exception {

        Font boldTextFont = new Font(Font.FontFamily.TIMES_ROMAN, 7, Font.BOLD, BaseColor.BLACK);
        Font hdrTextFont = new Font(Font.FontFamily.TIMES_ROMAN, 9, Font.BOLD, BaseColor.BLACK);

        //1st row
        cell = new PdfPCell(new Phrase("Page : " + pageNo, boldTextFont));
        cell.setColspan(7);
        cell.setBorder(Rectangle.NO_BORDER);
        cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
        table.addCell(cell);

        if (schedule.endsWith("HRR")) {
            //2nd row
            cell = new PdfPCell(new Phrase("SCHEDULE OF DEDUCTION OF HOUSE RENT", hdrTextFont));
            cell.setColspan(7);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            String deptname = crb.getOfficeen();

            //3rd row
            cell = new PdfPCell(new Phrase("OF " + StringUtils.defaultString(deptname), hdrTextFont));
            cell.setColspan(7);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            //4th row
            cell = new PdfPCell(new Phrase("T.V No / Date: " + crb.getVchNo() + " / " + crb.getVchDate(), boldTextFont));
            cell.setColspan(7);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            //5th row
            cell = new PdfPCell(new Phrase("---------- * ---------", boldTextFont));
            cell.setColspan(7);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            //5th row
            cell = new PdfPCell(new Phrase("Major head to : 0216-HOUSING-01-GOVERNMENT RESIDENTIAL ", hdrTextFont));
            cell.setColspan(5);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_LEFT);
            table.addCell(cell);
            cell = new PdfPCell(new Phrase("", hdrTextFont));
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);
            cell = new PdfPCell(new Phrase("", hdrTextFont));
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            //6th row
            cell = new PdfPCell(new Phrase("be credited   :   BUILDINGS-106-GENERALPOOL ACCOMODATION ", hdrTextFont));
            cell.setColspan(5);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_LEFT);
            table.addCell(cell);
            cell = new PdfPCell(new Phrase("", hdrTextFont));
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);
            cell = new PdfPCell(new Phrase("", hdrTextFont));
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            //7th row
            cell = new PdfPCell(new Phrase("", hdrTextFont));
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);
            cell = new PdfPCell(new Phrase("      -0142-Rent / Licence Fee-02055-" + poolName, hdrTextFont));
            cell.setColspan(6);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_LEFT);
            table.addCell(cell);

            //8th row 
            cell = new PdfPCell(new Phrase("Pay Bill No: ", hdrTextFont));
            cell.setColspan(2);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase(StringUtils.defaultString(crb.getBilldesc()), hdrTextFont));
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_LEFT);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase(" for the month of : ", hdrTextFont));
            cell.setColspan(2);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase(crb.getAqMonthAsName() + " - " + crb.getAqyear(), boldTextFont));
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase(" ", hdrTextFont));
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

        }
        if (schedule.endsWith("WRR")) {
            //2nd row
            cell = new PdfPCell(new Phrase("SCHEDULE OF DEDUCTION OF WATER SUPPLY AND SANITATION CHARGE RENT", hdrTextFont));
            cell.setColspan(7);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            String deptname = crb.getOfficeen();

            //3rd row
            cell = new PdfPCell(new Phrase("OF " + StringUtils.defaultString(deptname), hdrTextFont));
            cell.setColspan(7);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            //4th row
            cell = new PdfPCell(new Phrase("T.V No / Date: " + crb.getVchNo() + " / " + crb.getVchDate(), boldTextFont));
            cell.setColspan(7);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            //5th row
            cell = new PdfPCell(new Phrase("---------- * ---------", boldTextFont));
            cell.setColspan(7);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            //5th row
            cell = new PdfPCell(new Phrase("0215-WATER SUPPLY AND SANITATION-01-WATER SUPPLY-103-RECEIPTS FROM ", hdrTextFont));
            cell.setColspan(5);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);
            cell = new PdfPCell(new Phrase("", hdrTextFont));
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);
            cell = new PdfPCell(new Phrase("", hdrTextFont));
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            //6th row
            cell = new PdfPCell(new Phrase("URBAN WATER SUPPLY SCHEMES-0175-Water Rate / Cess-02171-Water Supply for supply of drinking water", hdrTextFont));
            cell.setColspan(5);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);
            cell = new PdfPCell(new Phrase("", hdrTextFont));
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);
            cell = new PdfPCell(new Phrase("", hdrTextFont));
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            //8th row 
            cell = new PdfPCell(new Phrase("Pay Bill No: ", hdrTextFont));
            cell.setColspan(2);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase(StringUtils.defaultString(crb.getBilldesc()), hdrTextFont));
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_LEFT);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase(" for the month of : ", hdrTextFont));
            cell.setColspan(2);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase(crb.getAqMonthAsName() + " - " + crb.getAqyear(), boldTextFont));
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase(" ", hdrTextFont));
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

        }
        if (schedule.endsWith("SWR")) {
            //2nd row
            cell = new PdfPCell(new Phrase("SCHEDULE OF DEDUCTION OF SWERAGE RENT", hdrTextFont));
            cell.setColspan(7);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            String deptname = crb.getOfficeen();

            //3rd row
            cell = new PdfPCell(new Phrase("OF " + StringUtils.defaultString(deptname), hdrTextFont));
            cell.setColspan(7);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            //4th row
            cell = new PdfPCell(new Phrase("T.V No / Date: " + crb.getVchNo() + " / " + crb.getVchDate(), boldTextFont));
            cell.setColspan(7);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            //5th row
            cell = new PdfPCell(new Phrase("---------- * ---------", boldTextFont));
            cell.setColspan(7);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            //5th row
            cell = new PdfPCell(new Phrase("0215-WATER SUPPLY AND SANITATION-01-WATER SUPPLY-103-RECEIPTS FROM ", hdrTextFont));
            cell.setColspan(5);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);
            cell = new PdfPCell(new Phrase("", hdrTextFont));
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);
            cell = new PdfPCell(new Phrase("", hdrTextFont));
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            //6th row
            cell = new PdfPCell(new Phrase("URBAN WATER SUPPLY SCHEMES-0175-Water Rate / Cess-02171-Water Supply for supply of drinking water", hdrTextFont));
            cell.setColspan(5);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);
            cell = new PdfPCell(new Phrase("", hdrTextFont));
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);
            cell = new PdfPCell(new Phrase("", hdrTextFont));
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            //8th row 
            cell = new PdfPCell(new Phrase("Pay Bill No: ", hdrTextFont));
            cell.setColspan(2);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase(StringUtils.defaultString(crb.getBilldesc()), hdrTextFont));
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_LEFT);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase(" for the month of : ", hdrTextFont));
            cell.setColspan(2);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase(crb.getAqMonthAsName() + " - " + crb.getAqyear(), boldTextFont));
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase(" ", hdrTextFont));
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

        }

        if (schedule.endsWith("MRR")) {
            //2nd row
            cell = new PdfPCell(new Phrase("SCHEDULE OF DEDUCTION OF MUNICIPALITY TAX", hdrTextFont));
            cell.setColspan(7);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            String deptname = crb.getOfficeen();

            //3rd row
            cell = new PdfPCell(new Phrase("OF " + StringUtils.defaultString(deptname), hdrTextFont));
            cell.setColspan(7);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            //4th row
            cell = new PdfPCell(new Phrase("T.V No / Date: " + crb.getVchNo() + " / " + crb.getVchDate(), boldTextFont));
            cell.setColspan(7);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            //5th row
            cell = new PdfPCell(new Phrase("---------- * ---------", boldTextFont));
            cell.setColspan(7);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            //5th row
            cell = new PdfPCell(new Phrase("0215-WATER SUPPLY AND SANITATION-01-WATER SUPPLY-103-RECEIPTS FROM ", hdrTextFont));
            cell.setColspan(5);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);
            cell = new PdfPCell(new Phrase("", hdrTextFont));
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);
            cell = new PdfPCell(new Phrase("", hdrTextFont));
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            //6th row
            cell = new PdfPCell(new Phrase("URBAN WATER SUPPLY SCHEMES-0175-Water Rate / Cess-02171-Water Supply for supply of drinking water", hdrTextFont));
            cell.setColspan(5);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);
            cell = new PdfPCell(new Phrase("", hdrTextFont));
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);
            cell = new PdfPCell(new Phrase("", hdrTextFont));
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            //8th row 
            cell = new PdfPCell(new Phrase("Pay Bill No: ", hdrTextFont));
            cell.setColspan(2);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase(StringUtils.defaultString(crb.getBilldesc()), hdrTextFont));
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_LEFT);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase(" for the month of : ", hdrTextFont));
            cell.setColspan(2);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase(crb.getAqMonthAsName() + " - " + crb.getAqyear(), boldTextFont));
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase(" ", hdrTextFont));
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

        }

        cell = new PdfPCell(new Phrase(StringUtils.repeat("-", 222), boldTextFont));
        cell.setColspan(7);
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("Sl", boldTextFont));
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);
        cell = new PdfPCell(new Phrase("Name of the incumbent\nDesignation", boldTextFont));
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);
        cell = new PdfPCell(new Phrase("Quarter Address", boldTextFont));
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);
        if (schedule.equals("WRR")) {
            cell = new PdfPCell(new Phrase("Consumer No", boldTextFont));
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);
        } else {
            cell = new PdfPCell();
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);
        }
        cell = new PdfPCell(new Phrase("Arrear", boldTextFont));
        cell.setBorder(Rectangle.NO_BORDER);
        cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
        table.addCell(cell);
        cell = new PdfPCell(new Phrase("Current", boldTextFont));
        cell.setBorder(Rectangle.NO_BORDER);
        cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
        table.addCell(cell);
        cell = new PdfPCell(new Phrase("Amount\nDeducted", boldTextFont));
        cell.setBorder(Rectangle.NO_BORDER);
        cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase(StringUtils.repeat("-", 222), boldTextFont));
        cell.setColspan(7);
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("1", boldTextFont));
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);
        cell = new PdfPCell(new Phrase(StringUtils.repeat(" ", 20) + "2", boldTextFont));
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);
        cell = new PdfPCell(new Phrase(StringUtils.repeat(" ", 15) + "3", boldTextFont));
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);
        if (schedule.equals("WRR")) {
            cell = new PdfPCell(new Phrase("4", boldTextFont));
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);
        } else {
            cell = new PdfPCell(new Phrase("", boldTextFont));
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);
        }
        if (schedule.equals("WRR")) {
            cell = new PdfPCell(new Phrase("5", boldTextFont));
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
            table.addCell(cell);
        } else {
            cell = new PdfPCell(new Phrase("4", boldTextFont));
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
            table.addCell(cell);
        }
        if (schedule.equals("WRR")) {
            cell = new PdfPCell(new Phrase("6", boldTextFont));
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
            table.addCell(cell);
        } else {
            cell = new PdfPCell(new Phrase("5", boldTextFont));
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
            table.addCell(cell);
        }
        if (schedule.equals("WRR")) {
            cell = new PdfPCell(new Phrase("7", boldTextFont));
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
            table.addCell(cell);
        } else {
            cell = new PdfPCell(new Phrase("6", boldTextFont));
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
            table.addCell(cell);
        }

        cell = new PdfPCell(new Phrase(StringUtils.repeat("-", 222), boldTextFont));
        cell.setColspan(7);
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);
    }

    @Override
    public void getVehicleSchedulePDF(Document document, String billNo, CommonReportParamBean crb) {

        Connection con = null;
        int slno = 0;
        int pageNo = 0;
        int total = 0;

        try {

            con = this.dataSource.getConnection();

            Font textFont = new Font(Font.FontFamily.TIMES_ROMAN, 7.5f, Font.NORMAL, BaseColor.BLACK);
            Font bigTextFont = new Font(Font.FontFamily.TIMES_ROMAN, 8, Font.NORMAL, BaseColor.BLACK);
            Font boldTextFont = new Font(Font.FontFamily.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK);

            PdfPTable table = new PdfPTable(2);
            table.setWidths(new float[]{5, 2});
            table.setWidthPercentage(99);

            PdfPCell cell = null;

            List vsList = getVehicleScheduleListPDF(con, billNo, crb.getAqmonth(), crb.getAqyear());
            if (vsList != null && vsList.size() > 0) {
                Iterator itr = vsList.iterator();
                VehicleScheduleBean vsbean = null;
                while (itr.hasNext()) {
                    vsbean = (VehicleScheduleBean) itr.next();
                    slno++;
                    if (pageNo == 0) {
                        pageNo++;
                        printHeaderVchSchPdf(crb, table, cell, pageNo);
                    }
                    total = total + vsbean.getAdAmt();

                    if (vsbean.getNowDedt().equals("P")) {

                        cell = new PdfPCell(new Phrase(vsbean.getAdName(), bigTextFont));
                        cell.setBorder(Rectangle.NO_BORDER);
                        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                        table.addCell(cell);

                    } else if (vsbean.getNowDedt().equals("I")) {
                        cell = new PdfPCell(new Phrase(vsbean.getAdName() + " INTEREST", bigTextFont));
                        cell.setBorder(Rectangle.NO_BORDER);
                        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                        table.addCell(cell);
                    }

                    cell = new PdfPCell(new Phrase(vsbean.getAdAmt() + "   ", textFont));
                    cell.setBorder(Rectangle.NO_BORDER);
                    cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
                    table.addCell(cell);

                    if (slno % 20 == 0) {
                        printTotalVchSchPdf(crb.getDdoname(), table, cell, total);
                        document.add(table);
                        document.newPage();

                        table = new PdfPTable(2);
                        table.setWidths(new int[]{4, 1});
                        table.setWidthPercentage(80);

                        pageNo++;
                        printHeaderVchSchPdf(crb, table, cell, pageNo);
                    }
                    if (slno == vsList.size()) {
                        printTotalVchSchPdf(crb.getDdoname(), table, cell, total);
                        document.add(table);
                    }
                }
            } else {
                cell = new PdfPCell(new Phrase(" There is no record ", boldTextFont));
                cell.setBorder(Rectangle.BOTTOM);
                cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                cell.setColspan(2);
                table.addCell(cell);
                document.add(table);
            }

        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            DataBaseFunctions.closeSqlObjects(con);
        }
    }

    public List getVehicleScheduleListPDF(Connection con, String billNo, int aqMonth, int aqYear) throws Exception {

        VehicleScheduleBean vsbean = null;
        Statement stmt = null;
        ResultSet rs = null;
        List dataList = new ArrayList();
        int sum = 0;
        String aqDtlsTbl = "";

        try {

            stmt = con.createStatement();
            aqDtlsTbl = getAqDtlsTableName(billNo);
            String query = "SELECT sum(AD_AMT) sum1,AD_CODE,G_LOAN.LOAN_NAME,NOW_DEDN FROM(SELECT AD_AMT,AD_CODE,NOW_DEDN FROM(SELECT AQSL_NO"
                    + " from AQ_MAST WHERE BILL_NO = '" + billNo + "' and aq_month = " + aqMonth + " and aq_year= " + aqYear + ")AQMAST "
                    + "INNER JOIN (SELECT AQSL_NO,AD_AMT,AD_CODE,NOW_DEDN FROM " + aqDtlsTbl + " WHERE AD_AMT>0)AQDTLS "
                    + "ON AQDTLS.AQSL_NO = AQMAST.AQSL_NO)TAB INNER JOIN (SELECT LOAN_NAME,IS_VEHICLE_LOAN,LOAN_TP FROM G_LOAN)G_LOAN "
                    + "ON G_LOAN.LOAN_TP=TAB.AD_CODE AND G_LOAN.IS_VEHICLE_LOAN='Y' GROUP BY AD_CODE,NOW_DEDN,LOAN_NAME ORDER BY NOW_DEDN desc";
            rs = stmt.executeQuery(query);

            while (rs.next()) {
                vsbean = new VehicleScheduleBean();
                vsbean.setAdCode(rs.getString("AD_CODE"));
                vsbean.setAdName(rs.getString("LOAN_NAME"));
                vsbean.setNowDedt(rs.getString("NOW_DEDN"));
                sum = rs.getInt("sum1");
                vsbean.setAdAmt(sum);

                dataList.add(vsbean);
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            DataBaseFunctions.closeSqlObjects(rs, stmt);
        }
        return dataList;
    }

    private void printHeaderVchSchPdf(CommonReportParamBean crb, PdfPTable table, PdfPCell cell, int pageno) throws Exception {

        Font boldTextFont = new Font(Font.FontFamily.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK);
        Font hdrTextFont = new Font(Font.FontFamily.TIMES_ROMAN, 9, Font.BOLD, BaseColor.BLACK);

        cell = new PdfPCell(new Phrase("Page No : " + pageno, boldTextFont));
        cell.setColspan(2);
        cell.setBorder(Rectangle.NO_BORDER);
        cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase(crb.getOfficeen(), hdrTextFont));
        cell.setColspan(2);
        cell.setBorder(Rectangle.NO_BORDER);
        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(cell);

        cell = new PdfPCell();
        cell.setColspan(2);
        cell.setFixedHeight(10);
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);

        //start of inner table
        PdfPTable innertable = new PdfPTable(2);
        innertable.setWidths(new float[]{0.25f, 1});
        innertable.setWidthPercentage(50);

        PdfPCell innercell = null;

        innercell = new PdfPCell(new Phrase("Bill No / DATE : ", hdrTextFont));
        innercell.setBorder(Rectangle.NO_BORDER);
        innertable.addCell(innercell);

        String billNo = "";
        if (crb.getBilldesc() != null && !crb.getBilldesc().equals("")) {
            billNo = crb.getBilldesc();
        } else {
            billNo = " ";
        }
        innercell = new PdfPCell(new Phrase(billNo + " / " + crb.getBilldate(), boldTextFont));
        innercell.setBorder(Rectangle.NO_BORDER);
        innertable.addCell(innercell);
        //end of inner table
        cell = new PdfPCell(innertable);
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);
        cell = new PdfPCell();
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);

        //start of inner table
        innertable = new PdfPTable(2);
        innertable.setWidths(new float[]{0.7f, 1});
        innertable.setWidthPercentage(50);

        innercell = new PdfPCell(new Phrase("ABSTRACT OF VEHICLE LOAN FOR THE MONTH OF: ", boldTextFont));
        innercell.setBorder(Rectangle.NO_BORDER);
        innertable.addCell(innercell);

        innercell = new PdfPCell(new Phrase(crb.getAqMonthAsName() + " - " + crb.getAqyear(), boldTextFont));
        innercell.setBorder(Rectangle.NO_BORDER);
        innertable.addCell(innercell);
        //end of inner table

        cell = new PdfPCell(innertable);
        cell.setColspan(2);
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase(StringUtils.repeat("-", 192), boldTextFont));
        cell.setColspan(2);
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);
    }

    private void printTotalVchSchPdf(String ddoName, PdfPTable table, PdfPCell cell, int total) throws Exception {

        Font boldTextFont = new Font(Font.FontFamily.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK);

        cell = new PdfPCell(new Phrase(StringUtils.repeat("-", 192), boldTextFont));
        cell.setColspan(2);
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("Grand Total:", boldTextFont));
        cell.setBorder(Rectangle.NO_BORDER);
        cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
        table.addCell(cell);
        cell = new PdfPCell(new Phrase(total + "", boldTextFont));
        cell.setBorder(Rectangle.NO_BORDER);
        cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("IN WORDS ( RUPEES " + Numtowordconvertion.convertNumber(total).toUpperCase() + " Only.", boldTextFont));
        cell.setColspan(2);
        cell.setBorder(Rectangle.NO_BORDER);
        cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase(StringUtils.repeat("-", 192), boldTextFont));
        cell.setColspan(2);
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);

        cell = new PdfPCell();
        cell.setColspan(2);
        cell.setFixedHeight(20);
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase(StringUtils.defaultString(ddoName), boldTextFont));
        cell.setColspan(2);
        cell.setBorder(Rectangle.NO_BORDER);
        cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("", boldTextFont));
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("Date: ", boldTextFont));
        cell.setBorder(Rectangle.NO_BORDER);
        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(cell);
    }

    @Override
    public void getRTISchedulePdf(Document document, String billNo, CommonReportParamBean crb) {

        Connection con = null;
        int slno = 0;
        int pageNo = 0;
        int total = 0;

        try {

            con = dataSource.getConnection();

            Font textFont = new Font(Font.FontFamily.TIMES_ROMAN, 8, Font.NORMAL, BaseColor.BLACK);
            Font boldTextFont = new Font(Font.FontFamily.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK);

            PdfPTable table = new PdfPTable(2);
            table.setWidths(new float[]{2.7f, 5});
            table.setWidthPercentage(100);

            PdfPCell cell = null;
            cell = new PdfPCell(new Phrase("( To be credited to Government Account by transfer Credit under Head of Account 0070-Other"
                    + " administrative services-118-received under RTI Act 2005-0015-Collection of fees and fine-02178-Fees"
                    + " and fine under RTI,2005 )", boldTextFont));
            cell.setColspan(2);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("---------- * ---------", boldTextFont));
            cell.setColspan(2);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell();
            cell.setColspan(2);
            cell.setFixedHeight(10);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("Name of the Department", boldTextFont));
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase(crb.getDeptname(), textFont));
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("Name of the Office", boldTextFont));
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase(crb.getOfficeen(), textFont));
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("Designation of the Drawing & Disbursing Officer", boldTextFont));
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase(crb.getDdoname(), textFont));
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("Head of Account under which salary is drawn", boldTextFont));
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("", textFont));
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("Bill No & Date", boldTextFont));
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase(crb.getBilldesc() + " of " + crb.getBilldate(), textFont));
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            document.add(table);

            table = new PdfPTable(8);
            table.setWidths(new int[]{1, 3, 2, 2, 2, 3, 3, 3});
            table.setWidthPercentage(100);

            cell = new PdfPCell();
            cell.setColspan(8);
            cell.setFixedHeight(10);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("Sl No", boldTextFont));
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);
            cell = new PdfPCell(new Phrase("Name of Employee", boldTextFont));
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);
            cell = new PdfPCell(new Phrase("Fine Imposed", boldTextFont));
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);
            cell = new PdfPCell(new Phrase("No of Instalment", boldTextFont));
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);
            cell = new PdfPCell(new Phrase("Amount Recovered", boldTextFont));
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);
            cell = new PdfPCell(new Phrase("Total Amount recovered till end of month", boldTextFont));
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);
            cell = new PdfPCell(new Phrase("Balance to be recovered", boldTextFont));
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);
            cell = new PdfPCell(new Phrase("Remarks", boldTextFont));
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            List rtiList = getRTIDataList(con, billNo, crb.getAqmonth(), crb.getAqyear());

            if (rtiList != null && rtiList.size() > 0) {
                Iterator itr = rtiList.iterator();
                RTIScheduleBean rtiBean = null;
                while (itr.hasNext()) {
                    rtiBean = (RTIScheduleBean) itr.next();
                    slno++;

                    if (pageNo == 0) {
                        pageNo++;
                    }
                    total = total + Integer.parseInt(rtiBean.getAmtRecvd());

                    cell = new PdfPCell(new Phrase(rtiBean.getSlNo() + "", textFont));
                    cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                    table.addCell(cell);

                    cell = new PdfPCell(new Phrase(StringUtils.defaultString(rtiBean.getEmpName()), textFont));
                    cell.setHorizontalAlignment(Element.ALIGN_LEFT);
                    table.addCell(cell);

                    cell = new PdfPCell(new Phrase(StringUtils.defaultString(rtiBean.getFineImposed()), textFont));
                    cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                    table.addCell(cell);

                    cell = new PdfPCell(new Phrase(StringUtils.defaultString(rtiBean.getNoofInstalment()), textFont));
                    cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                    table.addCell(cell);

                    cell = new PdfPCell(new Phrase(StringUtils.defaultString(rtiBean.getAmtRecvd()), textFont));
                    cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
                    table.addCell(cell);

                    cell = new PdfPCell(new Phrase(StringUtils.defaultString(rtiBean.getTotAmtRecvd()), textFont));
                    cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
                    table.addCell(cell);

                    cell = new PdfPCell(new Phrase(StringUtils.defaultString(rtiBean.getBalRec()), textFont));
                    cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
                    table.addCell(cell);

                    cell = new PdfPCell(new Phrase(StringUtils.defaultString(rtiBean.getRemarks()), textFont));
                    cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                    table.addCell(cell);

                    if (slno % 20 == 0) {
                        document.add(table);
                        document.newPage();

                        table = new PdfPTable(8);
                        table.setWidths(new int[]{1, 3, 2, 2, 2, 3, 3, 3});
                        table.setWidthPercentage(100);

                        pageNo++;
                    }
                }

                if (slno == rtiList.size()) {
                    cell = new PdfPCell();
                    cell.setColspan(8);
                    cell.setFixedHeight(10);
                    cell.setBorder(Rectangle.NO_BORDER);
                    table.addCell(cell);

                    cell = new PdfPCell(new Phrase("Total", boldTextFont));
                    cell.setColspan(4);
                    cell.setBorder(Rectangle.NO_BORDER);
                    cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                    table.addCell(cell);
                    cell = new PdfPCell(new Phrase(total + "", boldTextFont));
                    //cell.setColspan(4);
                    cell.setBorder(Rectangle.NO_BORDER);
                    cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
                    table.addCell(cell);
                    cell = new PdfPCell();
                    cell.setColspan(3);
                    cell.setBorder(Rectangle.NO_BORDER);
                    //cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
                    table.addCell(cell);

                    cell = new PdfPCell(new Phrase("RUPEES " + StringUtils.upperCase(Numtowordconvertion.convertNumber(total)) + " ONLY", boldTextFont));
                    cell.setColspan(8);
                    cell.setBorder(Rectangle.NO_BORDER);
                    cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                    table.addCell(cell);
                }

            }

            cell = new PdfPCell();
            cell.setColspan(8);
            cell.setFixedHeight(50);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("To be filled by the Treasury Officer / Special Treasury Officer / Sub-Treasury Officer", textFont));
            cell.setColspan(8);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell();
            cell.setColspan(8);
            cell.setFixedHeight(20);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell();
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);
            cell = new PdfPCell(new Phrase("Name of the Treasury / Special Treasury / Sub-Treasury \n T.V. No and date of encashment of the Bill\n"
                    + "Sl No           Date                           of the Receipt Schdule in which for\naccounted for by Transfer Credit", textFont));
            cell.setColspan(7);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            document.add(table);

        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            DataBaseFunctions.closeSqlObjects(con);
        }
    }

    public List getRTIDataList(Connection con, String billNo, int aqMonth, int aqYear) throws Exception {

        RTIScheduleBean rtiBean = null;
        Statement stmt = null;
        ResultSet rs = null;
        List dataList = new ArrayList();
        String aqDtlsTbl = "";
        int slno = 1;
        try {

            stmt = con.createStatement();
            aqDtlsTbl = getAqDtlsTableName(billNo);

            String rtiQuery = "SELECT EMP_NAME,AD_AMT,REF_DESC,TOT_REC_AMT,P_ORG_AMT FROM ( SELECT EMP_NAME,AD_AMT,REF_DESC,TOT_REC_AMT,AD_REF_ID FROM "
                    + "(SELECT EMP_NAME, AQSL_NO FROM AQ_MAST WHERE BILL_NO = '" + billNo + "' and aq_month = " + aqMonth + " and aq_year= " + aqYear + ") AQ_MAST "
                    + "INNER JOIN (SELECT AQSL_NO,AD_AMT,REF_DESC,TOT_REC_AMT,AD_REF_ID FROM " + aqDtlsTbl + " WHERE AD_CODE='RPR' AND AD_AMT>0) AQ_DTLS "
                    + "ON AQ_MAST.AQSL_NO=AQ_DTLS.AQSL_NO) AQ_MAST "
                    + "INNER JOIN (SELECT P_ORG_AMT,LOANID FROM EMP_LOAN_SANC WHERE LOAN_TP='RPR') EMP_LOAN_SANC "
                    + "ON AQ_MAST.AD_REF_ID=EMP_LOAN_SANC.LOANID";
            rs = stmt.executeQuery(rtiQuery);

            while (rs.next()) {
                rtiBean = new RTIScheduleBean();

                rtiBean.setSlNo(slno + "");
                rtiBean.setEmpName(rs.getString("EMP_NAME"));
                rtiBean.setFineImposed(rs.getString("P_ORG_AMT"));
                rtiBean.setNoofInstalment(rs.getString("REF_DESC"));
                rtiBean.setAmtRecvd(rs.getString("AD_AMT"));
                rtiBean.setTotAmtRecvd(rs.getString("TOT_REC_AMT"));
                rtiBean.setBalRec((rs.getInt("P_ORG_AMT") - rs.getInt("TOT_REC_AMT")) + "");
                rtiBean.setRemarks("");
                slno++;

                dataList.add(rtiBean);
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            DataBaseFunctions.closeSqlObjects(rs, stmt);
        }
        return dataList;
    }

    @Override
    public void getLtcSchedulePagePDF(Document document, String billNo, CommonReportParamBean crb) {

        Connection con = null;
        PreparedStatement pstmt = null;
        ResultSet rs = null;

        String chartOfAcc = "";
        int slno = 0;
        int pageNo = 0;
        int total = 0;

        try {

            con = dataSource.getConnection();

            Font textFont = new Font(Font.FontFamily.TIMES_ROMAN, 8f, Font.NORMAL, BaseColor.BLACK);
            Font boldTextFont = new Font(Font.FontFamily.TIMES_ROMAN, 8.5f, Font.BOLD, BaseColor.BLACK);
            Font hdrTextFont = new Font(Font.FontFamily.TIMES_ROMAN, 9f, Font.BOLD, BaseColor.BLACK);

            PdfPTable table = new PdfPTable(10);
            table.setWidths(new float[]{0.5f, 3, 0.8f, 0.8f, 1, 1.3f, 1.3f, 1.3f, 1, 1});
            table.setWidthPercentage(100);

            PdfPCell cell = null;

            String query = "SELECT DEMAND_NO, MAJOR_HEAD, SUB_MAJOR_HEAD, MINOR_HEAD, SUB_MINOR_HEAD1, SUB_MINOR_HEAD2, SUB_MINOR_HEAD3, PLAN, "
                    + "SECTOR FROM BILL_MAST WHERE BILL_NO='" + billNo + "' and aq_month = " + crb.getAqmonth() + " and aq_year = " + crb.getAqyear() + " ";
            pstmt = con.prepareStatement(query);
            rs = pstmt.executeQuery();
            if (rs.next()) {
                chartOfAcc = StringUtils.defaultString(rs.getString("DEMAND_NO")) + " - " + StringUtils.defaultString(rs.getString("MAJOR_HEAD")) + " - "
                        + StringUtils.defaultString(rs.getString("SUB_MAJOR_HEAD")) + " - " + StringUtils.defaultString(rs.getString("MINOR_HEAD")) + " - "
                        + StringUtils.defaultString(rs.getString("SUB_MINOR_HEAD1")) + " - " + StringUtils.defaultString(rs.getString("SUB_MINOR_HEAD2"))
                        + " - " + StringUtils.defaultString(rs.getString("PLAN")) + " - " + StringUtils.defaultString(rs.getString("SUB_MINOR_HEAD3")) + " - "
                        + StringUtils.defaultString(rs.getString("SECTOR"));
            }

            List ltcList = getLTCScheduleDataList(con, billNo, crb.getAqmonth(), crb.getAqyear());
            if (ltcList != null && ltcList.size() > 0) {
                LTCScheduleBean ltcBean = null;
                for (int i = 0; i < ltcList.size(); i++) {
                    ltcBean = (LTCScheduleBean) ltcList.get(i);
                    slno++;

                    if (pageNo == 0) {
                        pageNo++;
                        printHeaderLTC(table, cell, pageNo, crb, chartOfAcc);
                    }
                    if (ltcBean.getInstAmt() != null && !ltcBean.getInstAmt().equals("")) {
                        total = total + Integer.parseInt(ltcBean.getInstAmt());
                    }

                    cell = new PdfPCell(new Phrase(ltcBean.getSlNo() + "", textFont));
                    table.addCell(cell);
                    cell = new PdfPCell(new Phrase(StringUtils.defaultString(ltcBean.getEmpName()) + "\n" + StringUtils.defaultString(ltcBean.getEmpDesg()), textFont));
                    table.addCell(cell);
                    cell = new PdfPCell(new Phrase(StringUtils.defaultString(ltcBean.getVchNo()), textFont));
                    table.addCell(cell);
                    cell = new PdfPCell(new Phrase(StringUtils.defaultString(ltcBean.getAccNo()), textFont));
                    table.addCell(cell);
                    cell = new PdfPCell(new Phrase(StringUtils.defaultString(ltcBean.getOrgAmt()), textFont));
                    table.addCell(cell);
                    cell = new PdfPCell(new Phrase(StringUtils.defaultString(ltcBean.getInstRecovered()), textFont));
                    table.addCell(cell);
                    cell = new PdfPCell(new Phrase(StringUtils.defaultString(ltcBean.getInstAmt()), textFont));
                    table.addCell(cell);
                    cell = new PdfPCell(new Phrase(StringUtils.defaultString(ltcBean.getRecoveredAmt()), textFont));
                    table.addCell(cell);
                    cell = new PdfPCell(new Phrase(StringUtils.defaultString(ltcBean.getBalanceAmt()), textFont));
                    table.addCell(cell);
                    cell = new PdfPCell(new Phrase(StringUtils.defaultString(ltcBean.getRemark()), textFont));
                    table.addCell(cell);

                    if (slno % 5 == 0 && slno != ltcList.size()) {
                        printTotalLTC(table, cell, total, boldTextFont);
                        document.add(table);
                        document.newPage();

                        table = new PdfPTable(10);
                        table.setWidths(new float[]{0.5f, 3, 0.8f, 0.8f, 1, 1.3f, 1.3f, 1.3f, 1, 1});
                        table.setWidthPercentage(100);

                        pageNo++;
                        printHeaderLTC(table, cell, pageNo, crb, chartOfAcc);
                    }
                    if (slno == ltcList.size()) {
                        grandTotal(table, cell, boldTextFont, crb, total);
                        document.add(table);
                    }
                }
            } else {
                cell = new PdfPCell(new Phrase(" There is no record ", boldTextFont));
                cell.setBorder(Rectangle.BOTTOM);
                cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                cell.setColspan(10);
                table.addCell(cell);
                document.add(table);
            }

        } catch (Exception e) {
            e.printStackTrace();
        } finally {

            DataBaseFunctions.closeSqlObjects(rs, pstmt);
            DataBaseFunctions.closeSqlObjects(con);
        }
    }

    private void printTotalLTC(PdfPTable table, PdfPCell cell, int total, Font boldTextFont) throws Exception {

        cell = new PdfPCell(new Phrase("TOTAL", boldTextFont));
        cell.setColspan(4);
        table.addCell(cell);

        cell = new PdfPCell();
        cell.setColspan(2);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase(total + "", boldTextFont));
        table.addCell(cell);

        cell = new PdfPCell();
        cell.setColspan(3);
        table.addCell(cell);
    }

    private void grandTotal(PdfPTable table, PdfPCell cell, Font boldTextFont, CommonReportParamBean crb, int total) throws Exception {

        cell = new PdfPCell(new Phrase("RECOVERY FOR THE MONTH OF " + crb.getAqMonthAsName() + " - " + crb.getAqyear(), boldTextFont));
        cell.setColspan(6);
        table.addCell(cell);

        cell = new PdfPCell();
        table.addCell(cell);

        cell = new PdfPCell(new Phrase(total + "", boldTextFont));
        table.addCell(cell);

        cell = new PdfPCell();
        cell.setColspan(2);
        table.addCell(cell);

        cell = new PdfPCell();
        cell.setColspan(5);
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("RUPEES " + StringUtils.upperCase(Numtowordconvertion.convertNumber(total)) + " ONLY", boldTextFont));
        cell.setColspan(5);
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);
    }

    private void printHeaderLTC(PdfPTable table, PdfPCell cell, int pageNo, CommonReportParamBean crb, String chartAccNo) throws Exception {

        Font textFont = new Font(Font.FontFamily.TIMES_ROMAN, 7.5f, Font.NORMAL, BaseColor.BLACK);
        Font boldTextFont = new Font(Font.FontFamily.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK);
        Font hdrTextFont = new Font(Font.FontFamily.TIMES_ROMAN, 9, Font.BOLD, BaseColor.BLACK);

        cell = new PdfPCell(new Phrase("SCHEDULE OF RECOVERIES FOR LTC ADVANCE", hdrTextFont));
        cell.setColspan(10);
        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("FOR THE MONTH OF " + crb.getAqMonthAsName() + " - " + crb.getAqyear(), hdrTextFont));
        cell.setColspan(10);
        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("---------- * ---------", boldTextFont));
        cell.setColspan(10);
        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("Name of The Department:", boldTextFont));
        cell.setColspan(2);
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);
        cell = new PdfPCell(new Phrase(crb.getDeptname(), textFont));
        cell.setColspan(8);
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("Office Code:", boldTextFont));
        cell.setColspan(2);
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);
        cell = new PdfPCell(new Phrase(crb.getOfficeen() + "(" + crb.getOffcode() + ")", textFont));
        cell.setColspan(8);
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("Designation of DDO:", boldTextFont));
        cell.setColspan(2);
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);
        cell = new PdfPCell(new Phrase(crb.getDdoname(), textFont));
        cell.setColspan(8);
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("Name of The Treasury:", boldTextFont));
        cell.setColspan(2);
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);
        cell = new PdfPCell(new Phrase(crb.getTreasuryname(), textFont));
        cell.setColspan(8);
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("Bill No:", boldTextFont));
        cell.setColspan(2);
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);
        cell = new PdfPCell(new Phrase(crb.getBilldesc(), textFont));
        cell.setColspan(8);
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("Bill Date:", boldTextFont));
        cell.setColspan(2);
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);
        cell = new PdfPCell(new Phrase(crb.getBilldate(), textFont));
        cell.setColspan(8);
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("Head of Account:", boldTextFont));
        cell.setColspan(2);
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);
        cell = new PdfPCell(new Phrase(chartAccNo, textFont));
        cell.setColspan(8);
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);

        cell = new PdfPCell();
        cell.setColspan(10);
        cell.setFixedHeight(20);
        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("SL No", boldTextFont));
        table.addCell(cell);
        cell = new PdfPCell(new Phrase("Name of the Employee/\nDesignation", boldTextFont));
        table.addCell(cell);
        cell = new PdfPCell(new Phrase("T.V No", boldTextFont));
        table.addCell(cell);
        cell = new PdfPCell(new Phrase("Account No", boldTextFont));
        table.addCell(cell);
        cell = new PdfPCell(new Phrase("Original Amount", boldTextFont));
        table.addCell(cell);
        cell = new PdfPCell(new Phrase("No of Recovery Instalments", boldTextFont));
        table.addCell(cell);
        cell = new PdfPCell(new Phrase("Instalment Amount", boldTextFont));
        table.addCell(cell);
        cell = new PdfPCell(new Phrase("Recovery up to the Month", boldTextFont));
        table.addCell(cell);
        cell = new PdfPCell(new Phrase("Balance Outstanding", boldTextFont));
        table.addCell(cell);
        cell = new PdfPCell(new Phrase("Remarks", boldTextFont));
        table.addCell(cell);

    }

    public List getLTCScheduleDataList(Connection con1, String billNo, int aqMonth, int aqYear) throws Exception {

        PreparedStatement pstmt = null;
        ResultSet rs = null;
        LTCScheduleBean ltcBean = null;
        String aqDtlsTbl = "";
        int slno = 0;
        int bal = 0;
        List dataList = new ArrayList();

        try {
            aqDtlsTbl = getAqDtlsTableName(billNo);

            String ltcQry = "SELECT BILL_MAST.VCH_NO,BILL_MAST.VCH_DATE,DTL.EMP_CODE,DTL.EMP_NAME,DTL.GPF_ACC_NO,DTL.CUR_DESG,DTL.CUR_BASIC,DTL.ACC_NO,"
                    + "DTL.AD_AMT,DTL.AQSL_NO,P_ORG_AMT,REF_DESC,TOT_REC_AMT FROM ((SELECT * FROM BILL_MAST WHERE "
                    + "BILL_MAST.BILL_NO='" + billNo + "')BILL_MAST "
                    + "LEFT OUTER JOIN (SELECT AQ_MAST.EMP_CODE,AQ_MAST.GPF_ACC_NO,AQ_MAST.BILL_NO,AQ_MAST.CUR_DESG,AQ_MAST.EMP_NAME,"
                    + "AQ_MAST.CUR_BASIC,AQ_MAST.POST_SL_NO,AQ_DTLS.TOT_REC_AMT,AQ_DTLS.REF_DESC,AQ_DTLS.AD_REF_ID,AQ_DTLS.ACC_NO,AQ_DTLS.AD_AMT,"
                    + "AQ_DTLS.AQSL_NO FROM((SELECT * FROM AQ_MAST WHERE AQ_MAST.BILL_NO='" + billNo + "' and aq_month = " + aqMonth + " "
                    + "and aq_year = " + aqYear + " )AQ_MAST INNER JOIN (SELECT * FROM " + aqDtlsTbl + " WHERE SCHEDULE='LTCA' AND AD_TYPE='D' "
                    + "AND AD_AMT >0)AQ_DTLS ON AQ_DTLS.AQSL_NO = AQ_MAST.AQSL_NO))DTL ON BILL_MAST.BILL_NO=DTL.BILL_NO "
                    + "left outer join emp_loan_sanc on dtl.AD_REF_ID=emp_loan_sanc.loanid) order by POST_SL_NO";

            pstmt = con1.prepareStatement(ltcQry);
            rs = pstmt.executeQuery();
            while (rs.next()) {

                ltcBean = new LTCScheduleBean();
                slno++;

                ltcBean.setSlNo(slno + "");
                ltcBean.setEmpName(rs.getString("EMP_NAME"));
                ltcBean.setEmpDesg(rs.getString("CUR_DESG"));
                ltcBean.setVchNo(rs.getString("VCH_NO"));
                ltcBean.setVchDate(CommonFunctions.getFormattedOutputDate1(rs.getDate("VCH_DATE")));
                ltcBean.setAccNo(rs.getString("ACC_NO"));
                ltcBean.setOrgAmt(rs.getString("P_ORG_AMT"));
                ltcBean.setInstRecovered(rs.getString("REF_DESC"));
                ltcBean.setInstAmt(rs.getString("AD_AMT"));
                ltcBean.setRecoveredAmt(rs.getString("TOT_REC_AMT"));
                bal = rs.getInt("P_ORG_AMT") - rs.getInt("TOT_REC_AMT");
                ltcBean.setBalanceAmt(bal + "");
                ltcBean.setRemark(rs.getString("GPF_ACC_NO"));

                dataList.add(ltcBean);
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            DataBaseFunctions.closeSqlObjects(rs, pstmt);
        }
        return dataList;
    }

    @Override
    public OtcForm82Bean getArrOTCForm82ScheduleDetails(String billno) {

        Connection con = null;
        OtcForm82Bean otcBean = new OtcForm82Bean();
        Statement stmt = null;
        ResultSet rs = null;
        Statement stmt5 = null;
        ResultSet rs5 = null;
        ResultSet rs6 = null;

        try {
            con = dataSource.getConnection();
            stmt = con.createStatement();
            stmt5 = con.createStatement();

            PayrollCommonFunction prcf = new PayrollCommonFunction();
            String otcQry1 = "SELECT AQ_YEAR,AQ_MONTH,BILL_DESC,TR_NAME,BEN_REF_NO FROM (SELECT AQ_YEAR,AQ_MONTH,BILL_DESC,TR_CODE,BEN_REF_NO FROM BILL_MAST WHERE "
                    + "BILL_NO='" + billno + "') BILL_MAST LEFT OUTER JOIN G_TREASURY ON BILL_MAST.TR_CODE=G_TREASURY.TR_CODE";
            rs = stmt.executeQuery(otcQry1);
            if (rs.next()) {

                otcBean.setYear(StringUtils.defaultString(rs.getString("AQ_YEAR")));
                int monthVal = rs.getInt("AQ_MONTH");
                otcBean.setMonthinNum(monthVal);
                otcBean.setMonth(CalendarCommonMethods.getFullMonthAsString(monthVal));
                otcBean.setBillDesc(StringUtils.defaultString(rs.getString("BILL_DESC")));
                otcBean.setTreasuryName(StringUtils.defaultString(rs.getString("TR_NAME")));

                if (rs.getString("BEN_REF_NO") != null && !rs.getString("BEN_REF_NO").equals("")) {
                    otcBean.setBenRefNo(rs.getString("BEN_REF_NO"));
                } else {
                    otcBean.setBenRefNo("..............");
                }
            }

            String otcQry6 = "SELECT COUNT(*) NOOFEMP FROM ARR_MAST WHERE BILL_NO=" + billno + " AND EMP_ID IS NOT NULL";
            rs5 = stmt5.executeQuery(otcQry6);
            if (rs5.next()) {
                otcBean.setNoofEmp(rs5.getString("NOOFEMP"));
            }
            String octQry7 = "SELECT SUM(DDO_RECOVERY) DDO_RECOVERY FROM ARR_MAST WHERE BILL_NO=" + billno + " AND DDO_RECOVERY IS NOT NULL";
            rs6 = stmt5.executeQuery(octQry7);
            if (rs6.next()) {
                otcBean.setToDdoAccount(rs6.getInt("DDO_RECOVERY"));
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            DataBaseFunctions.closeSqlObjects(rs, stmt);
            DataBaseFunctions.closeSqlObjects(rs5, stmt5);
            DataBaseFunctions.closeSqlObjects(con);
        }
        return otcBean;
    }

    @Override
    public OtcPlanForm40Bean getArrOTCForm40ScheduleDetails(String billno, int year, int month, CommonReportParamBean crb) {

        Connection con = null;

        PreparedStatement pst = null;
        ResultSet rs = null;

        OtcPlanForm40Bean otcBean = new OtcPlanForm40Bean();

        try {
            con = dataSource.getConnection();

            String otcQuery = "SELECT * FROM(select G_TREASURY.TR_NAME,G_BANK.BANK_NAME,G_BRANCH.BRANCH_NAME,(BILL_MAST.GROSS_AMT - BILL_MAST.DED_AMT) "
                    + "NET_AMOUNT,BILL_MAST.REC_BY,BILL_MAST.DESG,G_POST.POST,BILL_MAST.GROSS_AMT,DEMAND_NO,MAJOR_HEAD,SUB_MAJOR_HEAD,MINOR_HEAD,"
                    + "SUB_MINOR_HEAD1,SUB_MINOR_HEAD2,SUB_MINOR_HEAD3,BEN_REF_NO,TOKEN_NO,PLAN,BILL_MAST.DDO_CODE from (select * from bill_mast WHERE "
                    + "BILL_NO=? and aq_month=? and aq_year=?) bill_mast LEFT OUTER join G_POST "
                    + "on bill_mast.OFF_DDO=G_POST.POST_CODE LEFT OUTER JOIN G_BANK ON "
                    + "bill_mast.BANK_CODE=G_BANK.BANK_CODE LEFT OUTER join G_BRANCH ON bill_mast.BRANCH_CODE=G_BRANCH.BRANCH_CODE LEFT OUTER join "
                    + "G_TREASURY ON bill_mast.TR_CODE=G_TREASURY.TR_CODE)TAB LEFT OUTER JOIN G_PLAN_STATUS ON TAB.PLAN=G_PLAN_STATUS.DESCRIPTION";
            pst = con.prepareStatement(otcQuery);
            pst.setInt(1, Integer.parseInt(billno));
            pst.setInt(2, month);
            pst.setInt(3, year);
            rs = pst.executeQuery();
            while (rs.next()) {
                if (rs.getString("BEN_REF_NO") != null && !rs.getString("BEN_REF_NO").equals("")) {
                    otcBean.setBenRefNo(rs.getString("BEN_REF_NO"));
                }
                otcBean.setOtcCode(rs.getString("PLAN_STATUS"));
                otcBean.setOtcStatus(rs.getString("PLAN_DESCPN"));

                otcBean.setTreasuryName(rs.getString("TR_NAME"));
                otcBean.setDemandNo(rs.getString("DEMAND_NO"));
                otcBean.setMajorHead(rs.getString("MAJOR_HEAD"));
                otcBean.setSubMajorHead(rs.getString("SUB_MAJOR_HEAD"));
                otcBean.setMinorHead(rs.getString("MINOR_HEAD"));
                otcBean.setSubMinorHead(rs.getString("SUB_MINOR_HEAD1"));
                otcBean.setSubMinorHead2(rs.getString("SUB_MINOR_HEAD2"));
                otcBean.setSubMinorHead3(rs.getString("SUB_MINOR_HEAD3"));
                otcBean.setDdoCode(rs.getString("DDO_CODE"));
                otcBean.setToken(rs.getString("TOKEN_NO"));
            }

            if (crb.getBilldesc() != null && !crb.getBilldesc().equals("")) {
                otcBean.setBillDesc(crb.getBilldesc());
            }
            if (crb.getBilldate() != null && !crb.getBilldate().equals("")) {
                otcBean.setBillDate(crb.getBilldate());
            }
            if (crb.getDdoname() != null && !crb.getDdoname().equals("")) {
                otcBean.setDdoName(crb.getDdoname());
            }
            otcBean.setBillMonth(CalendarCommonMethods.getMonthAsString(crb.getAqmonth()));
            otcBean.setBillYear("" + crb.getAqyear());
            otcBean.setOfficeName(crb.getOfficename());
            otcBean.setTanNo(crb.getTanno());

        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            DataBaseFunctions.closeSqlObjects(rs, pst);
            DataBaseFunctions.closeSqlObjects(con);
        }
        return otcBean;
    }

    @Override
    public void generateSchedulePDFReportsForAG(Document document, String schedule, ArrayList billList) {

        String majorhead = "";

        String majorheadData = "";

        String loanName = "";

        String nowDedn = "";
        String[] nowDednArr = {"P", "I"};
        String nowDednLabel = "Principal";

        ArrayList majorheadPriList = new ArrayList();
        ArrayList majorheadIntList = new ArrayList();

        MajorHeadAttribute mha = null;
        ArrayList vchdataPriList = new ArrayList();
        ArrayList vchdataIntList = new ArrayList();

        List empdatalist = null;
        try {
            Font f1 = new Font();
            f1.setSize(10);
            f1.setFamily("Times New Roman");

            PdfPTable table = null;
            PdfPTable innertable = null;

            PdfPCell cell = null;
            PdfPCell innercell = null;

            if (schedule.equals("CMPA")) {
                loanName = "COMPUTER";
            } else if (schedule.equals("HBA")) {
                loanName = "HOUSE BUILDING ADVANCE";
            } else if (schedule.equals("MCA")) {
                loanName = "MOTOR CYCLE ADVANCE";
            } else if (schedule.equals("GA")) {
                loanName = "GPF ADVANCE";
            } else if (schedule.equals("GIS")) {
                loanName = "GIS";
            }

            double pTotAmt = 0;
            double iTotAmt = 0;
            /*if (nowDedn.equals("I")) {
             nowDednLabel = "Interest";
             }*/
            int index = 0;
            if (billList != null && billList.size() > 0) {
                while (index <= 1) {
                    nowDedn = nowDednArr[index];
                    if (nowDedn.equals("I")) {
                        nowDednLabel = "Interest";
                    }
                    for (int i = 0; i < billList.size(); i++) {

                        BillBean bb = (BillBean) billList.get(i);

                        innertable = new PdfPTable(10);
                        innertable.setWidths(new float[]{0.5f, 3, 1, 1, 1.1f, 1, 1, 1.7f, 0.9f, 1});
                        innertable.setWidthPercentage(100);

                        empdatalist = getEmployeeAquitanceDetailsForAG(bb.getBillno(), bb.getBillYear(), bb.getBillMonth(), schedule, nowDedn);
                        String billmonth = (bb.getBillMonth() + 1) + "-" + bb.getBillYear();
                        if (empdatalist != null && empdatalist.size() > 0) {

                            table = new PdfPTable(4);
                            table.setWidths(new int[]{2, 2, 2, 2});
                            table.setWidthPercentage(100);
                            if (majorhead.equals("")) {
                                majorhead = bb.getMajorhead();

                                mha = new MajorHeadAttribute();
                                mha.setMajorhead(majorhead);

                                printHeader(table, cell, f1, majorhead, bb.getTreasurycode(), loanName, nowDednLabel);
                            }
                            if (!majorhead.equals(bb.getMajorhead())) {
                                majorhead = bb.getMajorhead();

                                if (nowDedn.equals("P")) {
                                    mha.setVchPriList(vchdataPriList);
                                    majorheadPriList.add(mha);
                                } else if (nowDedn.equals("I")) {
                                    mha.setVchIntList(vchdataIntList);
                                    majorheadIntList.add(mha);
                                }

                                mha = new MajorHeadAttribute();
                                mha.setMajorhead(majorhead);

                                vchdataPriList = new ArrayList();
                                vchdataIntList = new ArrayList();
                                printHeader(table, cell, f1, majorhead, bb.getTreasurycode(), loanName, nowDednLabel);
                            }

                            printSubHeader(innertable, innercell, f1, bb.getMajorhead() + "/" + bb.getVoucherno(), bb.getVoucherdate(), bb.getDdocode());

                            cell = new PdfPCell();
                            cell.setColspan(4);
                            cell.setFixedHeight(20);
                            cell.setBorder(Rectangle.NO_BORDER);
                            table.addCell(cell);

                            document.add(table);
                            double billrecovamt = 0;
                            AquitanceDataAGBean agbean = null;
                            for (int j = 0; j < empdatalist.size(); j++) {
                                agbean = (AquitanceDataAGBean) empdatalist.get(j);

                                innercell = new PdfPCell(new Phrase((j + 1) + "", f1));
                                //innercell.setBorder(Rectangle.NO_BORDER);
                                innertable.addCell(innercell);
                                innercell = new PdfPCell(new Phrase(agbean.getEmpname() + "\n" + agbean.getDesg(), f1));
                                //innercell.setBorder(Rectangle.NO_BORDER);
                                innertable.addCell(innercell);
                                innercell = new PdfPCell(new Phrase(agbean.getOrgAmount(), f1));
                                //innercell.setBorder(Rectangle.NO_BORDER);
                                innertable.addCell(innercell);
                                innercell = new PdfPCell(new Phrase(agbean.getRefCount(), f1));
                                //innercell.setBorder(Rectangle.NO_BORDER);
                                innertable.addCell(innercell);
                                innercell = new PdfPCell(new Phrase(agbean.getAdAmt(), f1));
                                billrecovamt = billrecovamt + Double.parseDouble(agbean.getAdAmt());
                                //innercell.setBorder(Rectangle.NO_BORDER);
                                innertable.addCell(innercell);
                                innercell = new PdfPCell(new Phrase(agbean.getTotRecAmt(), f1));
                                //innercell.setBorder(Rectangle.NO_BORDER);
                                innertable.addCell(innercell);
                                innercell = new PdfPCell(new Phrase(agbean.getBalance(), f1));
                                //innercell.setBorder(Rectangle.NO_BORDER);
                                innertable.addCell(innercell);
                                innercell = new PdfPCell(new Phrase(agbean.getGpfNo(), f1));
                                //innercell.setBorder(Rectangle.NO_BORDER);
                                innertable.addCell(innercell);
                                String nowDednforTable = "";
                                if (nowDedn.equals("P")) {
                                    nowDednforTable = "PRI";
                                    double pTemp = Double.parseDouble(agbean.getAdAmt());
                                    pTotAmt = pTotAmt + pTemp;
                                } else if (nowDedn.equals("I")) {
                                    nowDednforTable = "INT";
                                    double iTemp = Double.parseDouble(agbean.getAdAmt());
                                    iTotAmt = iTotAmt + iTemp;
                                }
                                innercell = new PdfPCell(new Phrase(nowDednforTable, f1));
                                //innercell.setBorder(Rectangle.NO_BORDER);
                                innercell.setHorizontalAlignment(Element.ALIGN_CENTER);
                                innertable.addCell(innercell);
                                innercell = new PdfPCell(new Phrase(billmonth, f1));
                                //innercell.setBorder(Rectangle.NO_BORDER);
                                innertable.addCell(innercell);
                            }

                            innercell = new PdfPCell(new Phrase(" ", f1));
                            innercell.setBorder(Rectangle.NO_BORDER);
                            innertable.addCell(innercell);
                            innercell = new PdfPCell(new Phrase(" ", f1));
                            innercell.setBorder(Rectangle.NO_BORDER);
                            innertable.addCell(innercell);
                            innercell = new PdfPCell(new Phrase(" ", f1));
                            innercell.setBorder(Rectangle.NO_BORDER);
                            innertable.addCell(innercell);
                            innercell = new PdfPCell(new Phrase(" ", f1));
                            innercell.setBorder(Rectangle.NO_BORDER);
                            innertable.addCell(innercell);
                            innercell = new PdfPCell(new Phrase(billrecovamt + "", f1));
                            innercell.setBorder(Rectangle.NO_BORDER);
                            innertable.addCell(innercell);
                            innercell = new PdfPCell(new Phrase(" ", f1));
                            innercell.setBorder(Rectangle.NO_BORDER);
                            innertable.addCell(innercell);
                            innercell = new PdfPCell(new Phrase(" ", f1));
                            innercell.setBorder(Rectangle.NO_BORDER);
                            innertable.addCell(innercell);
                            innercell = new PdfPCell(new Phrase(" ", f1));
                            innercell.setBorder(Rectangle.NO_BORDER);
                            innertable.addCell(innercell);
                            innercell = new PdfPCell(new Phrase(" ", f1));
                            innercell.setBorder(Rectangle.NO_BORDER);
                            innertable.addCell(innercell);
                            innercell = new PdfPCell(new Phrase(" ", f1));
                            innercell.setBorder(Rectangle.NO_BORDER);
                            innertable.addCell(innercell);

                            if (nowDedn.equals("P")) {
                                SelectOption so = new SelectOption();
                                so.setLabel(bb.getVoucherno());
                                so.setValue(pTotAmt + "");
                                vchdataPriList.add(so);
                            } else if (nowDedn.equals("I")) {
                                SelectOption so = new SelectOption();
                                so.setLabel(bb.getVoucherno());
                                so.setValue(iTotAmt + "");
                                vchdataIntList.add(so);
                            }

                            pTotAmt = 0;
                            iTotAmt = 0;

                            innercell = new PdfPCell();
                            innercell.setColspan(10);
                            innercell.setFixedHeight(20);
                            innercell.setBorder(Rectangle.NO_BORDER);
                            innertable.addCell(innercell);
                        }
                        /*innercell = new PdfPCell();
                         innercell.setColspan(9);
                         innercell.setFixedHeight(20);
                         innercell.setBorder(Rectangle.NO_BORDER);
                         innertable.addCell(innercell);*/
                        if (empdatalist != null && empdatalist.size() > 0) {
                            document.add(innertable);
                        }
                    }
                    index++;
                }
            }
            if (empdatalist != null && empdatalist.size() > 0) {
                document.add(table);
                document.newPage();
            }
            if (majorheadPriList != null && majorheadPriList.size() > 0) {

                table = new PdfPTable(2);
                table.setWidths(new int[]{3, 2});
                table.setWidthPercentage(70);

                cell = new PdfPCell(new Phrase("PRINCIPAL", getDesired_PDF_Font(11, true, true)));
                cell.setColspan(2);
                cell.setBorder(Rectangle.NO_BORDER);
                cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                table.addCell(cell);

                cell = new PdfPCell();
                cell.setColspan(2);
                cell.setBorder(Rectangle.NO_BORDER);
                cell.setFixedHeight(10);
                table.addCell(cell);

                mha = null;
                for (int i = 0; i < majorheadPriList.size(); i++) {
                    mha = (MajorHeadAttribute) majorheadPriList.get(i);

                    cell = new PdfPCell(new Phrase("Major Head:" + StringUtils.repeat(" ", 50) + mha.getMajorhead(), getDesired_PDF_Font(11, true, false)));
                    cell.setColspan(2);
                    cell.setBorder(Rectangle.NO_BORDER);
                    cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                    table.addCell(cell);

                    innertable = new PdfPTable(2);
                    innertable.setWidths(new int[]{1, 1});
                    innertable.setWidthPercentage(70);

                    double tvPTot = 0;

                    for (int j = 0; j < mha.getVchPriList().size(); j++) {
                        SelectOption so = (SelectOption) mha.getVchPriList().get(j);

                        innercell = new PdfPCell(new Phrase(so.getLabel(), f1));
                        innercell.setBorder(Rectangle.NO_BORDER);
                        innercell.setHorizontalAlignment(Element.ALIGN_CENTER);
                        innertable.addCell(innercell);
                        innercell = new PdfPCell(new Phrase(so.getValue(), f1));
                        innercell.setBorder(Rectangle.NO_BORDER);
                        innercell.setHorizontalAlignment(Element.ALIGN_CENTER);
                        innertable.addCell(innercell);

                        double tvPTotTemp = Double.parseDouble(so.getValue());
                        tvPTot = tvPTot + tvPTotTemp;
                    }

                    innercell = new PdfPCell(new Phrase("Total", getDesired_PDF_Font(11, true, false)));
                    innercell.setBorder(Rectangle.NO_BORDER);
                    innercell.setHorizontalAlignment(Element.ALIGN_CENTER);
                    innertable.addCell(innercell);
                    innercell = new PdfPCell(new Phrase(tvPTot + "", getDesired_PDF_Font(11, true, false)));
                    innercell.setBorder(Rectangle.NO_BORDER);
                    innercell.setHorizontalAlignment(Element.ALIGN_CENTER);
                    innertable.addCell(innercell);

                    cell = new PdfPCell(innertable);
                    cell.setColspan(2);
                    cell.setBorder(Rectangle.NO_BORDER);
                    table.addCell(cell);

                    cell = new PdfPCell(new Phrase(StringUtils.repeat("_", 52), f1));
                    cell.setColspan(2);
                    cell.setBorder(Rectangle.NO_BORDER);
                    cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                    table.addCell(cell);
                }
                document.add(table);
            }
            document.newPage();
            if (majorheadIntList != null && majorheadIntList.size() > 0) {
                table = new PdfPTable(2);
                table.setWidths(new int[]{3, 2});
                table.setWidthPercentage(70);

                cell = new PdfPCell();
                cell.setColspan(2);
                cell.setBorder(Rectangle.NO_BORDER);
                cell.setFixedHeight(20);
                table.addCell(cell);

                cell = new PdfPCell(new Phrase("INTEREST", getDesired_PDF_Font(11, true, true)));
                cell.setColspan(2);
                cell.setBorder(Rectangle.NO_BORDER);
                cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                table.addCell(cell);

                cell = new PdfPCell();
                cell.setColspan(2);
                cell.setBorder(Rectangle.NO_BORDER);
                cell.setFixedHeight(10);
                table.addCell(cell);

                mha = null;
                for (int i = 0; i < majorheadIntList.size(); i++) {
                    mha = (MajorHeadAttribute) majorheadIntList.get(i);

                    cell = new PdfPCell(new Phrase("Major Head:" + StringUtils.repeat(" ", 50) + mha.getMajorhead(), getDesired_PDF_Font(11, true, false)));
                    cell.setColspan(2);
                    cell.setBorder(Rectangle.NO_BORDER);
                    cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                    table.addCell(cell);

                    innertable = new PdfPTable(2);
                    innertable.setWidths(new int[]{1, 1});
                    innertable.setWidthPercentage(70);

                    double tvPTot = 0;

                    for (int j = 0; j < mha.getVchIntList().size(); j++) {
                        SelectOption so = (SelectOption) mha.getVchIntList().get(j);

                        innercell = new PdfPCell(new Phrase(so.getLabel(), f1));
                        innercell.setBorder(Rectangle.NO_BORDER);
                        innercell.setHorizontalAlignment(Element.ALIGN_CENTER);
                        innertable.addCell(innercell);
                        innercell = new PdfPCell(new Phrase(so.getValue(), f1));
                        innercell.setBorder(Rectangle.NO_BORDER);
                        innercell.setHorizontalAlignment(Element.ALIGN_CENTER);
                        innertable.addCell(innercell);

                        double tvPTotTemp = Double.parseDouble(so.getValue());
                        tvPTot = tvPTot + tvPTotTemp;
                    }

                    innercell = new PdfPCell(new Phrase("Total", getDesired_PDF_Font(11, true, false)));
                    innercell.setBorder(Rectangle.NO_BORDER);
                    innercell.setHorizontalAlignment(Element.ALIGN_CENTER);
                    innertable.addCell(innercell);
                    innercell = new PdfPCell(new Phrase(tvPTot + "", getDesired_PDF_Font(11, true, false)));
                    innercell.setBorder(Rectangle.NO_BORDER);
                    innercell.setHorizontalAlignment(Element.ALIGN_CENTER);
                    innertable.addCell(innercell);

                    cell = new PdfPCell(innertable);
                    cell.setColspan(2);
                    cell.setBorder(Rectangle.NO_BORDER);
                    table.addCell(cell);

                    cell = new PdfPCell(new Phrase(StringUtils.repeat("_", 52), f1));
                    cell.setColspan(2);
                    cell.setBorder(Rectangle.NO_BORDER);
                    cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                    table.addCell(cell);
                }
                document.add(table);
            }

            //document.add(table);
        } catch (Exception e) {
            e.printStackTrace();
        } finally {

        }
    }

    private List getEmployeeAquitanceDetailsForAG(String billNo, int year, int month, String adcode, String nowDedn) {

        Connection con = null;

        PreparedStatement pst = null;
        ResultSet rs = null;

        List datalist = new ArrayList();
        AquitanceDataAGBean agbean = null;

        String sql = "";
        String adCodeStr = "";
        try {
            con = this.dataSource.getConnection();

            if (!adcode.equals("GIS")) {
                if (adcode.equals("MCA")) {
                    adCodeStr = "(ad_code='MCA' or ad_code='VE' or ad_code='MOPA')";
                } else {
                    adCodeStr = "ad_code='" + adcode + "'";
                }
                sql = "select aq_mast.emp_code,emp_name,cur_desg,p_org_amt,ref_desc,ref_count,ad_amt,tot_rec_amt,(p_org_amt - tot_rec_amt) balance,gpf_acc_no from aq_mast"
                        + " inner join aq_dtls on aq_mast.aqsl_no=aq_dtls.aqsl_no"
                        + " left outer join emp_loan_sanc on aq_dtls.ad_ref_id=emp_loan_sanc.loanid where aq_mast.bill_no=? and aq_mast.aq_year=? and aq_mast.aq_month=? and " + adCodeStr + " and aq_dtls.now_dedn=? and ad_amt > 0";
                pst = con.prepareStatement(sql);
                pst.setInt(1, Integer.parseInt(billNo));
                pst.setInt(2, year);
                pst.setInt(3, month);
                //pst.setString(4, adcode);
                pst.setString(4, nowDedn);
            } else if (adcode.equals("GIS")) {
                adCodeStr = "ad_code='" + adcode + "'";
                sql = "select aq_mast.emp_code,emp_name,cur_desg,p_org_amt,ref_desc,ref_count,ad_amt,tot_rec_amt,(p_org_amt - tot_rec_amt) balance,gpf_acc_no from aq_mast"
                        + " inner join aq_dtls on aq_mast.aqsl_no=aq_dtls.aqsl_no"
                        + " left outer join emp_loan_sanc on aq_dtls.ad_ref_id=emp_loan_sanc.loanid where aq_mast.bill_no=? and aq_mast.aq_year=? and aq_mast.aq_month=? and " + adCodeStr + " and ad_amt > 0";
                pst = con.prepareStatement(sql);
                pst.setInt(1, Integer.parseInt(billNo));
                pst.setInt(2, year);
                pst.setInt(3, month);
                //pst.setString(4, adcode);
            }
            rs = pst.executeQuery();
            while (rs.next()) {
                agbean = new AquitanceDataAGBean();
                agbean.setEmpid(rs.getString("emp_code"));
                agbean.setGpfNo(rs.getString("gpf_acc_no"));
                agbean.setEmpname(rs.getString("emp_name"));
                agbean.setDesg(rs.getString("cur_desg"));
                agbean.setOrgAmount(rs.getString("p_org_amt"));
                if (rs.getString("ref_desc") != null && !rs.getString("ref_desc").equals("")) {
                    String[] refdesc = rs.getString("ref_desc").split("/");
                    //agbean.setRefCount(refdesc[0]);
                    agbean.setRefCount(rs.getString("ref_desc"));
                } else {
                    agbean.setRefCount(rs.getString("ref_count"));
                }
                agbean.setAdAmt(rs.getString("ad_amt"));
                agbean.setTotRecAmt(rs.getString("tot_rec_amt"));
                agbean.setBalance(rs.getString("balance"));
                datalist.add(agbean);
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            DataBaseFunctions.closeSqlObjects(rs, pst);
            DataBaseFunctions.closeSqlObjects(con);
        }
        return datalist;
    }

    private void printHeader(PdfPTable table, PdfPCell cell, Font f1, String majorhead, String treasuryCode, String loanName, String nowDedn) {

        try {

            cell = new PdfPCell(new Phrase("MAJOR HEAD", f1));
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            //cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);
            cell = new PdfPCell(new Phrase("TREASURY CODE", f1));
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            //cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);
            cell = new PdfPCell(new Phrase("LOAN TYPE", f1));
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            //cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);
            cell = new PdfPCell(new Phrase("DEDUCTION TYPE", f1));
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            //cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase(majorhead, f1));
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            //cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);
            cell = new PdfPCell(new Phrase(treasuryCode, f1));
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            //cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);
            cell = new PdfPCell(new Phrase(loanName, f1));
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            //cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);
            cell = new PdfPCell(new Phrase(nowDedn, f1));
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            //cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void printSubHeader(PdfPTable table, PdfPCell cell, Font f1, String vchNo, String vchDate, String ddocode) {

        try {
            cell = new PdfPCell(new Phrase("TV No: " + vchNo, f1));
            cell.setColspan(2);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);
            cell = new PdfPCell(new Phrase("TV Date: " + vchDate, f1));
            cell.setColspan(3);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);
            cell = new PdfPCell(new Phrase("DDO Code: " + ddocode, f1));
            cell.setColspan(5);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("Sl No", f1));
            //cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);
            cell = new PdfPCell(new Phrase("Name and Designation", f1));
            //cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);
            cell = new PdfPCell(new Phrase("Amt of Org. Adv.", f1));
            //cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);
            cell = new PdfPCell(new Phrase("No of Instl. of Rec.", f1));
            //cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);
            cell = new PdfPCell(new Phrase("Amt Deducted in the Bill", f1));
            //cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);
            cell = new PdfPCell(new Phrase("Rec. up to the Month", f1));
            //cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);
            cell = new PdfPCell(new Phrase("Bal Out-\nstanding", f1));
            //cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);
            cell = new PdfPCell(new Phrase("Loanee Id", f1));
            //cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);
            cell = new PdfPCell(new Phrase("PRI/\nINT", f1));
            //cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);
            cell = new PdfPCell(new Phrase("Salary Month", f1));
            //cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    @Override
    public void generateBeneficiaryListPDF(Document document, CommonReportParamBean crb, String billNo, ArrayList emplist, double netAmt) {

        String netAmtInString = "";
        String grossAmtInString = "";
        try {
            //ArrayList emplist = getBillWiseEmployeeList(billNo, crb.getTypeofBill());

            netAmtInString = Double.valueOf(netAmt + "").longValue() + "";

            grossAmtInString = Double.valueOf(crb.getBillGrossAmt()).longValue() + "";

            Font f1 = new Font();
            f1.setSize(10);
            f1.setFamily("Times New Roman");

            Font f2 = new Font();
            f2.setSize(8);
            f2.setFamily("Times New Roman");

            PdfPTable table = null;
            PdfPCell cell = null;

            table = new PdfPTable(1);
            table.setWidths(new int[]{5});
            table.setWidthPercentage(80);

            cell = new PdfPCell(new Phrase(crb.getDdocode(), f1));
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase(crb.getOfficeen(), f1));
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("Bill Wise Beneficiary List Report", f1));
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell();
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            cell.setFixedHeight(20);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            document.add(table);

            table = new PdfPTable(1);
            table.setWidths(new int[]{5});
            table.setWidthPercentage(100);

            cell = new PdfPCell(new Phrase(StringUtils.repeat("_", 93), f1));
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            document.add(table);

            table = new PdfPTable(2);
            table.setWidths(new float[]{1.5f, 4});
            table.setWidthPercentage(100);

            cell = new PdfPCell(new Phrase("Treasury Details:", f1));
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);
            cell = new PdfPCell(new Phrase(crb.getTreasuryname(), f1));
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("Bill Date and No:", f1));
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);
            cell = new PdfPCell(new Phrase(StringUtils.defaultString(crb.getBilldate()) + "         " + StringUtils.defaultString(crb.getBilldesc()), f1));
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("Gross and Net Amt:", f1));
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);
            //cell = new PdfPCell(new Phrase(crb.getBillGrossAmt() + "         " + (crb.getBillGrossAmt() - (crb.getBillDedAmt())), f1));
            cell = new PdfPCell(new Phrase(grossAmtInString + "         " + netAmtInString, f1));
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            /*cell = new PdfPCell(new Phrase("Reference Id:", f1));
             cell.setBorder(Rectangle.NO_BORDER);
             table.addCell(cell);
             cell = new PdfPCell(new Phrase(StringUtils.defaultString(crb.getBenRefNo()), f1));
             cell.setBorder(Rectangle.NO_BORDER);
             table.addCell(cell);*/
            cell = new PdfPCell();
            cell.setColspan(2);
            cell.setFixedHeight(20);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            document.add(table);

            table = new PdfPTable(8);
            table.setWidths(new float[]{1, 3, 2, 2, 2, 2.5f, 2, 1.5f});
            table.setWidthPercentage(100);

            cell = new PdfPCell(new Phrase("Sl No", f1));
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);
            cell = new PdfPCell(new Phrase("Beneficiary Name", f1));
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);
            cell = new PdfPCell(new Phrase("Bank IFSC Code", f1));
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);
            cell = new PdfPCell(new Phrase("GPF/ TPF/ PRAN ", f1));
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);
            cell = new PdfPCell(new Phrase("Account", f1));
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);
            cell = new PdfPCell(new Phrase(" Bank Account No", f1));
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);
            cell = new PdfPCell(new Phrase("Mobile", f1));
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);
            cell = new PdfPCell(new Phrase("Amount", f1));
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase(StringUtils.repeat("_", 93), f1));
            cell.setColspan(8);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            if (emplist != null && emplist.size() > 0) {
                int slno = 0;
                //BeneficiaryListBean blb = null;
                SalaryBenefitiaryDetails blb = null;
                Iterator itr = emplist.iterator();
                while (itr.hasNext()) {
                    //blb = (BeneficiaryListBean) itr.next();
                    blb = (SalaryBenefitiaryDetails) itr.next();

                    slno = slno + 1;

                    cell = new PdfPCell(new Phrase(slno + "", f2));
                    cell.setBorder(Rectangle.NO_BORDER);
                    table.addCell(cell);
                    cell = new PdfPCell(new Phrase(blb.getBenf_name(), f2));
                    cell.setBorder(Rectangle.NO_BORDER);
                    table.addCell(cell);
                    cell = new PdfPCell(new Phrase(blb.getBank_ifsc_code(), f2));
                    cell.setBorder(Rectangle.NO_BORDER);
                    table.addCell(cell);
                    cell = new PdfPCell(new Phrase(blb.getGpfAcctNo(), f2));
                    cell.setBorder(Rectangle.NO_BORDER);
                    table.addCell(cell);
                    String acctType = "Savings";
                    if (blb.getAccount_type() != null && !blb.getAccount_type().equals("")) {
                        if (blb.getAccount_type().equals("C")) {
                            acctType = "Current";
                        } else if (blb.getAccount_type().equals("S")) {
                            acctType = "Savings";
                        }
                    }
                    cell = new PdfPCell(new Phrase(acctType, f2));
                    cell.setBorder(Rectangle.NO_BORDER);
                    cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                    table.addCell(cell);
                    cell = new PdfPCell(new Phrase(blb.getBen_acct_no(), f2));
                    cell.setBorder(Rectangle.NO_BORDER);
                    cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                    table.addCell(cell);
                    cell = new PdfPCell(new Phrase(blb.getMobile_number(), f2));
                    cell.setBorder(Rectangle.NO_BORDER);
                    cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                    table.addCell(cell);
                    cell = new PdfPCell(new Phrase(blb.getAmount() + "", f2));
                    cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
                    cell.setBorder(Rectangle.NO_BORDER);
                    table.addCell(cell);
                }
            }
            document.add(table);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    @Override
    public ArrayList getBillWiseEmployeeList(String billNo, String typeOfBill) {

        Connection con = null;

        PreparedStatement pst = null;
        PreparedStatement pst2 = null;

        ResultSet rs = null;
        ResultSet rs2 = null;

        ArrayList emplist = new ArrayList();

        BeneficiaryListBean blb = null;
        try {
            con = this.dataSource.getConnection();
            String sql2 = " SELECT BANK_ACC_NO, other_beneficiary.IFSC_CODE, MOBILE, net_amt, beneficiary_name FROM EMP_RELATION "
                    + " inner join other_beneficiary on EMP_RELATION.emp_id=other_beneficiary.ref_emp_id "
                    + " and EMP_RELATION.sl_no=other_beneficiary.rel_slno"
                    + " WHERE EMP_ID=? and bill_id=? AND AMOUNT_TYPE IS NOT NULL ";

            if (typeOfBill.contains("ARREAR")) {
                String sql = " SELECT PVT_DED_AMT,G_OFFICE.BANK_CODE,G_OFFICE.BRANCH_CODE,IFSC_CODE,MICR_CODE,DDO_CUR_ACC_NO,OFF_EN FROM BILL_MAST "
                        + " INNER JOIN G_OFFICE ON BILL_MAST.OFF_CODE = G_OFFICE.OFF_CODE "
                        + " LEFT OUTER JOIN G_BRANCH ON G_OFFICE.BRANCH_CODE = G_BRANCH.BRANCH_CODE WHERE BILL_NO=? and PVT_DED_AMT>0";
                pst = con.prepareStatement(sql);
                pst.setInt(1, Integer.parseInt(billNo));
                rs = pst.executeQuery();
                if (rs.next()) {
                    blb = new BeneficiaryListBean();
                    blb.setBeneficiaryName(rs.getString("OFF_EN"));
                    blb.setIfsCode(rs.getString("ifsc_code"));
                    blb.setMicrNo(rs.getString("micr_code"));
                    blb.setBankAccountType("Current");
                    blb.setBanckAccNo(rs.getString("DDO_CUR_ACC_NO"));
                    blb.setMobile("");
                    blb.setAmount(rs.getString("PVT_DED_AMT"));
                    if (blb.getAmount() != null && !blb.getAmount().equals("")) {
                        if (Integer.parseInt(blb.getAmount()) > 0) {
                            emplist.add(blb);
                        }
                    }
                }
                sql = "select BILL_NO,emp_name, aq_mast.bank_acc_no, aq_mast.branch_name, gpf_type, aq_mast.acct_type ,"
                        + " gpf_acc_no, gross_amt,ded_amt,gross_amt-(coalesce(ded_amt,0)+coalesce(pvt_ded_amt, 0)) net_amt, mobile, aq_mast.ifsc_code from arr_mast aq_mast"
                        + " inner join emp_mast on aq_mast.emp_id=emp_mast.emp_id"
                        + " where BILL_NO=? and aq_mast.emp_id is not null order by emp_name";
                pst = con.prepareStatement(sql);
                pst.setInt(1, Integer.parseInt(billNo));
                rs = pst.executeQuery();
                while (rs.next()) {
                    blb = new BeneficiaryListBean();
                    blb.setBeneficiaryName(rs.getString("emp_name"));
                    blb.setIfsCode(rs.getString("ifsc_code"));
                    //blb.setMicrNo(rs.getString("micr_code"));
                    blb.setBankAccountType("Savings");
                    blb.setBanckAccNo(rs.getString("bank_acc_no"));
                    blb.setMobile(rs.getString("mobile"));
                    blb.setAmount(rs.getString("net_amt"));
                    if (Integer.parseInt(blb.getAmount()) > 0) {
                        emplist.add(blb);
                    }
                }
            } else {
                /*String sql = "select BILL_NO,emp_name,aq_date, aq_mast.bank_acc_no, aq_mast.branch_name, gpf_type, aq_mast.acct_type , NULLIF(regexp_replace(gpf_acc_no, '\\\\D','','g'), '')::numeric  gpfNumber,"
                 + " gpf_acc_no, gross_amt,ded_amt,gross_amt-(ded_amt+coalesce(pvt_ded_amt, 0)) net_amt, mobile, ifsc_code,micr_code from aq_mast"
                 + " inner join emp_mast on aq_mast.emp_code=emp_mast.emp_id"
                 + " inner join g_branch on aq_mast.branch_name=g_branch.branch_code where BILL_NO=? and emp_code is not null order by emp_name";*/

                /*int ucbamt = 0;

                 String sql = "select sum(ad_amt) ad_amt, aq_mast.off_code from aq_mast "
                 + "                        inner join aq_dtls on aq_mast.aqsl_no=aq_dtls.aqsl_no "
                 + "                        and ad_code='UCB' and ad_amt>0 and aq_mast.bill_no=? GROUP BY aq_mast.off_code ";
                 pst = con.prepareStatement(sql);
                 pst.setInt(1, Integer.parseInt(billNo));
                 rs = pst.executeQuery();
                 if (rs.next()) {
                 blb = new BeneficiaryListBean();
                 blb.setBeneficiaryName("THE UTKAL COOPERATIVE BANKING SOCIETY LIMITED (" + rs.getString("off_code") + ")");
                 blb.setIfsCode("YESB0UTKAL1");
                 blb.setMicrNo("751221002");
                 blb.setBankAccountType("Current");
                 blb.setBanckAccNo("0010220000052");
                 blb.setMobile("");
                 blb.setAmount(rs.getString("ad_amt"));
                 if (Integer.parseInt(blb.getAmount()) > 0) {
                 ucbamt = Integer.parseInt(blb.getAmount());
                 emplist.add(blb);
                 }
                 }*/
                int otherBenfAmount = 0;

                String sql = "select manage_pvt_deduction.*,off_en from manage_pvt_deduction"
                        + " inner join g_office on manage_pvt_deduction.off_code=g_office.off_code where bill_no=? order by off_code";
                pst = con.prepareStatement(sql);
                pst.setInt(1, Integer.parseInt(billNo));
                rs = pst.executeQuery();
                while (rs.next()) {
                    blb = new BeneficiaryListBean();
                    blb.setBeneficiaryName(rs.getString("OFF_EN"));
                    blb.setIfsCode(rs.getString("ifs_code"));
                    blb.setBankAccountType("Current");
                    blb.setBanckAccNo(rs.getString("bank_acc_no"));
                    blb.setMobile("");
                    blb.setAmount(rs.getString("amount"));
                    if (blb.getAmount() != null && Integer.parseInt(blb.getAmount()) > 0) {
                        otherBenfAmount = otherBenfAmount + Integer.parseInt(blb.getAmount());
                        emplist.add(blb);
                    }
                }

                sql = "SELECT PVT_DED_AMT,G_OFFICE.BANK_CODE,G_OFFICE.BRANCH_CODE,IFSC_CODE,MICR_CODE,DDO_CUR_ACC_NO,OFF_EN FROM BILL_MAST "
                        + "INNER JOIN G_OFFICE ON BILL_MAST.OFF_CODE = G_OFFICE.OFF_CODE "
                        + "LEFT OUTER JOIN G_BRANCH ON G_OFFICE.BRANCH_CODE = G_BRANCH.BRANCH_CODE WHERE BILL_NO=? and PVT_DED_AMT>0";
                pst = con.prepareStatement(sql);
                pst.setInt(1, Integer.parseInt(billNo));
                rs = pst.executeQuery();
                if (rs.next()) {
                    blb = new BeneficiaryListBean();
                    blb.setBeneficiaryName(rs.getString("OFF_EN"));
                    blb.setIfsCode(rs.getString("ifsc_code"));
                    blb.setMicrNo(rs.getString("micr_code"));
                    blb.setBankAccountType("Current");
                    blb.setBanckAccNo(rs.getString("DDO_CUR_ACC_NO"));
                    blb.setMobile("");
                    int ddocuracc = rs.getInt("PVT_DED_AMT") - otherBenfAmount;
                    blb.setAmount(ddocuracc + "");
                    if (Integer.parseInt(blb.getAmount()) > 0) {
                        emplist.add(blb);
                    }
                }

                // 
                /*sql = "select aq_mast.emp_code,aq_mast.aqsl_no, BILL_NO,emp_name,aq_date, aq_mast.bank_acc_no, aq_mast.branch_name, gpf_type, aq_mast.acct_type ,"
                 + " gpf_acc_no, gross_amt,ded_amt,gross_amt-(coalesce(ded_amt,0)+coalesce(pvt_ded_amt, 0)) net_amt, mobile, aq_mast.ifsc_code, emp_mast.if_maintenance_deduct from aq_mast"
                 + " inner join emp_mast on aq_mast.emp_code=emp_mast.emp_id"
                 + " where BILL_NO=? and emp_code is not null order by emp_name";*/
                sql = "select aq_mast.emp_code,BILL_NO,emp_name,aq_date, aq_mast.bank_acc_no, aq_mast.branch_name, gpf_type, aq_mast.acct_type ,"
                        + " gpf_acc_no, gross_amt,ded_amt,gross_amt-(coalesce(ded_amt,0)+coalesce(pvt_ded_amt, 0)) net_amt, mobile, aq_mast.ifsc_code, emp_mast.if_maintenance_deduct from"
                        + " (select bill_no,aq_mast.emp_code,emp_name,aq_date, aq_mast.bank_acc_no, aq_mast.branch_name, gpf_type, aq_mast.acct_type ,"
                        + " gpf_acc_no,aq_mast.ifsc_code, sum(gross_amt) gross_amt,sum(ded_amt) ded_amt,sum(pvt_ded_amt) pvt_ded_amt from aq_mast"
                        + " where BILL_NO=? and emp_code is not null group by bill_no,aq_mast.emp_code,emp_name,aq_date, aq_mast.bank_acc_no, aq_mast.branch_name, gpf_type, aq_mast.acct_type,"
                        + " gpf_acc_no,aq_mast.ifsc_code)aq_mast"
                        + " inner join emp_mast on aq_mast.emp_code=emp_mast.emp_id"
                        + " order by emp_name";
                pst = con.prepareStatement(sql);
                pst.setInt(1, Integer.parseInt(billNo));
                rs = pst.executeQuery();
                while (rs.next()) {
                    int netamt = 0;
                    if (rs.getString("if_maintenance_deduct") != null && !rs.getString("if_maintenance_deduct").equals("") && rs.getString("if_maintenance_deduct").equals("Y")) {
                        pst2 = con.prepareStatement(sql2);
                        pst2.setString(1, rs.getString("emp_code"));
                        pst2.setInt(2, Integer.parseInt(billNo));
                        rs2 = pst2.executeQuery();
                        while (rs2.next()) {
                            blb = new BeneficiaryListBean();
                            blb.setBeneficiaryName(rs2.getString("beneficiary_name"));
                            blb.setIfsCode(rs2.getString("ifsc_code"));
                            //blb.setMicrNo(rs.getString("micr_code"));
                            blb.setBankAccountType("Savings");
                            blb.setBanckAccNo(rs2.getString("bank_acc_no"));
                            blb.setMobile(rs2.getString("mobile"));
                            blb.setAmount(rs2.getString("net_amt"));
                            if (rs2.getString("net_amt") != null) {
                                netamt = rs2.getInt("net_amt");
                            }
                            if (Integer.parseInt(blb.getAmount()) > 0) {
                                if (rs.getInt("net_amt") > netamt) {
                                    emplist.add(blb);
                                }

                            }
                        }
                    }

                    blb = new BeneficiaryListBean();
                    blb.setBeneficiaryName(rs.getString("emp_name"));
                    blb.setIfsCode(rs.getString("ifsc_code"));
                    //blb.setMicrNo(rs.getString("micr_code"));
                    blb.setBankAccountType("Savings");
                    blb.setBanckAccNo(rs.getString("bank_acc_no"));
                    blb.setMobile(rs.getString("mobile"));
                    blb.setAmount((rs.getInt("net_amt") - netamt) + "");
                    if (Integer.parseInt(blb.getAmount()) > 0) {
                        emplist.add(blb);
                    }
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            DataBaseFunctions.closeSqlObjects(rs, pst);
            DataBaseFunctions.closeSqlObjects(con);
        }
        return emplist;
    }

    @Override
    public void secondScheduleUGCPDF(Document document, String empid) {

        Connection con = null;

        int fixedheight = 50;

        SecondScheduleBean secondSchlBean = new SecondScheduleBean();
        try {

            secondSchlBean = getPayRevisionOptionData(empid);

            Font f1 = new Font();
            f1.setSize(10);
            f1.setFamily("Times New Roman");

            PdfPTable table = null;
            PdfPCell cell = null;

            table = new PdfPTable(2);
            table.setWidths(new float[]{0.3f, 3});
            table.setWidthPercentage(80);

            cell = new PdfPCell(new Phrase("SECOND SCHEDULE", getDesired_PDF_Font(13, true, true)));
            cell.setColspan(2);
            cell.setFixedHeight(fixedheight);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("Application Form for exercising option to come over to the", getDesired_PDF_Font(13, true, false)));
            cell.setColspan(2);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("Odisha Revised Scales of Pay(For College Teachers) Rules 2019", getDesired_PDF_Font(13, true, false)));
            cell.setColspan(2);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("(See Rule-6)", getDesired_PDF_Font(12, false, false)));
            cell.setColspan(2);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell();
            cell.setColspan(2);
            cell.setFixedHeight(30);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            if (secondSchlBean.getOptionChosen().equals("1")) {

                Chunk c1 = new Chunk("I ", getDesired_PDF_Font(10, false, false));
                Chunk c2 = new Chunk(secondSchlBean.getEmpname(), getDesired_PDF_Font(10, true, false));
                Chunk c3 = new Chunk(" holding the post of ", getDesired_PDF_Font(10, false, false));
                Chunk c4 = new Chunk(StringUtils.defaultString(secondSchlBean.getPost()), getDesired_PDF_Font(10, true, false));
                Chunk c5 = new Chunk(" and drawing pay in the Pay Band and Academic Grade Pay of ", getDesired_PDF_Font(10, false, false));
                Chunk c6 = new Chunk(StringUtils.defaultString(secondSchlBean.getPayscale()) + "(" + StringUtils.defaultString(secondSchlBean.getGp() + "") + ")", getDesired_PDF_Font(10, true, false));
                Chunk c7 = new Chunk(" do hereby elect the revised pay structure with effect from 1st day of January,2016 ", getDesired_PDF_Font(10, false, false));
                Phrase p1 = new Phrase();
                p1.add(c1);
                p1.add(c2);
                p1.add(c3);
                p1.add(c4);
                p1.add(c5);
                p1.add(c6);
                p1.add(c7);

                cell = new PdfPCell(new Phrase("1.", f1));
                cell.setFixedHeight(fixedheight);
                cell.setBorder(Rectangle.NO_BORDER);
                table.addCell(cell);
                //cell = new PdfPCell(new Phrase("I "+secondSchlBean.getEmpname()+" holding the post of "+secondSchlBean.getPost()+" and drawing pay in the Pay Band and Grade Pay of "+secondSchlBean.getPayscale()+"("+ secondSchlBean.getGp()+") do hereby elect the revised pay structure with effect from 1st day of January,2016",f1));
                cell = new PdfPCell(p1);
                cell.setFixedHeight(fixedheight);
                cell.setBorder(Rectangle.NO_BORDER);
                table.addCell(cell);
            } else if (secondSchlBean.getOptionChosen().equals("2")) {

                Chunk c1 = new Chunk("I ", getDesired_PDF_Font(10, false, false));
                Chunk c2 = new Chunk(secondSchlBean.getEmpname(), getDesired_PDF_Font(10, true, false));
                Chunk c3 = new Chunk(" holding the post of ", getDesired_PDF_Font(10, false, false));
                Chunk c4 = new Chunk(StringUtils.defaultString(secondSchlBean.getPost()), getDesired_PDF_Font(10, true, false));
                Chunk c5 = new Chunk(" and drawing pay in the Pay Band and Academic Grade Pay of ", getDesired_PDF_Font(10, false, false));
                Chunk c6 = new Chunk(StringUtils.defaultString(secondSchlBean.getPayscale()) + "(" + StringUtils.defaultString(secondSchlBean.getGp() + "") + ")", getDesired_PDF_Font(10, true, false));
                Chunk c7 = new Chunk(" do hereby elect to continue on the existing Pay Band and Academic Grade Pay until the date ", getDesired_PDF_Font(10, false, false));
                Chunk c8 = new Chunk(StringUtils.defaultString(secondSchlBean.getEnteredDate()), getDesired_PDF_Font(10, true, false));
                Chunk c9 = new Chunk(" i.e the date of my next increment.", getDesired_PDF_Font(10, false, false));
                Phrase p1 = new Phrase();
                p1.add(c1);
                p1.add(c2);
                p1.add(c3);
                p1.add(c4);
                p1.add(c5);
                p1.add(c6);
                p1.add(c7);
                p1.add(c8);
                p1.add(c9);

                cell = new PdfPCell(new Phrase("1.", f1));
                cell.setFixedHeight(70);
                cell.setBorder(Rectangle.NO_BORDER);
                table.addCell(cell);
                //cell = new PdfPCell(new Phrase("I "+secondSchlBean.getEmpname()+" holding the post of "+secondSchlBean.getPost()+" and drawing pay in the Pay Band and Grade Pay of "+secondSchlBean.getPayscale()+"("+ secondSchlBean.getGp()+") do hereby elect to continue on the existing Pay Band and Grade Pay until the date "+txtDate+" (i.e the date of my next increment/promotion or up-gradation of the post/vacate or cease to draw pay in the existing pay structure).",f1));
                cell = new PdfPCell(p1);
                cell.setFixedHeight(70);
                cell.setBorder(Rectangle.NO_BORDER);
                table.addCell(cell);
            }

            cell = new PdfPCell();
            cell.setColspan(2);
            cell.setFixedHeight(20);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("2.", f1));
            cell.setFixedHeight(30);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);
            cell = new PdfPCell(new Phrase("The option hereby exercised is final and will not be modified at any subsequent date.", f1));
            cell.setFixedHeight(30);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell();
            cell.setColspan(2);
            cell.setFixedHeight(20);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("Date:", f1));
            cell.setColspan(2);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            document.add(table);

            table = new PdfPTable(2);
            table.setWidths(new float[]{2.5f, 2f});
            table.setWidthPercentage(80);

            cell = new PdfPCell();
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);
            cell = new PdfPCell(new Phrase(StringUtils.repeat("", 120) + "Signature:", f1));
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell();
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);
            cell = new PdfPCell(new Phrase(StringUtils.repeat("", 120) + "Designation:", f1));
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell();
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);
            cell = new PdfPCell(new Phrase(StringUtils.repeat("", 120) + "Office:", f1));
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell();
            cell.setColspan(2);
            cell.setFixedHeight(20);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell();
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);
            cell = new PdfPCell(new Phrase(StringUtils.repeat("", 120) + "Signed before me", f1));
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell();
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);
            cell = new PdfPCell(new Phrase(StringUtils.repeat("", 120) + "Head of Office/Any other Gazetted Officer with designated recieved the above declaration.", f1));
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell();
            cell.setColspan(2);
            cell.setFixedHeight(20);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell();
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);
            cell = new PdfPCell(new Phrase(StringUtils.repeat("", 120) + "Signature:", f1));
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell();
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);
            cell = new PdfPCell(new Phrase(StringUtils.repeat("", 120) + "Head of Office/Competent Authority:", f1));
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell();
            cell.setColspan(2);
            cell.setFixedHeight(20);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("Date:", f1));
            cell.setColspan(2);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("N.B: Delete whichever is not applicable at Para-1", f1));
            cell.setColspan(2);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            document.add(table);
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            DataBaseFunctions.closeSqlObjects(con);
        }

    }

    private String getTreasuryName(String trNo) {

        Connection con = null;

        PreparedStatement pst = null;
        ResultSet rs = null;

        String treasuryName = "";
        try {
            con = this.dataSource.getConnection();

            String sql = "select tr_name from g_treasury where tr_code=?";
            pst = con.prepareStatement(sql);
            pst.setString(1, trNo);
            rs = pst.executeQuery();
            if (rs.next()) {
                treasuryName = rs.getString("tr_name");
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            DataBaseFunctions.closeSqlObjects(rs, pst);
            DataBaseFunctions.closeSqlObjects(con);
        }
        return treasuryName;
    }

    @Override
    public SelectOption getBTPIHeaderClassification(String loantp) {
        Connection con = null;

        PreparedStatement pst = null;
        ResultSet rs = null;

        SelectOption so = new SelectOption();
        try {
            con = this.dataSource.getConnection();

            String sql = "select bt_head_principal_classification,bt_head_interest_classification from g_loan where loan_tp=?";
            pst = con.prepareStatement(sql);
            pst.setString(1, loantp);
            rs = pst.executeQuery();
            if (rs.next()) {
                so.setLabel(rs.getString("bt_head_principal_classification"));
                so.setValue(rs.getString("bt_head_interest_classification"));
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            DataBaseFunctions.closeSqlObjects(rs, pst);
            DataBaseFunctions.closeSqlObjects(con);
        }
        return so;
    }

    @Override
    public void generateGISSchedulePDFReportsForAG(Document document, String schedule, ArrayList billList) {

        String majorhead = "";

        String loanName = "";

        String nowDedn = "";
        //String[] nowDednArr = {"P"};
        String nowDednLabel = "Principal";

        ArrayList majorheadPriList = new ArrayList();

        MajorHeadAttribute mha = null;
        ArrayList vchdataPriList = new ArrayList();

        List empdatalist = null;
        try {
            Font f1 = new Font();
            f1.setSize(10);
            f1.setFamily("Times New Roman");

            PdfPTable table = null;
            PdfPTable innertable = null;

            PdfPCell cell = null;
            PdfPCell innercell = null;

            if (schedule.equals("CMPA")) {
                loanName = "COMPUTER";
            } else if (schedule.equals("HBA")) {
                loanName = "HOUSE BUILDING ADVANCE";
            } else if (schedule.equals("MCA")) {
                loanName = "MOTOR CYCLE ADVANCE";
            } else if (schedule.equals("GA")) {
                loanName = "GPF ADVANCE";
            } else if (schedule.equals("GIS")) {
                loanName = "AISGIS";
            }

            double pTotAmt = 0;

            if (billList != null && billList.size() > 0) {
                for (int i = 0; i < billList.size(); i++) {
                    //for (int i = 0; i < 1; i++) {
                    BillBean bb = (BillBean) billList.get(i);

                    innertable = new PdfPTable(5);
                    innertable.setWidths(new float[]{0.5f, 3f, 1.7f, 1.7f, 1});
                    innertable.setWidthPercentage(100);

                    empdatalist = getEmployeeAquitanceDetailsForAG(bb.getBillno(), bb.getBillYear(), bb.getBillMonth(), schedule, nowDedn);
                    String billmonth = (bb.getBillMonth() + 1) + "-" + bb.getBillYear();
                    if (empdatalist != null && empdatalist.size() > 0) {
                        table = new PdfPTable(4);
                        table.setWidths(new int[]{2, 2, 2, 2});
                        table.setWidthPercentage(100);
                        if (majorhead.equals("")) {
                            majorhead = bb.getMajorhead();

                            mha = new MajorHeadAttribute();
                            mha.setMajorhead(majorhead);

                            printGISHeader(table, cell, f1, majorhead, bb.getTreasurycode(), loanName, nowDednLabel);
                        }
                        if (!majorhead.equals(bb.getMajorhead())) {
                            majorhead = bb.getMajorhead();

                            mha.setVchPriList(vchdataPriList);
                            majorheadPriList.add(mha);

                            mha = new MajorHeadAttribute();
                            mha.setMajorhead(majorhead);

                            vchdataPriList = new ArrayList();
                            printGISHeader(table, cell, f1, majorhead, bb.getTreasurycode(), loanName, nowDednLabel);
                        }

                        printGISSubHeader(innertable, innercell, f1, bb.getMajorhead() + "/" + bb.getVoucherno(), bb.getVoucherdate(), bb.getDdocode());

                        cell = new PdfPCell();
                        cell.setColspan(4);
                        cell.setFixedHeight(20);
                        cell.setBorder(Rectangle.NO_BORDER);
                        table.addCell(cell);

                        document.add(table);
                        double billrecovamt = 0;
                        AquitanceDataAGBean agbean = null;
                        for (int j = 0; j < empdatalist.size(); j++) {
                            agbean = (AquitanceDataAGBean) empdatalist.get(j);

                            innercell = new PdfPCell(new Phrase((j + 1) + "", f1));
                            //innercell.setBorder(Rectangle.NO_BORDER);
                            innertable.addCell(innercell);
                            innercell = new PdfPCell(new Phrase(agbean.getEmpname() + "\n" + agbean.getDesg(), f1));
                            //innercell.setBorder(Rectangle.NO_BORDER);
                            innertable.addCell(innercell);
                            innercell = new PdfPCell(new Phrase(agbean.getAdAmt(), f1));
                            billrecovamt = billrecovamt + Double.parseDouble(agbean.getAdAmt());
                            //innercell.setBorder(Rectangle.NO_BORDER);
                            innertable.addCell(innercell);
                            innercell = new PdfPCell(new Phrase(agbean.getGpfNo(), f1));
                            //innercell.setBorder(Rectangle.NO_BORDER);
                            innertable.addCell(innercell);

                            double pTemp = Double.parseDouble(agbean.getAdAmt());
                            pTotAmt = pTotAmt + pTemp;

                            innercell = new PdfPCell(new Phrase(billmonth, f1));
                            //innercell.setBorder(Rectangle.NO_BORDER);
                            innertable.addCell(innercell);
                        }

                        innercell = new PdfPCell(new Phrase(" ", f1));
                        innercell.setBorder(Rectangle.NO_BORDER);
                        innertable.addCell(innercell);
                        innercell = new PdfPCell(new Phrase(" ", f1));
                        innercell.setBorder(Rectangle.NO_BORDER);
                        innertable.addCell(innercell);
                        innercell = new PdfPCell(new Phrase(billrecovamt + "", f1));
                        innercell.setBorder(Rectangle.NO_BORDER);
                        innertable.addCell(innercell);
                        innercell = new PdfPCell(new Phrase(" ", f1));
                        innercell.setBorder(Rectangle.NO_BORDER);
                        innertable.addCell(innercell);
                        innercell = new PdfPCell(new Phrase(" ", f1));
                        innercell.setBorder(Rectangle.NO_BORDER);
                        innertable.addCell(innercell);

                        SelectOption so = new SelectOption();
                        so.setLabel(bb.getVoucherno());
                        so.setValue(pTotAmt + "");
                        vchdataPriList.add(so);

                        pTotAmt = 0;

                        innercell = new PdfPCell();
                        innercell.setColspan(5);
                        innercell.setFixedHeight(20);
                        innercell.setBorder(Rectangle.NO_BORDER);
                        innertable.addCell(innercell);
                    }
                    /*innercell = new PdfPCell();
                     innercell.setColspan(9);
                     innercell.setFixedHeight(20);
                     innercell.setBorder(Rectangle.NO_BORDER);
                     innertable.addCell(innercell);*/
                    if (empdatalist != null && empdatalist.size() > 0) {
                        document.add(innertable);
                    }
                }
            }
            if (empdatalist != null && empdatalist.size() > 0) {
                document.add(table);
                document.newPage();
            }
            if (majorheadPriList != null && majorheadPriList.size() > 0) {

                table = new PdfPTable(2);
                table.setWidths(new int[]{3, 2});
                table.setWidthPercentage(70);

                cell = new PdfPCell(new Phrase("SUMMARY", getDesired_PDF_Font(11, true, true)));
                cell.setColspan(2);
                cell.setBorder(Rectangle.NO_BORDER);
                cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                table.addCell(cell);

                cell = new PdfPCell();
                cell.setColspan(2);
                cell.setBorder(Rectangle.NO_BORDER);
                cell.setFixedHeight(10);
                table.addCell(cell);

                mha = null;
                for (int i = 0; i < majorheadPriList.size(); i++) {
                    mha = (MajorHeadAttribute) majorheadPriList.get(i);

                    cell = new PdfPCell(new Phrase("Major Head:" + StringUtils.repeat(" ", 50) + mha.getMajorhead(), getDesired_PDF_Font(11, true, false)));
                    cell.setColspan(2);
                    cell.setBorder(Rectangle.NO_BORDER);
                    cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                    table.addCell(cell);

                    innertable = new PdfPTable(2);
                    innertable.setWidths(new int[]{1, 1});
                    innertable.setWidthPercentage(70);

                    double tvPTot = 0;

                    for (int j = 0; j < mha.getVchPriList().size(); j++) {
                        SelectOption so = (SelectOption) mha.getVchPriList().get(j);

                        innercell = new PdfPCell(new Phrase(so.getLabel(), f1));
                        innercell.setBorder(Rectangle.NO_BORDER);
                        innercell.setHorizontalAlignment(Element.ALIGN_CENTER);
                        innertable.addCell(innercell);
                        innercell = new PdfPCell(new Phrase(so.getValue(), f1));
                        innercell.setBorder(Rectangle.NO_BORDER);
                        innercell.setHorizontalAlignment(Element.ALIGN_CENTER);
                        innertable.addCell(innercell);

                        double tvPTotTemp = Double.parseDouble(so.getValue());
                        tvPTot = tvPTot + tvPTotTemp;
                    }

                    innercell = new PdfPCell(new Phrase("Total", getDesired_PDF_Font(11, true, false)));
                    innercell.setBorder(Rectangle.NO_BORDER);
                    innercell.setHorizontalAlignment(Element.ALIGN_CENTER);
                    innertable.addCell(innercell);
                    innercell = new PdfPCell(new Phrase(tvPTot + "", getDesired_PDF_Font(11, true, false)));
                    innercell.setBorder(Rectangle.NO_BORDER);
                    innercell.setHorizontalAlignment(Element.ALIGN_CENTER);
                    innertable.addCell(innercell);

                    cell = new PdfPCell(innertable);
                    cell.setColspan(2);
                    cell.setBorder(Rectangle.NO_BORDER);
                    table.addCell(cell);

                    cell = new PdfPCell(new Phrase(StringUtils.repeat("_", 52), f1));
                    cell.setColspan(2);
                    cell.setBorder(Rectangle.NO_BORDER);
                    cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                    table.addCell(cell);
                }
                document.add(table);
            }
            //document.newPage();

            //document.add(table);
        } catch (Exception e) {
            e.printStackTrace();
        } finally {

        }

    }

    private void printGISHeader(PdfPTable table, PdfPCell cell, Font f1, String majorhead, String treasuryCode, String loanName, String nowDedn) {

        try {

            cell = new PdfPCell(new Phrase("MAJOR HEAD", f1));
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            //cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);
            cell = new PdfPCell(new Phrase("TREASURY CODE", f1));
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            //cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);
            cell = new PdfPCell(new Phrase("SUBSCRIPTION TYPE", f1));
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            //cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);
            cell = new PdfPCell();
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase(majorhead, f1));
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            //cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);
            cell = new PdfPCell(new Phrase(treasuryCode, f1));
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            //cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);
            cell = new PdfPCell(new Phrase(loanName, f1));
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            //cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);
            cell = new PdfPCell();
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void printGISSubHeader(PdfPTable table, PdfPCell cell, Font f1, String vchNo, String vchDate, String ddocode) {

        try {
            cell = new PdfPCell(new Phrase("TV No: " + vchNo, f1));
            cell.setColspan(2);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);
            cell = new PdfPCell(new Phrase("TV Date: " + vchDate, f1));
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);
            cell = new PdfPCell(new Phrase("DDO Code: " + ddocode, f1));
            cell.setColspan(2);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("Sl No", f1));
            //cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);
            cell = new PdfPCell(new Phrase("Name and Designation", f1));
            //cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);
            cell = new PdfPCell(new Phrase("Amt Deducted in the Bill", f1));
            //cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);
            cell = new PdfPCell(new Phrase("Loanee Id", f1));
            //cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);
            cell = new PdfPCell(new Phrase("Salary Month", f1));
            //cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private int getCPFGovernmentContribution14Percent(String aqslno, String aqDtlsTbl) {

        Connection con = null;

        PreparedStatement pst = null;
        ResultSet rs = null;

        int cpfgovernmentcontribution = 0;
        try {
            con = this.dataSource.getConnection();

            String sql = "select tot_rec_amt from " + aqDtlsTbl + " where ad_code='CPF' and aqsl_no=?";
            pst = con.prepareStatement(sql);
            pst.setString(1, aqslno);
            rs = pst.executeQuery();
            if (rs.next()) {
                cpfgovernmentcontribution = rs.getInt("tot_rec_amt");
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            DataBaseFunctions.closeSqlObjects(rs, pst);
            DataBaseFunctions.closeSqlObjects(con);
        }
        return cpfgovernmentcontribution;
    }

    @Override
    public ECScheduleForm getECScheduleDetails(String billno) {

        Connection con = null;

        PreparedStatement pst = null;
        ResultSet rs = null;

        ECScheduleForm ecForm = new ECScheduleForm();

        PayrollCommonFunction prcf = new PayrollCommonFunction();

        try {
            con = this.repodataSource.getConnection();

            CommonReportParamBean bean = prcf.getCommonReportParameter(con, billno);
            ecForm.setEcScheduleDtls(getECScheduleEmployeeList(billno, bean.getAqmonth(), bean.getAqyear()));

            ecForm.setDeptName(bean.getDeptname());
            ecForm.setOfficeName(bean.getOfficename());
            ecForm.setDdoDegn(bean.getDdoname());
            ecForm.setBillDesc(bean.getBilldesc());
            ecForm.setMonthYear(prcf.getMonthAndYear(con, billno));
            ecForm.setBillNo(billno);

        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            DataBaseFunctions.closeSqlObjects(rs, pst);
            DataBaseFunctions.closeSqlObjects(con);
        }
        return ecForm;
    }

    private List getECScheduleEmployeeList(String billno, int aqMonth, int aqYear) {

        Connection con = null;

        PreparedStatement pst = null;
        ResultSet rs = null;

        ECScheduleBean ecBean = null;

        ArrayList ecSchldList = new ArrayList();

        String aqDtlsTbl = "";

        try {
            con = this.repodataSource.getConnection();

            aqDtlsTbl = getAqDtlsTableName(billno);

            String sql = "SELECT EMP_QTR_ALLOT.QUARTER_NO,EMP_QTR_ALLOT.ADDRESS,AQ_MAST.EMP_CODE,AQ_MAST.EMP_NAME,AQ_MAST.CUR_DESG,AQ_DTLS.AD_AMT FROM BILL_MAST"
                    + " INNER JOIN AQ_MAST ON BILL_MAST.BILL_NO=AQ_MAST.BILL_NO"
                    + " INNER JOIN " + aqDtlsTbl + " AQ_DTLS ON AQ_MAST.AQSL_NO=AQ_DTLS.AQSL_NO"
                    + " LEFT OUTER JOIN EMP_QTR_ALLOT ON AQ_MAST.EMP_CODE=EMP_QTR_ALLOT.EMP_ID"
                    + " WHERE BILL_MAST.BILL_NO=? AND BILL_MAST.AQ_MONTH=? AND BILL_MAST.AQ_YEAR=?"
                    + " AND AD_CODE='ENEC' AND AD_TYPE='D' AND AD_AMT > 0";
            pst = con.prepareStatement(sql);
            pst.setInt(1, Integer.parseInt(billno));
            pst.setInt(2, aqMonth);
            pst.setInt(3, aqYear);
            rs = pst.executeQuery();
            while (rs.next()) {

                ecBean = new ECScheduleBean();

                ecBean.setRegdNo(rs.getString("QUARTER_NO"));
                ecBean.setNameOfOccupant(rs.getString("EMP_NAME"));
                ecBean.setAddress(rs.getString("ADDRESS"));

                ecBean.setStandardRent(rs.getString("AD_AMT"));
                ecBean.setSurcharge("");
                ecBean.setCurrentAmt(rs.getString("AD_AMT"));
                ecBean.setArrearAmt("");

                ecSchldList.add(ecBean);
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            DataBaseFunctions.closeSqlObjects(rs, pst);
            DataBaseFunctions.closeSqlObjects(con);
        }
        return ecSchldList;
    }

    @Override
    public void ECSchedulePagePDF(CommonReportParamBean crb, Document document, String billNo, ECScheduleForm ecForm, List empList, int aqMonth, int aqYear) {

        int slNo = 0;
        int pageNo = 0;
        int total = 0;

        try {
            Font textFont = new Font(Font.FontFamily.TIMES_ROMAN, 8, Font.NORMAL, BaseColor.BLACK);
            Font hdrTextFont = new Font(Font.FontFamily.TIMES_ROMAN, 9, Font.BOLD, BaseColor.BLACK);

            PdfPTable table = new PdfPTable(9);
            table.setWidths(new float[]{0.6f, 1, 1, 2, 1, 1, 1, 1, 1});
            table.setWidthPercentage(100);

            PdfPCell cell = null;

            if (empList != null && empList.size() > 0) {
                Iterator itr = empList.iterator();
                ECScheduleBean ecbean = null;
                while (itr.hasNext()) {
                    ecbean = (ECScheduleBean) itr.next();
                    slNo++;
                    if (pageNo == 0) {
                        table = new PdfPTable(9);
                        table.setWidths(new float[]{0.6f, 1, 1, 2, 1, 1, 1, 1, 1});
                        table.setWidthPercentage(100);

                        pageNo = pageNo + 1;

                        printECHeader(crb, table, cell, pageNo, hdrTextFont);
                    }
                    cell = new PdfPCell(new Phrase(slNo + "", textFont));
                    table.addCell(cell);

                    cell = new PdfPCell(new Phrase(ecbean.getRegdNo(), textFont));
                    table.addCell(cell);

                    cell = new PdfPCell(new Phrase(ecbean.getAddress(), textFont));
                    table.addCell(cell);

                    cell = new PdfPCell(new Phrase(ecbean.getNameOfOccupant(), textFont));
                    table.addCell(cell);

                    cell = new PdfPCell(new Phrase(ecbean.getStandardRent(), textFont));
                    table.addCell(cell);

                    cell = new PdfPCell(new Phrase("", textFont));
                    table.addCell(cell);

                    cell = new PdfPCell(new Phrase(ecbean.getCurrentAmt(), textFont));
                    table.addCell(cell);

                    cell = new PdfPCell(new Phrase("", textFont));
                    table.addCell(cell);

                    cell = new PdfPCell(new Phrase(ecbean.getCurrentAmt(), textFont));
                    table.addCell(cell);

                    if (ecbean.getCurrentAmt() != null && !ecbean.getCurrentAmt().equals("")) {
                        total = total + Integer.parseInt(ecbean.getCurrentAmt());
                    }

                    if (slNo % 10 == 0) {
                        document.add(table);
                        document.newPage();

                        table = new PdfPTable(9);
                        table.setWidths(new float[]{0.6f, 1, 1, 2, 1, 1, 1, 1, 1});
                        table.setWidthPercentage(100);

                        pageNo = pageNo + 1;
                        printECHeader(crb, table, cell, pageNo, hdrTextFont);
                    }
                    if (slNo == empList.size()) {
                        printECPageFooter(crb, table, cell, total, hdrTextFont);
                        document.add(table);
                    }
                }
            }
            if (empList.size() == 0 || empList == null) {
                printECHeader(crb, table, cell, pageNo, hdrTextFont);
                document.add(table);
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void printECHeader(CommonReportParamBean crb, PdfPTable table, PdfPCell cell, int pageno, Font f1) throws Exception {

        cell = new PdfPCell(new Phrase("Page : " + pageno, f1));
        cell.setColspan(9);
        cell.setBorder(Rectangle.NO_BORDER);
        cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
        table.addCell(cell);

        cell = new PdfPCell();
        cell.setColspan(9);
        cell.setFixedHeight(20);
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase(crb.getOfficename(), f1));
        cell.setColspan(9);
        cell.setBorder(Rectangle.NO_BORDER);
        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(cell);

        cell = new PdfPCell();
        cell.setColspan(9);
        cell.setFixedHeight(20);
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("R/R (E.C.) SCHEDULE FOR THE MONTH OF " + crb.getAqMonthAsName() + "'" + crb.getAqyear(), f1));
        cell.setColspan(9);
        cell.setBorder(Rectangle.NO_BORDER);
        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(cell);

        cell = new PdfPCell();
        cell.setColspan(9);
        cell.setFixedHeight(20);
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("Sl.No.", f1));
        cell.setRowspan(2);
        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(cell);
        cell = new PdfPCell(new Phrase("Regd. No. of\nBuilding", f1));
        cell.setRowspan(2);
        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(cell);
        cell = new PdfPCell(new Phrase("Address of\nBuilding", f1));
        cell.setRowspan(2);
        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(cell);
        cell = new PdfPCell(new Phrase("Name of Accountant", f1));
        cell.setRowspan(2);
        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(cell);
        cell = new PdfPCell(new Phrase("Standard Rent", f1));
        cell.setRowspan(2);
        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(cell);
        cell = new PdfPCell(new Phrase("Surcharge", f1));
        cell.setRowspan(2);
        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(cell);
        cell = new PdfPCell(new Phrase("Amount Deducted", f1));
        cell.setColspan(3);
        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("Current", f1));
        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(cell);
        cell = new PdfPCell(new Phrase("Arrear", f1));
        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(cell);
        cell = new PdfPCell(new Phrase("Total", f1));
        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(cell);
    }

    private void printECPageFooter(CommonReportParamBean crb, PdfPTable dataTable, PdfPCell dataCell, double totAmt, Font f1) throws Exception {

        dataCell = new PdfPCell();
        dataCell.setColspan(9);
        dataCell.setFixedHeight(20);
        dataCell.setBorder(Rectangle.NO_BORDER);
        dataTable.addCell(dataCell);

        dataCell = new PdfPCell(new Phrase("Rupees ( " + Numtowordconvertion.convertNumber((int) totAmt) + ") Only", f1));
        dataCell.setColspan(9);
        dataCell.setBorder(Rectangle.NO_BORDER);
        dataCell.setHorizontalAlignment(Element.ALIGN_RIGHT);
        dataTable.addCell(dataCell);

        dataCell = new PdfPCell();
        dataCell.setColspan(9);
        dataCell.setFixedHeight(20);
        dataCell.setBorder(Rectangle.BOTTOM);
        dataCell.setBorder(Rectangle.NO_BORDER);
        dataTable.addCell(dataCell);

        dataCell = new PdfPCell(new Phrase(crb.getDdoname(), f1));
        dataCell.setColspan(9);
        dataCell.setBorder(Rectangle.NO_BORDER);
        dataCell.setHorizontalAlignment(Element.ALIGN_RIGHT);
        dataTable.addCell(dataCell);
    }

    @Override
    public ReceiptRecoveryScheduleForm getReceiptRecoveryScheduleDetails(String billno) {

        Connection con = null;

        PreparedStatement pst = null;
        ResultSet rs = null;

        ReceiptRecoveryScheduleForm rrForm = new ReceiptRecoveryScheduleForm();

        PayrollCommonFunction prcf = new PayrollCommonFunction();

        try {
            con = this.repodataSource.getConnection();

            CommonReportParamBean bean = prcf.getCommonReportParameter(con, billno);
            rrForm.setRrScheduleDtls(getReceiptRecoveryScheduleEmployeeList(billno, bean.getAqmonth(), bean.getAqyear()));

            rrForm.setDeptName(bean.getDeptname());
            rrForm.setOfficeName(bean.getOfficename());
            rrForm.setDdoDegn(bean.getDdoname());
            rrForm.setBillDesc(bean.getBilldesc());
            rrForm.setMonthYear(prcf.getMonthAndYear(con, billno));
            rrForm.setBillNo(billno);

        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            DataBaseFunctions.closeSqlObjects(rs, pst);
            DataBaseFunctions.closeSqlObjects(con);
        }
        return rrForm;
    }

    @Override
    public void ReceiptRecoverySchedulePDF(CommonReportParamBean crb, Document document, String billNo, ReceiptRecoveryScheduleForm rrForm, List empList, int aqMonth, int aqYear) {

        int slNo = 0;
        int pageNo = 0;
        int total = 0;

        try {
            Font textFont = new Font(Font.FontFamily.TIMES_ROMAN, 8, Font.NORMAL, BaseColor.BLACK);
            Font hdrTextFont = new Font(Font.FontFamily.TIMES_ROMAN, 9, Font.BOLD, BaseColor.BLACK);

            PdfPTable table = new PdfPTable(3);
            table.setWidths(new float[]{1, 2, 1});
            table.setWidthPercentage(100);

            PdfPCell cell = null;

            if (empList != null && empList.size() > 0) {
                Iterator itr = empList.iterator();
                ReceiptRecoveryScheduleBean rrbean = null;
                while (itr.hasNext()) {
                    rrbean = (ReceiptRecoveryScheduleBean) itr.next();
                    slNo++;
                    if (pageNo == 0) {
                        table = new PdfPTable(3);
                        table.setWidths(new float[]{1, 2, 1});
                        table.setWidthPercentage(100);

                        pageNo = pageNo + 1;

                        printRRHeader(crb, table, cell, pageNo, hdrTextFont);
                    }
                    cell = new PdfPCell(new Phrase(slNo + "", textFont));
                    table.addCell(cell);

                    cell = new PdfPCell(new Phrase(rrbean.getEmployeeName() + "\n" + rrbean.getEmployeeDesignation(), textFont));
                    table.addCell(cell);

                    cell = new PdfPCell(new Phrase(rrbean.getAmtdeducted(), textFont));
                    cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
                    table.addCell(cell);

                    if (rrbean.getAmtdeducted() != null && !rrbean.getAmtdeducted().equals("")) {
                        total = total + Integer.parseInt(rrbean.getAmtdeducted());
                    }

                    if (slNo % 10 == 0) {
                        document.add(table);
                        document.newPage();

                        table = new PdfPTable(3);
                        table.setWidths(new float[]{1, 2, 1});
                        table.setWidthPercentage(100);

                        pageNo = pageNo + 1;
                        printRRHeader(crb, table, cell, pageNo, hdrTextFont);
                    }
                    if (slNo == empList.size()) {
                        printRRPageFooter(crb, table, cell, total, hdrTextFont);
                        document.add(table);
                    }
                }
            }
            if (empList.size() == 0 || empList == null) {
                printRRHeader(crb, table, cell, pageNo, hdrTextFont);
                document.add(table);
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void printRRHeader(CommonReportParamBean crb, PdfPTable table, PdfPCell cell, int pageno, Font f1) throws Exception {

        cell = new PdfPCell(new Phrase("Page : " + pageno, f1));
        cell.setColspan(3);
        cell.setBorder(Rectangle.NO_BORDER);
        cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
        table.addCell(cell);

        cell = new PdfPCell();
        cell.setBorder(Rectangle.NO_BORDER);
        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(cell);
        cell = new PdfPCell(new Phrase("SCHEDULE OF RECOVERY OF RECEIPT RECOVERY", f1));
        cell.setBorder(Rectangle.NO_BORDER);
        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(cell);
        cell = new PdfPCell();
        cell.setBorder(Rectangle.NO_BORDER);
        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("FOR THE MONTH OF " + crb.getAqMonthAsName() + "'" + crb.getAqyear(), f1));
        cell.setColspan(3);
        cell.setBorder(Rectangle.NO_BORDER);
        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(cell);

        cell = new PdfPCell();
        cell.setColspan(3);
        cell.setFixedHeight(20);
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("NAME OF DEPARTMENT: " + crb.getDeptname(), f1));
        cell.setColspan(3);
        cell.setBorder(Rectangle.NO_BORDER);
        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("OFFICE CODE: " + crb.getOfficename(), f1));
        cell.setColspan(3);
        cell.setBorder(Rectangle.NO_BORDER);
        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(cell);

        cell = new PdfPCell();
        cell.setColspan(3);
        cell.setFixedHeight(20);
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("DESIGNATION OF DDO: " + crb.getDdoname(), f1));
        cell.setColspan(3);
        cell.setBorder(Rectangle.NO_BORDER);
        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(cell);

        cell = new PdfPCell();
        cell.setColspan(3);
        cell.setFixedHeight(20);
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("NAME OF TREASURY: " + crb.getTreasuryname(), f1));
        cell.setColspan(3);
        cell.setBorder(Rectangle.NO_BORDER);
        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(cell);

        cell = new PdfPCell();
        cell.setColspan(3);
        cell.setFixedHeight(20);
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("Major Head: 20-4700-20-796-2160-49005-000", f1));
        cell.setColspan(2);
        cell.setBorder(Rectangle.NO_BORDER);
        cell.setHorizontalAlignment(Element.ALIGN_LEFT);
        table.addCell(cell);
        cell = new PdfPCell(new Phrase("Bill No: " + crb.getBillNo(), f1));
        cell.setBorder(Rectangle.NO_BORDER);
        cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
        table.addCell(cell);

        cell = new PdfPCell();
        cell.setColspan(3);
        cell.setFixedHeight(20);
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("Sl.No.", f1));
        cell.setRowspan(2);
        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(cell);
        cell = new PdfPCell(new Phrase("Name of Employee/\nDesignation", f1));
        cell.setRowspan(2);
        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(cell);
        cell = new PdfPCell(new Phrase("Amount Current\nDeducted in Bill", f1));
        cell.setRowspan(2);
        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(cell);
    }

    private void printRRPageFooter(CommonReportParamBean crb, PdfPTable dataTable, PdfPCell dataCell, double totAmt, Font f1) throws Exception {

        dataCell = new PdfPCell();
        dataCell.setColspan(3);
        dataCell.setFixedHeight(20);
        dataCell.setBorder(Rectangle.NO_BORDER);
        dataTable.addCell(dataCell);

        dataCell = new PdfPCell(new Phrase("RECOVERY FOR THE MONTH OF " + crb.getAqMonthAsName() + "'" + crb.getAqyear(), f1));
        dataCell.setColspan(2);
        dataCell.setBorder(Rectangle.NO_BORDER);
        dataCell.setHorizontalAlignment(Element.ALIGN_LEFT);
        dataTable.addCell(dataCell);
        dataCell = new PdfPCell(new Phrase(totAmt + "", f1));
        dataCell.setBorder(Rectangle.NO_BORDER);
        dataCell.setHorizontalAlignment(Element.ALIGN_RIGHT);
        dataTable.addCell(dataCell);

        dataCell = new PdfPCell(new Phrase("Rupees ( " + Numtowordconvertion.convertNumber((int) totAmt) + ") Only", f1));
        dataCell.setColspan(3);
        dataCell.setBorder(Rectangle.NO_BORDER);
        dataCell.setHorizontalAlignment(Element.ALIGN_RIGHT);
        dataTable.addCell(dataCell);

        dataCell = new PdfPCell();
        dataCell.setColspan(3);
        dataCell.setFixedHeight(20);
        dataCell.setBorder(Rectangle.BOTTOM);
        dataCell.setBorder(Rectangle.NO_BORDER);
        dataTable.addCell(dataCell);

        dataCell = new PdfPCell(new Phrase("Signature of DDO", f1));
        dataCell.setColspan(3);
        dataCell.setBorder(Rectangle.NO_BORDER);
        dataCell.setHorizontalAlignment(Element.ALIGN_RIGHT);
        dataTable.addCell(dataCell);
    }

    private List getReceiptRecoveryScheduleEmployeeList(String billno, int aqMonth, int aqYear) {

        Connection con = null;

        PreparedStatement pst = null;
        ResultSet rs = null;

        ReceiptRecoveryScheduleBean rrBean = null;

        ArrayList rrSchldList = new ArrayList();

        String aqDtlsTbl = "";

        try {
            con = this.repodataSource.getConnection();

            aqDtlsTbl = getAqDtlsTableName(billno);

            String sql = "SELECT AQ_MAST.EMP_CODE,AQ_MAST.EMP_NAME,AQ_MAST.CUR_DESG,AQ_DTLS.AD_AMT FROM BILL_MAST"
                    + " INNER JOIN AQ_MAST ON BILL_MAST.BILL_NO=AQ_MAST.BILL_NO"
                    + " INNER JOIN " + aqDtlsTbl + " AQ_DTLS ON AQ_MAST.AQSL_NO=AQ_DTLS.AQSL_NO"
                    + " WHERE BILL_MAST.BILL_NO=? AND BILL_MAST.AQ_MONTH=? AND BILL_MAST.AQ_YEAR=?"
                    + " AND AD_CODE='RRPD' AND AD_TYPE='D' AND AD_AMT > 0";
            pst = con.prepareStatement(sql);
            pst.setInt(1, Integer.parseInt(billno));
            pst.setInt(2, aqMonth);
            pst.setInt(3, aqYear);
            rs = pst.executeQuery();
            while (rs.next()) {
                rrBean = new ReceiptRecoveryScheduleBean();
                rrBean.setEmployeeName(rs.getString("EMP_NAME"));
                rrBean.setEmployeeDesignation(rs.getString("CUR_DESG"));
                rrBean.setAmtdeducted(rs.getString("AD_AMT"));
                rrSchldList.add(rrBean);
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            DataBaseFunctions.closeSqlObjects(rs, pst);
            DataBaseFunctions.closeSqlObjects(con);
        }
        return rrSchldList;
    }

    @Override
    public void gpfSchedulePdf(PdfWriter writer, Document document, String billNo, List gpfTypeList, List gpfAbstractList, CommonReportParamBean crb,
            String totFig, double totAmt, GPFScheduleBean gpfHeader) {
        Connection con = null;
        PreparedStatement ps = null;
        ResultSet rs = null;
        ArrayList empList = new ArrayList();
        // int releaseTot = 0;
        //String releaseTotFig = null;

        try {
            con = this.dataSource.getConnection();

            PdfPTable dTable = new PdfPTable(8);
            PdfPCell dCell = null;
            dTable.setWidths(new int[]{1, 3, 5, 3, 2, 2, 2, 3});
            dTable.setWidthPercentage(100);
            // Creating a PdfCanvas object 
            PdfContentByte canvas = writer.getDirectContent();

            //PdfPage pdfPage = pdfDoc.addNewPage();   
            Font f1 = new Font();
            f1.setSize(6.9f);
            f1.setFamily("Times New Roman");

            Font f2 = new Font();
            f2.setSize(9.1f);
            f2.setFamily("Times New Roman");
            String[] monthNames = {"JANUARY", "FEBRUARY", "MARCH", "APRIL", "MAY", "JUNE", "JULY", "AUGUST", "SEPTEMBER", "OCTOBER", "NOVEMBER", "DECEMBER"};

            Font bold = new Font(Font.FontFamily.HELVETICA, 15, Font.BOLD);
            Font bold1 = new Font(Font.FontFamily.TIMES_ROMAN, 7, Font.BOLD);

            //dataTable1.setWidths(new int[]{1, 3, 5, 3, 2, 2, 2, 3});
            //dataTable1.setWidthPercentage(100);
            if (gpfTypeList != null && gpfTypeList.size() > 0) {
                PdfPTable dataTable = new PdfPTable(8);
                PdfPCell dataCell = null;

                dataTable.setWidths(new int[]{1, 3, 5, 3, 3, 2, 2, 3});
                dataTable.setWidthPercentage(100);

                ScheduleHelper scHelperBean = null;
                for (int i = 0; i < gpfTypeList.size(); i++) {
                    scHelperBean = (ScheduleHelper) gpfTypeList.get(i);
                    //reportGpfSchedulePageHeaderPdf(document, billNo, dataTable, dataCell, scHelperBean.getGpfType(), f1, f2, crb);

                    Paragraph p1 = new Paragraph("GENERAL PROVIDENT FUND", bold);
                    Paragraph p2 = new Paragraph("BILL NO: " + crb.getBilldesc(), new Font(Font.FontFamily.TIMES_ROMAN, 9.8f, Font.BOLD));
                    Paragraph p3 = new Paragraph("T.V No / Date: / " + crb.getVchNo() + "/" + crb.getVchDate(), new Font(Font.FontFamily.TIMES_ROMAN, 9.8f, Font.BOLD));
                    Paragraph p4 = new Paragraph("SCHEDULE OF : " + scHelperBean.getGpfType(), new Font(Font.FontFamily.TIMES_ROMAN, 9.8f, Font.BOLD));
                    Paragraph p5 = new Paragraph("Demand No-" + "'" + "8009" + "/_____________________- State/Centre G.P.F Withdrawals\' (Strike out which is not applicable)", f2);
                    Paragraph p6 = new Paragraph("1. Arrange the A/C Nos in serial order. Accounts Nos may be written very clearly.Separate Schedules should be prepared for each group.\n"
                            + "2. The names of the subscribers should be written in full.\n"
                            + "3. If interest is paid on advance, mention it in remarks column.\n"
                            + "4. Figures in columns 3,4,5 and 7 should be rounded to whole rupees.\n"
                            + "5. Use similar form, if names are few. But do not write subscribers name and account numbers very close to each other.\n"
                            + "6. The total of schedules also should be written both in figures and words.\n"
                            + "7. This form should not be used for transactions of General Provident Fund for which form No. O.T.C. 76 has been provided.\n"
                            + "8. In Col. 1 quote account number unfailingly. The guide letters e.g. I.C.S. (ICS Provident Fund) etc. should be invariably prefixed to Account Nos.\n"
                            + "9. In the remarks column write description against every new name such as 'New Subscriber' came on transfer from Office District resumed subscription.\n"
                            + "10. Separate schedule should be prepared in respect of persons whose account are kept by different Accountant General.", f1);
                    p1.setAlignment(Element.ALIGN_CENTER);
                    p2.setAlignment(Element.ALIGN_CENTER);
                    p3.setAlignment(Element.ALIGN_CENTER);
                    p4.setAlignment(Element.ALIGN_CENTER);
                    p5.setAlignment(Element.ALIGN_CENTER);

                    p6.setSpacingAfter(20);
                    p6.setSpacingBefore(15);
                    p6.setAlignment(Element.ALIGN_LEFT);
                    p6.setIndentationLeft(8);
                    p6.setIndentationRight(8);

                    Paragraph p7 = new Paragraph(crb.getOfficename(), bold1);
                    p7.setAlignment(Element.ALIGN_CENTER);
                    Paragraph p8 = new Paragraph("DEDUCTION MADE FROM THE SALARY FOR " + monthNames[crb.getAqmonth()] + " " + crb.getAqyear(), bold1);
                    p8.setAlignment(Element.ALIGN_CENTER);
                    p8.setSpacingAfter(15);

                    document.add(p1);
                    document.add(p2);
                    document.add(p3);
                    document.add(p4);
                    document.add(p5);
                    document.add(p6);
                    document.add(p7);
                    document.add(p8);

                    dataTable = new PdfPTable(8);

                    dataTable.setWidths(new int[]{1, 3, 5, 3, 3, 2, 2, 3});
                    dataTable.setWidthPercentage(100);
                    //Table Header
                    //System.out.println("Table Header");
                    dataCell = new PdfPCell(new Phrase("Sl No.", new Font(Font.FontFamily.HELVETICA, 7.2f, Font.BOLD)));
                    dataCell.setBorderWidth(0.5f);
                    dataTable.addCell(dataCell);
                    dataCell = new PdfPCell(new Phrase("ACCOUNT NO./\n"
                            + "DATE OF ENTRY\n"
                            + "INTO GOVT. SERVICE", new Font(Font.FontFamily.HELVETICA, 7.2f, Font.BOLD)));
                    dataCell.setBorderWidth(0.5f);
                    dataTable.addCell(dataCell);

                    dataCell = new PdfPCell(new Phrase("NAME OF THE SUBSCRIBER/\n"
                            + "DESIGNATION", new Font(Font.FontFamily.HELVETICA, 7.2f, Font.BOLD)));
                    dataCell.setBorderWidth(0.5f);
                    dataTable.addCell(dataCell);

                    dataCell = new PdfPCell(new Phrase("BASIC PAY/ "
                            + "GRADE PAY / "
                            + "SCALE OF PAY", new Font(Font.FontFamily.HELVETICA, 7.2f, Font.BOLD)));
                    dataCell.setBorderWidth(0.5f);
                    dataTable.addCell(dataCell);

                    dataCell = new PdfPCell(new Phrase("MONTHLY SUBSCRIPTION", new Font(Font.FontFamily.HELVETICA, 7.2f, Font.BOLD)));
                    dataCell.setBorderWidth(0.5f);
                    dataTable.addCell(dataCell);

                    dataCell = new PdfPCell(new Phrase("REFUND OF "
                            + "WITHDRAWLS AMT / "
                            + "NO. OF INST.", new Font(Font.FontFamily.HELVETICA, 7.2f, Font.BOLD)));
                    dataCell.setBorderWidth(0.5f);
                    dataTable.addCell(dataCell);

                    dataCell = new PdfPCell(new Phrase("TOTAL RELEASED", new Font(Font.FontFamily.HELVETICA, 7.2f, Font.BOLD)));
                    dataCell.setBorderWidth(0.5f);
                    dataTable.addCell(dataCell);

                    dataCell = new PdfPCell(new Phrase("REMARKS\n"
                            + "D.O.B and D.O.R.", new Font(Font.FontFamily.HELVETICA, 7.2f, Font.BOLD)));
                    dataCell.setBorderWidth(0.5f);
                    dataTable.addCell(dataCell);

                    dataCell = new PdfPCell(new Phrase("1", new Font(Font.FontFamily.TIMES_ROMAN, 7, Font.BOLD)));
                    dataCell.setBorder(Rectangle.NO_BORDER);
                    dataCell.setHorizontalAlignment(Element.ALIGN_CENTER);
                    dataTable.addCell(dataCell);
                    dataCell = new PdfPCell(new Phrase("2", new Font(Font.FontFamily.TIMES_ROMAN, 7, Font.BOLD)));
                    dataCell.setBorder(Rectangle.NO_BORDER);
                    dataCell.setHorizontalAlignment(Element.ALIGN_CENTER);
                    dataTable.addCell(dataCell);
                    dataCell = new PdfPCell(new Phrase("3", new Font(Font.FontFamily.TIMES_ROMAN, 7, Font.BOLD)));
                    dataCell.setBorder(Rectangle.NO_BORDER);
                    dataCell.setHorizontalAlignment(Element.ALIGN_CENTER);
                    dataTable.addCell(dataCell);
                    dataCell = new PdfPCell(new Phrase("4", new Font(Font.FontFamily.TIMES_ROMAN, 7, Font.BOLD)));
                    dataCell.setBorder(Rectangle.NO_BORDER);
                    dataCell.setHorizontalAlignment(Element.ALIGN_CENTER);
                    dataTable.addCell(dataCell);
                    dataCell = new PdfPCell(new Phrase("5", new Font(Font.FontFamily.TIMES_ROMAN, 7, Font.BOLD)));
                    dataCell.setBorder(Rectangle.NO_BORDER);
                    dataCell.setHorizontalAlignment(Element.ALIGN_CENTER);
                    dataTable.addCell(dataCell);
                    dataCell = new PdfPCell(new Phrase("6", new Font(Font.FontFamily.TIMES_ROMAN, 7, Font.BOLD)));
                    dataCell.setBorder(Rectangle.NO_BORDER);
                    dataCell.setHorizontalAlignment(Element.ALIGN_CENTER);
                    dataTable.addCell(dataCell);
                    dataCell = new PdfPCell(new Phrase("7", new Font(Font.FontFamily.TIMES_ROMAN, 7, Font.BOLD)));
                    dataCell.setBorder(Rectangle.NO_BORDER);
                    dataCell.setHorizontalAlignment(Element.ALIGN_CENTER);
                    dataTable.addCell(dataCell);
                    dataCell = new PdfPCell(new Phrase("8", new Font(Font.FontFamily.TIMES_ROMAN, 7, Font.BOLD)));
                    dataCell.setBorder(Rectangle.NO_BORDER);
                    dataCell.setHorizontalAlignment(Element.ALIGN_CENTER);
                    dataTable.addCell(dataCell);

                    canvas.closePathStroke();

                    empList = scHelperBean.getHelperList();

                    if (empList != null && empList.size() > 0) {
                        GPFScheduleBean gpfBean = null;
                        int releaseTot = 0;
                        String releaseTotFig = null;
                        for (int j = 0; j < empList.size(); j++) {
                            gpfBean = (GPFScheduleBean) empList.get(j);

                            dataCell = new PdfPCell(new Phrase(Integer.toString(j + 1), new Font(Font.FontFamily.HELVETICA, 6)));
                            //dataCell.setBorder(Rectangle.NO_BORDER);
                            dataCell.setBorder(Rectangle.BOTTOM | Rectangle.TOP);
                            dataCell.setHorizontalAlignment(Element.ALIGN_CENTER);
                            dataTable.addCell(dataCell);
                            dataCell = new PdfPCell(new Phrase(gpfBean.getAccountNo() + " \n " + gpfBean.getDateOfEntry(), new Font(Font.FontFamily.HELVETICA, 6.9f)));
                            dataCell.setBorder(Rectangle.BOTTOM | Rectangle.TOP);
                            dataCell.setHorizontalAlignment(Element.ALIGN_CENTER);
                            dataTable.addCell(dataCell);
                            dataCell = new PdfPCell(new Phrase(gpfBean.getEmpName() + " \n " + gpfBean.getDesignation(), new Font(Font.FontFamily.HELVETICA, 6.9f)));
                            dataCell.setBorder(Rectangle.BOTTOM | Rectangle.TOP);
                            dataCell.setHorizontalAlignment(Element.ALIGN_CENTER);
                            dataTable.addCell(dataCell);
                            dataCell = new PdfPCell(new Phrase(gpfBean.getBasicPay() + " \n " + gpfBean.getGradePay() + " \n " + gpfBean.getScaleOfPay(), new Font(Font.FontFamily.HELVETICA, 6.9f)));
                            dataCell.setBorder(Rectangle.BOTTOM | Rectangle.TOP);
                            dataCell.setHorizontalAlignment(Element.ALIGN_CENTER);
                            dataTable.addCell(dataCell);
                            dataCell = new PdfPCell(new Phrase(Integer.toString(gpfBean.getMonthlySub()), new Font(Font.FontFamily.HELVETICA, 6.9f)));
                            dataCell.setBorder(Rectangle.BOTTOM | Rectangle.TOP);
                            dataCell.setHorizontalAlignment(Element.ALIGN_CENTER);
                            dataTable.addCell(dataCell);
                            if (gpfBean.getNoOfInstalment() != null && !gpfBean.getNoOfInstalment().equals("")) {
                                dataCell = new PdfPCell(new Phrase(gpfBean.getTowardsLoan() + "(" + gpfBean.getNoOfInstalment() + ")", new Font(Font.FontFamily.HELVETICA, 6.9f)));
                                dataCell.setBorder(Rectangle.BOTTOM | Rectangle.TOP);
                                dataCell.setHorizontalAlignment(Element.ALIGN_CENTER);
                                dataTable.addCell(dataCell);
                            } else {
                                dataCell = new PdfPCell(new Phrase(gpfBean.getTowardsLoan() + " \n " + gpfBean.getNoOfInstalment(), new Font(Font.FontFamily.HELVETICA, 6.9f)));
                                dataCell.setBorder(Rectangle.BOTTOM | Rectangle.TOP);
                                dataCell.setHorizontalAlignment(Element.ALIGN_CENTER);
                                dataTable.addCell(dataCell);
                            }
                            dataCell = new PdfPCell(new Phrase(Integer.toString(gpfBean.getTotalReleased()), new Font(Font.FontFamily.HELVETICA, 6.9f)));
                            dataCell.setBorder(Rectangle.BOTTOM | Rectangle.TOP);
                            dataCell.setHorizontalAlignment(Element.ALIGN_CENTER);
                            dataTable.addCell(dataCell);
                            dataCell = new PdfPCell(new Phrase(gpfBean.getDob() + " \n " + gpfBean.getDor(), new Font(Font.FontFamily.HELVETICA, 6.9f)));
                            dataCell.setBorder(Rectangle.BOTTOM | Rectangle.TOP);
                            dataCell.setHorizontalAlignment(Element.ALIGN_CENTER);
                            dataTable.addCell(dataCell);

                            releaseTot = releaseTot + gpfBean.getTotalReleased();
                            releaseTotFig = Numtowordconvertion.convertNumber((int) gpfBean.getTotalReleased());

                            //reportGpfSchedulePageHeaderPdf(document, billNo, dataTable, dataCell, scHelperBean.getGpfType(), f1, f2, crb);
                        }

                        dataCell = new PdfPCell(new Phrase(""));
                        dataCell.setColspan(5);
                        dataCell.setBorder(Rectangle.BOTTOM | Rectangle.TOP);
                        dataTable.addCell(dataCell);
                        dataCell = new PdfPCell(new Phrase("Total :" + releaseTot, new Font(Font.FontFamily.HELVETICA, 7.5f)));
                        dataCell.setBorder(Rectangle.BOTTOM | Rectangle.TOP);
                        dataCell.setHorizontalAlignment(Element.ALIGN_CENTER);
                        dataCell.setColspan(3);
                        dataTable.addCell(dataCell);

                        dataCell = new PdfPCell(new Phrase(""));
                        dataCell.setColspan(5);
                        dataCell.setBorder(Rectangle.NO_BORDER);
                        dataTable.addCell(dataCell);
                        dataCell = new PdfPCell(new Phrase("(RUPEES " + releaseTotFig + ") ONLY", new Font(Font.FontFamily.HELVETICA, 7.5f)));
                        dataCell.setColspan(3);
                        dataCell.setBorder(Rectangle.NO_BORDER);
                        dataCell.setHorizontalAlignment(Element.ALIGN_CENTER);
                        dataTable.addCell(dataCell);

                        PdfPCell blankRow = new PdfPCell(new Phrase(""));
                        blankRow.setFixedHeight(15f);
                        blankRow.setColspan(8);
                        blankRow.setBorder(Rectangle.NO_BORDER);
                        dataTable.addCell(blankRow);

                        dataCell = new PdfPCell(new Phrase(""));
                        dataCell.setColspan(5);
                        dataCell.setBorder(Rectangle.NO_BORDER);
                        dataTable.addCell(dataCell);
                        dataCell = new PdfPCell(new Phrase("Signature of the D.D.O. with Seal\n\n"
                                + gpfHeader.getDdoDesg() + " , " + gpfHeader.getOfficeName() + "\n\n"
                                + "Date: ", new Font(Font.FontFamily.HELVETICA, 7.5f)));
                        dataCell.setBorder(Rectangle.NO_BORDER);
                        dataCell.setColspan(3);
                        dataCell.setHorizontalAlignment(Element.ALIGN_CENTER);
                        dataTable.addCell(dataCell);

                    }

                    document.add(dataTable);

                    Paragraph p10 = new Paragraph("Certified that all particulars of recovery have been correctly furnished as per the instruction issued in respect of preparation of G.P.F. Schedules.\n"
                            + "Voucher No.................................... ", new Font(Font.FontFamily.HELVETICA, 6.5f));
                    p10.setAlignment(Element.ALIGN_LEFT);
                    p10.setSpacingAfter(20);
                    p10.setSpacingBefore(30);
                    p10.setTabSettings(new TabSettings(400f));
                    p10.add(Chunk.TABBING);
                    p10.add(new Chunk("Date of Encashment:// "));

                    Paragraph p11 = new Paragraph("FOR USE IN AUDIT OFFICE", new Font(Font.FontFamily.TIMES_ROMAN, 9f, Font.BOLD));
                    p11.setAlignment(Element.ALIGN_CENTER);

                    Paragraph p12 = new Paragraph("Certified that the name and account No. of individual deduction and total shown in column - 6 have been checked with ref. to the bill vide page 224 of the Audit Manual.\n"
                            + "Certified that the rates of pay shown in column - 4 have been verified with amount drawn in this bill.", new Font(Font.FontFamily.HELVETICA, 7f));
                    p12.setAlignment(Element.ALIGN_LEFT);
                    p12.setSpacingAfter(3);
                    p12.setSpacingBefore(15);
                    p12.setTabSettings(new TabSettings(450f));
                    p12.add(Chunk.TABBING);
                    p12.add(new Chunk("AUDITOR", new Font(Font.FontFamily.TIMES_ROMAN, 7f, Font.BOLD)));

                    //document.add(p9);
                    document.add(p10);
                    document.add(p11);
                    document.add(p12);

                    //document.add(dataTable);
                    document.newPage();

                }

                ///------------------------------------------------GPF ABSTRACT----------------------------------------------
                Paragraph p13 = new Paragraph("GPF ABSTRACT", new Font(Font.FontFamily.TIMES_ROMAN, 13.5f, Font.BOLD));
                Paragraph p14 = new Paragraph("BILL NO: " + crb.getBilldesc(), new Font(Font.FontFamily.TIMES_ROMAN, 10.5f, Font.BOLD));
                Paragraph p15 = new Paragraph("T.V No / Date: / " + crb.getVchNo() + "/" + crb.getVchDate(), new Font(Font.FontFamily.TIMES_ROMAN, 10.5f, Font.BOLD));
                p13.setAlignment(Element.ALIGN_CENTER);
                p14.setAlignment(Element.ALIGN_CENTER);
                p15.setAlignment(Element.ALIGN_CENTER);
                p15.setSpacingAfter(15);

                document.add(p13);
                document.add(p14);
                document.add(p15);

                PdfPTable dataTable1 = new PdfPTable(2);
                PdfPCell dataCell1 = null;

                dataTable1.setWidths(new int[]{5, 5});
                dataTable1.setWidthPercentage(100);
                dataTable1.setTotalWidth(500);

                dataCell1 = new PdfPCell(new Phrase("PF CODE", new Font(Font.FontFamily.HELVETICA, 10.5f, Font.BOLD)));
                dataCell1.setBorderWidth(0.5f);
                dataCell1.setHorizontalAlignment(Element.ALIGN_CENTER);
                dataCell1.setFixedHeight(20f);
                dataTable1.addCell(dataCell1);
                dataCell1 = new PdfPCell(new Phrase("TOTAL AMOUNT", new Font(Font.FontFamily.HELVETICA, 10.5f, Font.BOLD)));
                dataCell1.setBorderWidth(0.5f);
                dataCell1.setHorizontalAlignment(Element.ALIGN_CENTER);
                dataCell1.setFixedHeight(20f);
                dataTable1.addCell(dataCell1);

                if (gpfAbstractList != null && gpfAbstractList.size() > 0) {
                    GPFScheduleBean gpfBean = null;
                    for (int k = 0; k < gpfAbstractList.size(); k++) {
                        gpfBean = (GPFScheduleBean) gpfAbstractList.get(k);

                        dataCell1 = new PdfPCell(new Phrase(gpfBean.getGpfType(), new Font(Font.FontFamily.HELVETICA, 9.2f)));
                        dataCell1.setBorderWidth(0.5f);
                        dataCell1.setVerticalAlignment(Element.ALIGN_MIDDLE);
                        dataCell1.setHorizontalAlignment(Element.ALIGN_CENTER);
                        dataCell1.setFixedHeight(20f);
                        dataTable1.addCell(dataCell1);
                        dataCell1 = new PdfPCell(new Phrase(gpfBean.getTotalAmount(), new Font(Font.FontFamily.HELVETICA, 9.2f)));
                        dataCell1.setBorderWidth(0.5f);
                        dataCell1.setVerticalAlignment(Element.ALIGN_MIDDLE);
                        dataCell1.setHorizontalAlignment(Element.ALIGN_CENTER);
                        dataCell1.setFixedHeight(20f);
                        dataTable1.addCell(dataCell1);
                    }
                    dataCell1 = new PdfPCell(new Phrase(""));
                    dataCell1.setColspan(1);
                    dataCell1.setBorder(Rectangle.BOTTOM | Rectangle.TOP);
                    dataTable1.addCell(dataCell1);
                    dataCell1 = new PdfPCell(new Phrase("Total : " + totAmt, new Font(Font.FontFamily.HELVETICA, 9.8f, Font.BOLD)));
                    dataCell1.setFixedHeight(20f);
                    dataCell1.setBorder(Rectangle.BOTTOM | Rectangle.TOP);
                    dataCell1.setHorizontalAlignment(Element.ALIGN_CENTER);

                    dataTable1.addCell(dataCell1);

                    dataCell1 = new PdfPCell(new Phrase(""));
                    dataCell1.setColspan(1);
                    dataCell1.setBorder(Rectangle.NO_BORDER);
                    dataTable1.addCell(dataCell1);
                    dataCell1 = new PdfPCell(new Phrase("(RUPEES " + totFig + ")ONLY", new Font(Font.FontFamily.HELVETICA, 9.2f)));
                    dataCell1.setBorder(Rectangle.NO_BORDER);
                    dataCell1.setHorizontalAlignment(Element.ALIGN_CENTER);
                    dataTable1.addCell(dataCell1);

                    PdfPCell blankRow = new PdfPCell(new Phrase(""));
                    blankRow.setFixedHeight(20f);
                    blankRow.setColspan(2);
                    blankRow.setBorder(Rectangle.NO_BORDER);
                    dataTable1.addCell(blankRow);

                    dataCell1 = new PdfPCell(new Phrase(""));
                    dataCell1.setColspan(1);
                    dataCell1.setBorder(Rectangle.NO_BORDER);
                    dataTable1.addCell(dataCell1);
                    dataCell1 = new PdfPCell(new Phrase("Signature of the D.D.O. with Seal\n\n"
                            + gpfHeader.getDdoDesg() + " , " + gpfHeader.getOfficeName() + "\n\n"
                            + "Date: ", new Font(Font.FontFamily.HELVETICA, 8.5f)));
                    dataCell1.setBorder(Rectangle.NO_BORDER);
                    dataCell1.setHorizontalAlignment(Element.ALIGN_CENTER);
                    dataTable1.addCell(dataCell1);

                }

                document.add(dataTable1);

                Paragraph p20 = new Paragraph(" ");
                p20.setSpacingAfter(15);
                p20.setSpacingBefore(35);

                Paragraph p17 = new Paragraph("Certified that all particulars of recovery have been correctly furnished as per the instruction issued in respect of preparation of G.P.F. Schedules.\n"
                        + "Voucher No.................................... ", new Font(Font.FontFamily.HELVETICA, 7));
                p17.setAlignment(Element.ALIGN_LEFT);
                //p17.setSpacingAfter(10);
                p17.setSpacingBefore(20);
                p17.setTabSettings(new TabSettings(400f));
                p17.add(Chunk.TABBING);
                p17.add(new Chunk("Date of Encashment:// "));

                Paragraph p18 = new Paragraph("FOR USE IN AUDIT OFFICE", new Font(Font.FontFamily.TIMES_ROMAN, 7.5f, Font.BOLD));
                p18.setAlignment(Element.ALIGN_CENTER);

                Paragraph p19 = new Paragraph("Certified that the name and account No. of individual deduction and total shown in column - 6 have been checked with ref. to the bill vide page 224 of the Audit Manual.\n"
                        + "Certified that the rates of pay shown in column - 4 have been verified with amount drawn in this bill.", new Font(Font.FontFamily.HELVETICA, 7));
                p19.setAlignment(Element.ALIGN_LEFT);
                p19.setSpacingAfter(3);
                p19.setSpacingBefore(15);
                p19.setTabSettings(new TabSettings(450f));
                p19.add(Chunk.TABBING);
                p19.add(new Chunk("AUDITOR", new Font(Font.FontFamily.TIMES_ROMAN, 7.5f, Font.BOLD)));

                document.add(p17);
                document.add(p18);
                document.add(p19);
                document.add(p20);

            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void reportGpfSchedulePageHeaderPdf(Document document, String billNo, PdfPTable dataTable, PdfPCell dataCell, String GpfType, Font f1, Font f2, CommonReportParamBean crb) {

        try {

            dataCell = new PdfPCell(new Phrase("Sl No.", new Font(Font.FontFamily.HELVETICA, 6.5f, Font.BOLD)));
            dataCell.setBorderWidth(0.5f);
            dataTable.addCell(dataCell);
            dataCell = new PdfPCell(new Phrase("ACCOUNT NO./\n"
                    + "DATE OF ENTRY\n"
                    + "INTO GOVT. SERVICE", new Font(Font.FontFamily.HELVETICA, 6.5f, Font.BOLD)));
            dataCell.setBorderWidth(0.5f);
            dataTable.addCell(dataCell);

            dataCell = new PdfPCell(new Phrase("NAME OF THE SUBSCRIBER/\n"
                    + "DESIGNATION", new Font(Font.FontFamily.HELVETICA, 6.5f, Font.BOLD)));
            dataCell.setBorderWidth(0.5f);
            dataTable.addCell(dataCell);

            dataCell = new PdfPCell(new Phrase("BASIC PAY/ "
                    + "GRADE PAY / "
                    + "SCALE OF PAY", new Font(Font.FontFamily.HELVETICA, 6.5f, Font.BOLD)));
            dataCell.setBorderWidth(0.5f);
            dataTable.addCell(dataCell);

            dataCell = new PdfPCell(new Phrase("MONTHLY SUBSCRIPTION", new Font(Font.FontFamily.HELVETICA, 6.5f, Font.BOLD)));
            dataCell.setBorderWidth(0.5f);
            dataTable.addCell(dataCell);

            dataCell = new PdfPCell(new Phrase("REFUND OF "
                    + "WITHDRAWLS AMT / "
                    + "NO. OF INST.", new Font(Font.FontFamily.HELVETICA, 6.5f, Font.BOLD)));
            dataCell.setBorderWidth(0.5f);
            dataTable.addCell(dataCell);

            dataCell = new PdfPCell(new Phrase("TOTAL RELEASED", new Font(Font.FontFamily.HELVETICA, 6.5f, Font.BOLD)));
            dataCell.setBorderWidth(0.5f);
            dataTable.addCell(dataCell);

            dataCell = new PdfPCell(new Phrase("REMARKS\n"
                    + "D.O.B and D.O.R.", new Font(Font.FontFamily.HELVETICA, 6.5f, Font.BOLD)));
            dataCell.setBorderWidth(0.5f);
            dataTable.addCell(dataCell);

            dataCell = new PdfPCell(new Phrase("1", new Font(Font.FontFamily.TIMES_ROMAN, 7, Font.BOLD)));
            dataCell.setBorder(Rectangle.NO_BORDER);
            dataCell.setHorizontalAlignment(Element.ALIGN_CENTER);
            dataTable.addCell(dataCell);
            dataCell = new PdfPCell(new Phrase("2", new Font(Font.FontFamily.TIMES_ROMAN, 7, Font.BOLD)));
            dataCell.setBorder(Rectangle.NO_BORDER);
            dataCell.setHorizontalAlignment(Element.ALIGN_CENTER);
            dataTable.addCell(dataCell);
            dataCell = new PdfPCell(new Phrase("3", new Font(Font.FontFamily.TIMES_ROMAN, 7, Font.BOLD)));
            dataCell.setBorder(Rectangle.NO_BORDER);
            dataCell.setHorizontalAlignment(Element.ALIGN_CENTER);
            dataTable.addCell(dataCell);
            dataCell = new PdfPCell(new Phrase("4", new Font(Font.FontFamily.TIMES_ROMAN, 7, Font.BOLD)));
            dataCell.setBorder(Rectangle.NO_BORDER);
            dataCell.setHorizontalAlignment(Element.ALIGN_CENTER);
            dataTable.addCell(dataCell);
            dataCell = new PdfPCell(new Phrase("5", new Font(Font.FontFamily.TIMES_ROMAN, 7, Font.BOLD)));
            dataCell.setBorder(Rectangle.NO_BORDER);
            dataCell.setHorizontalAlignment(Element.ALIGN_CENTER);
            dataTable.addCell(dataCell);
            dataCell = new PdfPCell(new Phrase("6", new Font(Font.FontFamily.TIMES_ROMAN, 7, Font.BOLD)));
            dataCell.setBorder(Rectangle.NO_BORDER);
            dataCell.setHorizontalAlignment(Element.ALIGN_CENTER);
            dataTable.addCell(dataCell);
            dataCell = new PdfPCell(new Phrase("7", new Font(Font.FontFamily.TIMES_ROMAN, 7, Font.BOLD)));
            dataCell.setBorder(Rectangle.NO_BORDER);
            dataCell.setHorizontalAlignment(Element.ALIGN_CENTER);
            dataTable.addCell(dataCell);
            dataCell = new PdfPCell(new Phrase("8", new Font(Font.FontFamily.TIMES_ROMAN, 7, Font.BOLD)));
            dataCell.setBorder(Rectangle.NO_BORDER);
            dataCell.setHorizontalAlignment(Element.ALIGN_CENTER);
            dataTable.addCell(dataCell);

            //document.add(dataTable);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    @Override
    public void computerTokenSchedulePdf(PdfWriter writer, Document document, String billNo, ComputerTokenReportBean tokenBean) {
        Connection con = null;
        PreparedStatement ps = null;
        ResultSet rs = null;
        String planOrNonPlan = null;
        String chargedVoted = null;
        String sector = null;
        String refNo = null;
        try {
            Font f1 = new Font();
            f1.setSize(6.9f);
            f1.setFamily("Times New Roman");

            Font bold = new Font(Font.FontFamily.HELVETICA, 13, Font.BOLD);
            Font bold1 = new Font(Font.FontFamily.TIMES_ROMAN, 7, Font.BOLD);
            Font bold2 = new Font(Font.FontFamily.TIMES_ROMAN, 9, Font.BOLD);
            Font bold3 = new Font(Font.FontFamily.TIMES_ROMAN, 9);

            Font f2 = new Font();
            f2.setSize(9.1f);
            f2.setFamily("Times New Roman");

            Paragraph p1 = new Paragraph("COMPUTER TOKEN", bold);
            p1.setAlignment(Element.ALIGN_CENTER);
            p1.setSpacingBefore(15f);
            p1.setSpacingAfter(15f);
            Paragraph p2 = new Paragraph("Treasury Name: " + tokenBean.getTreasuryName(), bold2);
            p2.setAlignment(Element.ALIGN_LEFT);
            p2.setSpacingAfter(3f);
            if (tokenBean.getBenRefNo() != null && !tokenBean.getBenRefNo().equals("")) {
                refNo = tokenBean.getBenRefNo();

            } else {
                refNo = " ";

            }
            Paragraph p3 = new Paragraph("Reference Id: " + refNo, bold1);
            p3.setAlignment(Element.ALIGN_LEFT);
            p3.setSpacingAfter(10f);

            document.add(p1);
            document.add(p2);
            document.add(p3);

            PdfPTable dataTable = new PdfPTable(3);
            PdfPCell dataCell = null;

            dataTable.setWidths(new int[]{5, 5, 5});
            dataTable.setWidthPercentage(100);

            dataCell = new PdfPCell(new Phrase("Computer Token No:" + tokenBean.getTokenNo(), bold2));
            dataCell.setBorderWidth(0.5f);
            dataCell.setFixedHeight(23f);
            dataCell.setHorizontalAlignment(Element.ALIGN_CENTER);
            dataCell.setBackgroundColor(BaseColor.LIGHT_GRAY);
            dataTable.addCell(dataCell);
            dataCell = new PdfPCell(new Phrase(""));
            dataCell.setBorderWidth(0.5f);
            dataCell.setFixedHeight(23f);
            dataTable.addCell(dataCell);
            dataCell = new PdfPCell(new Phrase("Metal Token No", bold2));
            dataCell.setBackgroundColor(BaseColor.LIGHT_GRAY);
            dataCell.setHorizontalAlignment(Element.ALIGN_CENTER);
            dataCell.setBorderWidth(0.5f);
            dataCell.setFixedHeight(23f);
            dataTable.addCell(dataCell);

            dataCell = new PdfPCell(new Phrase(" "));
            dataCell.setBorderWidth(0.5f);

            dataTable.addCell(dataCell);
            dataCell = new PdfPCell(new Phrase(" "));
            dataCell.setBorderWidth(0.5f);

            dataTable.addCell(dataCell);
            dataCell = new PdfPCell(new Phrase(" "));
            dataCell.setBorderWidth(0.5f);

            dataTable.addCell(dataCell);

            dataCell = new PdfPCell(new Phrase("BILL NO", bold1));
            dataCell.setBackgroundColor(BaseColor.LIGHT_GRAY);
            dataCell.setHorizontalAlignment(Element.ALIGN_CENTER);
            dataCell.setBorderWidth(0.5f);
            dataCell.setFixedHeight(20f);
            dataTable.addCell(dataCell);
            dataCell = new PdfPCell(new Phrase(""));
            dataCell.setBorderWidth(0.5f);
            dataCell.setFixedHeight(20f);
            dataTable.addCell(dataCell);
            dataCell = new PdfPCell(new Phrase("BILL DATE", bold1));
            dataCell.setBackgroundColor(BaseColor.LIGHT_GRAY);
            dataCell.setHorizontalAlignment(Element.ALIGN_CENTER);
            dataCell.setBorderWidth(0.5f);
            dataCell.setFixedHeight(20f);
            dataTable.addCell(dataCell);

            dataCell = new PdfPCell(new Phrase(tokenBean.getBillDesc(), bold1));
            dataCell.setBorderWidth(0.5f);
            dataCell.setFixedHeight(20f);
            dataCell.setHorizontalAlignment(Element.ALIGN_CENTER);
            dataTable.addCell(dataCell);
            dataCell = new PdfPCell(new Phrase(""));
            dataCell.setBorderWidth(0.5f);

            dataCell.setHorizontalAlignment(Element.ALIGN_CENTER);
            dataTable.addCell(dataCell);
            dataCell = new PdfPCell(new Phrase(tokenBean.getBillDate(), bold1));
            dataCell.setBorderWidth(0.5f);
            dataCell.setHorizontalAlignment(Element.ALIGN_CENTER);
            dataTable.addCell(dataCell);

            dataCell = new PdfPCell(new Phrase("Bill Type\n"
                    + "ID/Description\n"
                    + "(as per annexture) ", bold1));
            dataCell.setBorderWidth(0.5f);
            dataCell.setBackgroundColor(BaseColor.LIGHT_GRAY);
            dataCell.setHorizontalAlignment(Element.ALIGN_CENTER);
            dataTable.addCell(dataCell);
            dataCell = new PdfPCell(new Phrase(tokenBean.getBillType(), bold2));
            dataCell.setBorderWidth(0.5f);
            dataCell.setFixedHeight(20f);
            dataCell.setHorizontalAlignment(Element.ALIGN_CENTER);
            dataTable.addCell(dataCell);
            dataCell = new PdfPCell(new Phrase("Establishment Pay Bill", bold1));
            dataCell.setBackgroundColor(BaseColor.LIGHT_GRAY);
            dataCell.setHorizontalAlignment(Element.ALIGN_CENTER);
            dataCell.setBorderWidth(0.5f);
            dataCell.setFixedHeight(20f);
            dataTable.addCell(dataCell);

            dataCell = new PdfPCell(new Phrase(" "));
            dataCell.setColspan(3);
            dataCell.setBorder(Rectangle.TOP | Rectangle.BOTTOM);
            dataTable.addCell(dataCell);

            dataCell = new PdfPCell(new Phrase("DDO Code", bold1));
            dataCell.setBorderWidth(0.5f);
            dataCell.setFixedHeight(20f);
            dataCell.setBackgroundColor(BaseColor.LIGHT_GRAY);
            dataCell.setHorizontalAlignment(Element.ALIGN_CENTER);
            dataTable.addCell(dataCell);
            dataCell = new PdfPCell(new Phrase(tokenBean.getDdoCode(), bold1));
            dataCell.setBorderWidth(0.5f);
            dataCell.setFixedHeight(20f);
            dataCell.setColspan(2);
            dataCell.setHorizontalAlignment(Element.ALIGN_LEFT);
            dataTable.addCell(dataCell);
            dataCell = new PdfPCell(new Phrase("DDO Name", bold1));
            dataCell.setBorderWidth(0.5f);
            dataCell.setFixedHeight(20f);
            dataCell.setBackgroundColor(BaseColor.LIGHT_GRAY);
            dataCell.setHorizontalAlignment(Element.ALIGN_CENTER);
            dataTable.addCell(dataCell);
            dataCell = new PdfPCell(new Phrase(tokenBean.getDdoName(), bold1));
            dataCell.setBorderWidth(0.5f);
            dataCell.setFixedHeight(20f);
            dataCell.setColspan(2);
            dataCell.setHorizontalAlignment(Element.ALIGN_LEFT);
            dataTable.addCell(dataCell);

            dataCell = new PdfPCell(new Phrase("CHART OF ACCOUNT", bold2));
            dataCell.setColspan(3);
            dataCell.setHorizontalAlignment(Element.ALIGN_CENTER);
            dataCell.setFixedHeight(20f);
            dataCell.setBorder(Rectangle.NO_BORDER);
            dataTable.addCell(dataCell);

            document.add(dataTable);

            PdfPTable dataTable1 = new PdfPTable(6);
            PdfPCell dataCell1 = null;

            dataTable1.setWidths(new int[]{2, 2, 2, 2, 2, 2});
            dataTable1.setWidthPercentage(100);

            dataCell1 = new PdfPCell(new Phrase("Demand", bold1));
            dataCell1.setBorderWidth(0.5f);
            dataCell1.setFixedHeight(20f);
            dataCell1.setHorizontalAlignment(Element.ALIGN_CENTER);
            dataCell1.setBackgroundColor(BaseColor.LIGHT_GRAY);
            dataTable1.addCell(dataCell1);
            dataCell1 = new PdfPCell(new Phrase("Major", bold1));
            dataCell1.setBorderWidth(0.5f);
            dataCell1.setFixedHeight(20f);
            dataCell1.setHorizontalAlignment(Element.ALIGN_CENTER);
            dataCell1.setBackgroundColor(BaseColor.LIGHT_GRAY);
            dataTable1.addCell(dataCell1);
            dataCell1 = new PdfPCell(new Phrase("Sub Major", bold1));
            dataCell1.setBackgroundColor(BaseColor.LIGHT_GRAY);
            dataCell1.setHorizontalAlignment(Element.ALIGN_CENTER);
            dataCell1.setBorderWidth(0.5f);
            dataCell1.setFixedHeight(20f);
            dataTable1.addCell(dataCell1);
            dataCell1 = new PdfPCell(new Phrase("Minor", bold1));
            dataCell1.setBackgroundColor(BaseColor.LIGHT_GRAY);
            dataCell1.setHorizontalAlignment(Element.ALIGN_CENTER);
            dataCell1.setBorderWidth(0.5f);
            dataCell1.setFixedHeight(20f);
            dataTable1.addCell(dataCell1);
            dataCell1 = new PdfPCell(new Phrase("Sub", bold1));
            dataCell1.setBackgroundColor(BaseColor.LIGHT_GRAY);
            dataCell1.setHorizontalAlignment(Element.ALIGN_CENTER);
            dataCell1.setBorderWidth(0.5f);
            dataCell1.setFixedHeight(20f);
            dataTable1.addCell(dataCell1);
            dataCell1 = new PdfPCell(new Phrase("Detail", bold1));
            dataCell1.setBackgroundColor(BaseColor.LIGHT_GRAY);
            dataCell1.setHorizontalAlignment(Element.ALIGN_CENTER);
            dataCell1.setBorderWidth(0.5f);
            dataCell1.setFixedHeight(20f);
            dataTable1.addCell(dataCell1);

            dataCell1 = new PdfPCell(new Phrase(tokenBean.getDemandNo(), bold3));
            dataCell1.setBorderWidth(0.5f);
            dataCell1.setFixedHeight(20f);
            dataCell1.setHorizontalAlignment(Element.ALIGN_CENTER);
            dataTable1.addCell(dataCell1);
            dataCell1 = new PdfPCell(new Phrase(tokenBean.getMajorHead(), bold3));
            dataCell1.setBorderWidth(0.5f);
            dataCell1.setFixedHeight(20f);
            dataCell1.setHorizontalAlignment(Element.ALIGN_CENTER);
            dataTable1.addCell(dataCell1);
            dataCell1 = new PdfPCell(new Phrase(tokenBean.getSubMajorHead(), bold3));
            dataCell1.setHorizontalAlignment(Element.ALIGN_CENTER);
            dataCell1.setBorderWidth(0.5f);
            dataCell1.setFixedHeight(20f);
            dataTable1.addCell(dataCell1);
            dataCell1 = new PdfPCell(new Phrase(tokenBean.getMinor(), bold3));
            dataCell1.setHorizontalAlignment(Element.ALIGN_CENTER);
            dataCell1.setBorderWidth(0.5f);
            dataCell1.setFixedHeight(20f);
            dataTable1.addCell(dataCell1);
            dataCell1 = new PdfPCell(new Phrase(tokenBean.getSub(), bold3));
            dataCell1.setHorizontalAlignment(Element.ALIGN_CENTER);
            dataCell1.setBorderWidth(0.5f);
            dataCell1.setFixedHeight(20f);
            dataTable1.addCell(dataCell1);
            dataCell1 = new PdfPCell(new Phrase(tokenBean.getDetail(), bold3));
            dataCell1.setHorizontalAlignment(Element.ALIGN_CENTER);
            dataCell1.setBorderWidth(0.5f);
            dataCell1.setFixedHeight(20f);
            dataTable1.addCell(dataCell1);

            dataCell1 = new PdfPCell(new Phrase(" "));
            dataCell1.setColspan(6);
            dataCell1.setBorder(Rectangle.NO_BORDER);
            dataCell1.setFixedHeight(10f);
            dataTable1.addCell(dataCell1);

            document.add(dataTable1);

            PdfPTable dataTable2 = new PdfPTable(3);
            PdfPCell dataCell2 = null;

            dataTable2.setWidths(new int[]{5, 5, 5});
            dataTable2.setWidthPercentage(100);

            if (tokenBean.getPlanOrNonPlan() != null && !tokenBean.getPlanOrNonPlan().equals("")) {
                if (tokenBean.getPlanOrNonPlan().equals('0')) {
                    planOrNonPlan = "Non Planned";
                } else if (tokenBean.getPlanOrNonPlan().equals('1')) {
                    planOrNonPlan = "State Planned";
                } else if (tokenBean.getPlanOrNonPlan().equals('2')) {
                    planOrNonPlan = "CP";
                } else {
                    planOrNonPlan = "CSP";
                }
            }
            dataCell2 = new PdfPCell(new Phrase(planOrNonPlan, bold2));
            dataCell2.setHorizontalAlignment(Element.ALIGN_CENTER);
            dataCell2.setBorderWidth(0.5f);
            dataCell2.setFixedHeight(20f);
            dataCell2.setBackgroundColor(BaseColor.LIGHT_GRAY);
            dataTable2.addCell(dataCell2);

            if (tokenBean.getChargedOrVoted() != null && !tokenBean.getChargedOrVoted().equals("")) {
                if (tokenBean.getChargedOrVoted().contains("0")) {
                    chargedVoted = "Voted";

                } else if (tokenBean.getChargedOrVoted().contains("1")) {
                    chargedVoted = "Charged";
                }
            }

            dataCell2 = new PdfPCell(new Phrase(chargedVoted, bold2));
            dataCell2.setHorizontalAlignment(Element.ALIGN_CENTER);
            dataCell2.setBorderWidth(0.5f);
            dataCell2.setFixedHeight(20f);
            dataCell2.setBackgroundColor(BaseColor.LIGHT_GRAY);
            dataTable2.addCell(dataCell2);
            dataCell2 = new PdfPCell(new Phrase(tokenBean.getSectorDesc(), bold2));
            dataCell2.setHorizontalAlignment(Element.ALIGN_CENTER);
            dataCell2.setBorderWidth(0.5f);
            dataCell2.setFixedHeight(20f);
            dataCell2.setBackgroundColor(BaseColor.LIGHT_GRAY);
            dataTable2.addCell(dataCell2);

            dataCell2 = new PdfPCell(new Phrase(" ", bold2));
            dataCell2.setBorder(Rectangle.NO_BORDER);
            dataCell2.setColspan(3);
            dataCell2.setBorderWidth(1.5f);
            dataTable2.addCell(dataCell2);

            dataCell2 = new PdfPCell(new Phrase("Object", bold2));
            dataCell2.setHorizontalAlignment(Element.ALIGN_CENTER);
            dataCell2.setBorderWidth(0.5f);
            dataCell2.setFixedHeight(20f);
            dataCell2.setBackgroundColor(BaseColor.LIGHT_GRAY);
            dataTable2.addCell(dataCell2);
            dataCell2 = new PdfPCell(new Phrase("Item Description", bold2));
            dataCell2.setHorizontalAlignment(Element.ALIGN_CENTER);
            dataCell2.setBorderWidth(0.5f);
            dataCell2.setFixedHeight(20f);
            dataCell2.setBackgroundColor(BaseColor.LIGHT_GRAY);
            dataTable2.addCell(dataCell2);
            dataCell2 = new PdfPCell(new Phrase("Amount", bold2));
            dataCell2.setHorizontalAlignment(Element.ALIGN_CENTER);
            dataCell2.setBorderWidth(0.5f);
            dataCell2.setFixedHeight(20f);
            dataCell2.setBackgroundColor(BaseColor.LIGHT_GRAY);
            dataTable2.addCell(dataCell2);

            if (tokenBean.getAllowanceList() != null && !tokenBean.getAllowanceList().equals("")) {
                AllowDeductDetails allowanceList = null;
                for (int i = 0; i < tokenBean.getAllowanceList().size(); i++) {
                    allowanceList = (AllowDeductDetails) tokenBean.getAllowanceList().get(i);
                    dataCell2 = new PdfPCell(new Phrase(allowanceList.getObjecthead(), bold3));
                    dataCell2.setHorizontalAlignment(Element.ALIGN_CENTER);
                    dataCell2.setBorderWidth(0.5f);
                    dataCell2.setFixedHeight(15f);
                    dataTable2.addCell(dataCell2);
                    dataCell2 = new PdfPCell(new Phrase(allowanceList.getAdname(), bold3));
                    dataCell2.setHorizontalAlignment(Element.ALIGN_CENTER);
                    dataCell2.setBorderWidth(0.5f);
                    dataCell2.setFixedHeight(15f);
                    dataTable2.addCell(dataCell2);
                    dataCell2 = new PdfPCell(new Phrase(allowanceList.getAdamount(), bold3));
                    dataCell2.setHorizontalAlignment(Element.ALIGN_CENTER);
                    dataCell2.setBorderWidth(0.5f);
                    dataCell2.setFixedHeight(15f);
                    dataTable2.addCell(dataCell2);
                }
            }

            dataCell2 = new PdfPCell(new Phrase(" ", bold2));
            dataCell2.setBorder(Rectangle.NO_BORDER);
            dataCell2.setColspan(3);
            dataCell2.setBorderWidth(1.5f);
            dataTable2.addCell(dataCell2);

            dataCell2 = new PdfPCell(new Phrase("BT HEAD", bold2));
            dataCell2.setHorizontalAlignment(Element.ALIGN_CENTER);
            dataCell2.setBorderWidth(0.5f);
            dataCell2.setFixedHeight(20f);
            dataCell2.setBackgroundColor(BaseColor.LIGHT_GRAY);
            dataTable2.addCell(dataCell2);
            dataCell2 = new PdfPCell(new Phrase("Item Description", bold2));
            dataCell2.setHorizontalAlignment(Element.ALIGN_CENTER);
            dataCell2.setBorderWidth(0.5f);
            dataCell2.setFixedHeight(20f);
            dataCell2.setBackgroundColor(BaseColor.LIGHT_GRAY);
            dataTable2.addCell(dataCell2);
            dataCell2 = new PdfPCell(new Phrase("Amount", bold2));
            dataCell2.setHorizontalAlignment(Element.ALIGN_CENTER);
            dataCell2.setBorderWidth(0.5f);
            dataCell2.setFixedHeight(20f);
            dataCell2.setBackgroundColor(BaseColor.LIGHT_GRAY);
            dataTable2.addCell(dataCell2);

            if (tokenBean.getDeductionList() != null && !tokenBean.getDeductionList().equals("")) {
                AllowDeductDetails deductList = null;
                for (int i = 0; i < tokenBean.getDeductionList().size(); i++) {
                    deductList = (AllowDeductDetails) tokenBean.getDeductionList().get(i);
                    dataCell2 = new PdfPCell(new Phrase(deductList.getObjecthead(), bold3));
                    dataCell2.setHorizontalAlignment(Element.ALIGN_CENTER);
                    dataCell2.setBorderWidth(0.5f);
                    dataCell2.setFixedHeight(15f);
                    dataTable2.addCell(dataCell2);
                    dataCell2 = new PdfPCell(new Phrase(deductList.getAdname(), bold3));
                    dataCell2.setHorizontalAlignment(Element.ALIGN_CENTER);
                    dataCell2.setBorderWidth(0.5f);
                    dataCell2.setFixedHeight(15f);
                    dataTable2.addCell(dataCell2);
                    dataCell2 = new PdfPCell(new Phrase(deductList.getAdamount(), bold3));
                    dataCell2.setHorizontalAlignment(Element.ALIGN_CENTER);
                    dataCell2.setBorderWidth(0.5f);
                    dataCell2.setFixedHeight(15f);
                    dataTable2.addCell(dataCell2);
                }

            }

            dataCell2 = new PdfPCell(new Phrase(" ", bold2));
            dataCell2.setBorder(Rectangle.NO_BORDER);
            dataCell2.setColspan(3);
            dataCell2.setBorderWidth(1.5f);
            dataTable2.addCell(dataCell2);

            dataCell2 = new PdfPCell(new Phrase("Gross Amount", bold2));
            dataCell2.setHorizontalAlignment(Element.ALIGN_CENTER);
            dataCell2.setBorderWidth(0.5f);
            dataCell2.setFixedHeight(20f);
            dataCell2.setBackgroundColor(BaseColor.LIGHT_GRAY);
            dataTable2.addCell(dataCell2);
            dataCell2 = new PdfPCell(new Phrase("Net Amount", bold2));
            dataCell2.setHorizontalAlignment(Element.ALIGN_CENTER);
            dataCell2.setBorderWidth(0.5f);
            dataCell2.setFixedHeight(20f);
            dataCell2.setBackgroundColor(BaseColor.LIGHT_GRAY);
            dataTable2.addCell(dataCell2);
            dataCell2 = new PdfPCell(new Phrase("By Transfer Amount", bold2));
            dataCell2.setHorizontalAlignment(Element.ALIGN_CENTER);
            dataCell2.setBorderWidth(0.5f);
            dataCell2.setFixedHeight(20f);
            dataCell2.setBackgroundColor(BaseColor.LIGHT_GRAY);
            dataTable2.addCell(dataCell2);

            dataCell2 = new PdfPCell(new Phrase(tokenBean.getGrossAmt(), bold3));
            dataCell2.setHorizontalAlignment(Element.ALIGN_CENTER);
            dataCell2.setBorderWidth(0.5f);
            dataCell2.setFixedHeight(20f);
            dataTable2.addCell(dataCell2);
            dataCell2 = new PdfPCell(new Phrase(tokenBean.getNetAmt(), bold3));
            dataCell2.setHorizontalAlignment(Element.ALIGN_CENTER);
            dataCell2.setBorderWidth(0.5f);
            dataCell2.setFixedHeight(20f);
            dataTable2.addCell(dataCell2);
            dataCell2 = new PdfPCell(new Phrase(Double.toString(tokenBean.getByTransferAmt()), bold3));
            dataCell2.setHorizontalAlignment(Element.ALIGN_CENTER);
            dataCell2.setBorderWidth(0.5f);
            dataCell2.setFixedHeight(20f);
            dataTable2.addCell(dataCell2);

            document.add(dataTable2);

        } catch (Exception e) {
            e.printStackTrace();
        } finally {

        }

    }

    @Override
    public String allowedOfficeEsign(String offCode) {
        String result = "";
        String ddo_hrmsid = "";
        Connection con = null;
        PreparedStatement ps = null;
        ResultSet rs = null;
        try {
            con = this.repodataSource.getConnection();
            ps = con.prepareStatement("SELECT allow_esign,ddo_hrmsid FROM g_office WHERE off_code = ? ");
            ps.setString(1, offCode);
            rs = ps.executeQuery();
            while (rs.next()) {
                result = rs.getString("allow_esign") + "|" + rs.getString("ddo_hrmsid");
            }

        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            DataBaseFunctions.closeSqlObjects(rs, ps, con);
        }
        return result;
    }

    private void printPageTotal(PdfPTable table, PdfPCell cell, int pagetotal, int otherdeptotal, int totalreltotal, Font f2, boolean isLastPage) {
        cell = new PdfPCell(new Phrase(StringUtils.repeat("-", 173), f2));
        cell.setColspan(7);
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);

        // Page Total
        cell = new PdfPCell(new Phrase("", f2));
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);
        cell = new PdfPCell(new Phrase("Page Total:", f2));
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);
        cell = new PdfPCell(new Phrase("", f2));
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);
        cell = new PdfPCell(new Phrase(Double.valueOf(pagetotal + "").longValue() + "", f2));
        cell.setBorder(Rectangle.NO_BORDER);
        cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
        table.addCell(cell);
        cell = new PdfPCell(new Phrase("", f2));
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);
        if (isLastPage == true) {
            cell = new PdfPCell(new Phrase(Double.valueOf(totalreltotal + "").longValue() + "", f2));
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
            table.addCell(cell);
        } else {
            cell = new PdfPCell();
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);
        }
        if (isLastPage == true) {
            cell = new PdfPCell(new Phrase(Double.valueOf(otherdeptotal + "").longValue() + "", f2));
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
            table.addCell(cell);
        } else {
            cell = new PdfPCell();
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);
        }
    }

    private void printHeader(BankAcountScheduleBean basb, PdfPTable table, PdfPCell cell) throws Exception {

        int payBillMonth = 0;
        int payBillYear = 0;

        Font f1 = new Font();
        f1.setSize(9);
        String offname = basb.getOffName();

        cell = new PdfPCell(new Phrase(offname, new Font(Font.FontFamily.TIMES_ROMAN, 11, Font.BOLD)));
        cell.setColspan(7);
        cell.setBorder(Rectangle.NO_BORDER);
        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(cell);

        Font f5 = new Font();
        f5.setSize(9);
        f5.setStyle(Font.BOLD);

        cell = new PdfPCell(new Phrase("Bill No: ", f1));
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);
        cell = new PdfPCell(new Phrase(basb.getBilldesc(), f5));
        cell.setColspan(6);
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("Schedule - Bank Statement", f5));
        cell.setColspan(7);
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("SCHEDULE OF - Employee-wise list with SB A/c No(Name of the Bank)", f1));
        cell.setColspan(7);
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("", f1));
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);
        cell = new PdfPCell(new Phrase("        Net Amount, Loan/Advance Liability Amount", f1));
        cell.setColspan(6);
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("", f1));
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);
        cell = new PdfPCell(new Phrase("        Amount Credited to SB A/c of the employee", f1));
        cell.setColspan(6);
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("", f1));
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);
        cell = new PdfPCell(new Phrase("    Amount Credited to CA A/C of DDO", f1));
        cell.setColspan(6);
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);

//        if (Integer.parseInt(basb.getMonth())  <= 10) {
//            payBillMonth = Integer.parseInt(basb.getMonth()) + 1;
//            payBillYear = Integer.parseInt(basb.getYear());
//        } else {
//            payBillMonth = 0;
//            payBillYear = Integer.parseInt(basb.getYear()) + 1;
//        }
        cell = new PdfPCell(new Phrase("", f1));
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);
        cell = new PdfPCell(new Phrase("        For " + basb.getMonth() + " " + basb.getYear() + " payable in " + payBillMonth + " " + payBillYear + "'", f1));
        cell.setColspan(6);
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("Name of the DDO who maintains these accounts", f1));
        cell.setColspan(7);
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);

        Font f2 = new Font();
        f2.setSize(9);

        cell = new PdfPCell(new Phrase(StringUtils.repeat("-", 173), f2));
        cell.setColspan(7);
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);

        //1st row
        cell = new PdfPCell(new Phrase("Sl\nNo", f2));
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);
        cell = new PdfPCell(new Phrase("SB A/c no\nName of the\nBank", f2));
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);
        cell = new PdfPCell(new Phrase("Name/\nDesignation", f2));
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);
        cell = new PdfPCell(new Phrase("(PF No)\nNet Amount\n(in Rs.)", f2));
        cell.setBorder(Rectangle.NO_BORDER);
        cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
        table.addCell(cell);
        cell = new PdfPCell(new Phrase("Loan/\nAdvance\nLiabilty\nAmount\n(in Rs)", f2));
        cell.setBorder(Rectangle.NO_BORDER);
        cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
        table.addCell(cell);
        cell = new PdfPCell(new Phrase("Amt Credited\nSB A/c of\nthe employee\n(in Rs)", f2));
        cell.setBorder(Rectangle.NO_BORDER);
        cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
        table.addCell(cell);
        cell = new PdfPCell(new Phrase("Amt Credited\nCA A/c of\nthe DDO\n(in Rs)", f2));
        cell.setBorder(Rectangle.NO_BORDER);
        cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
        table.addCell(cell);

        //4th row
        cell = new PdfPCell(new Phrase(StringUtils.repeat("-", 173), f2));
        cell.setColspan(7);
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);

        //5th row
        cell = new PdfPCell(new Phrase("1", f2));
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);
        cell = new PdfPCell(new Phrase("2", f2));
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);
        cell = new PdfPCell(new Phrase("3", f2));
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);
        cell = new PdfPCell(new Phrase("4", f2));
        cell.setBorder(Rectangle.NO_BORDER);
        cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
        table.addCell(cell);
        cell = new PdfPCell(new Phrase("5", f2));
        cell.setBorder(Rectangle.NO_BORDER);
        cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
        table.addCell(cell);
        cell = new PdfPCell(new Phrase("6", f2));
        cell.setBorder(Rectangle.NO_BORDER);
        cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
        table.addCell(cell);
        cell = new PdfPCell(new Phrase("7", f2));
        cell.setBorder(Rectangle.NO_BORDER);
        cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
        table.addCell(cell);

        //6th row
        cell = new PdfPCell(new Phrase(StringUtils.repeat("-", 173), f2));
        cell.setColspan(7);
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);
    }

    public void printCarryForward(int pagetotal, String netAmtFig, PdfPTable table, PdfPCell cell, boolean isLastPage) throws Exception {
        Font f2 = new Font();
        f2.setSize(9);
        if (isLastPage == true) {
            cell = new PdfPCell(new Phrase(StringUtils.repeat("-", 173), f2));
            cell.setColspan(7);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);

            //TOTAL
            cell = new PdfPCell(new Phrase("", f2));
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);
            cell = new PdfPCell(new Phrase("TOTAL", f2));
            cell.setBorder(Rectangle.NO_BORDER);
            //cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
            table.addCell(cell);
            cell = new PdfPCell(new Phrase("", f2));
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);
            cell = new PdfPCell(new Phrase(pagetotal + "", f2));
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
            table.addCell(cell);
            cell = new PdfPCell(new Phrase("", f2));
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);
            cell = new PdfPCell(new Phrase("", f2));
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);
            cell = new PdfPCell(new Phrase("", f2));
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);
            cell = new PdfPCell(new Phrase(StringUtils.repeat("-", 173), f2));
            cell.setColspan(7);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);
            cell = new PdfPCell(new Phrase("RUPEES " + netAmtFig + " ONLY", f2));
            cell.setColspan(7);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
            table.addCell(cell);
        } else {
            //CARRIED FROM PREVIOUS PAGE
            cell = new PdfPCell(new Phrase("", f2));
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);
            cell = new PdfPCell(new Phrase("CARRIED FROM PREVIOUS PAGE :", f2));
            cell.setColspan(2);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);
            cell = new PdfPCell(new Phrase(pagetotal + "", f2));
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
            table.addCell(cell);
            cell = new PdfPCell(new Phrase("", f2));
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);
            cell = new PdfPCell(new Phrase("", f2));
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);
            cell = new PdfPCell(new Phrase("", f2));
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);
            cell = new PdfPCell(new Phrase(StringUtils.repeat("-", 173), f2));
            cell.setColspan(7);
            cell.setBorder(Rectangle.NO_BORDER);
            table.addCell(cell);
        }

    }

    private String[] wrapText(String text, int len) {
        // return empty array for null text
        if (text == null) {
            return new String[]{};
        }

        // return text if len is zero or less
        if (len <= 0) {
            return new String[]{text};
        }

        // return text if less than length
        if (text.length() <= len) {
            return new String[]{text};
        }

        char[] chars = text.toCharArray();
        Vector lines = new Vector();
        StringBuffer line = new StringBuffer();
        StringBuffer word = new StringBuffer();

        for (int i = 0; i < chars.length; i++) {
            word.append(chars[i]);

            if (chars[i] == ' ') {
                if ((line.length() + word.length()) > len) {
                    lines.add(line.toString());
                    line.delete(0, line.length());
                }

                line.append(word);
                word.delete(0, word.length());
            }
        }

        // handle any extra chars in current word
        if (word.length() > 0) {
            if ((line.length() + word.length()) > len) {
                lines.add(line.toString());
                line.delete(0, line.length());
            }
            line.append(word);
        }

        // handle extra line
        if (line.length() > 0) {
            lines.add(line.toString());
        }

        String[] ret = new String[lines.size()];
        int c = 0; // counter
        for (Enumeration e = lines.elements(); e.hasMoreElements(); c++) {
            ret[c] = (String) e.nextElement();
        }

        return ret;
    }

    private void printHeader(String offname, PdfPTable table, PdfPCell cell, String billdesc, int pgno, Font f1) throws Exception {

        cell = new PdfPCell(new Phrase("Page : " + pgno, f1));
        cell.setColspan(4);
        cell.setBorder(Rectangle.NO_BORDER);
        cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase(offname, new Font(Font.FontFamily.TIMES_ROMAN, 11, Font.BOLD)));
        cell.setColspan(4);
        cell.setBorder(Rectangle.NO_BORDER);
        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("Form No. O.T.C. 23", f1));
        cell.setColspan(4);
        cell.setBorder(Rectangle.NO_BORDER);
        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("ABSENTEE STATEMENT", f1));
        cell.setColspan(4);
        cell.setBorder(Rectangle.NO_BORDER);
        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("[ See Subsidiary Rule 223 ]", f1));
        cell.setColspan(4);
        cell.setBorder(Rectangle.NO_BORDER);
        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(cell);

        cell = new PdfPCell();
        cell.setColspan(4);
        cell.setFixedHeight(10);
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("Bill No : ", f1));
        cell.setBorder(Rectangle.NO_BORDER);
        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(cell);
        cell = new PdfPCell(new Phrase(StringUtils.defaultString(billdesc), new Font(Font.FontFamily.TIMES_ROMAN, 9, Font.BOLD)));
        cell.setColspan(3);
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase(StringUtils.repeat("-", 173), f1));
        cell.setColspan(4);
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("Sl No", f1));
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);
        cell = new PdfPCell(new Phrase("Designation", f1));
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);
        cell = new PdfPCell(new Phrase("SCALE OF PAY", f1));
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);
        cell = new PdfPCell(new Phrase("NO OF POST", f1));
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase(StringUtils.repeat("-", 173), f1));
        cell.setColspan(4);
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("1", f1));
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);
        cell = new PdfPCell(new Phrase("2", f1));
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);
        cell = new PdfPCell(new Phrase("3", f1));
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);
        cell = new PdfPCell(new Phrase("4", f1));
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase(StringUtils.repeat("-", 173), f1));
        cell.setColspan(4);
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);

    }

    @Override
    public void excesspaySchedulePdf(PdfWriter writer, Document document, String billNo, ExcessPayBean excessBean, List excessPayEmpList) {
        String totalGross = "";
        String totalTax = "";
        String totalTaxFig = "";
        int i = 0;
        try {
            PdfPTable dataTable = new PdfPTable(6);
            PdfPTable dataTable1 = new PdfPTable(6);
            PdfPCell dataCell = null;

            dataTable.setWidths(new int[]{1, 6, 5, 2, 2, 2});
            dataTable.setWidthPercentage(100);

            Chunk chk1 = new Chunk(excessBean.getOffName(), new Font(Font.FontFamily.HELVETICA, 7.2f, Font.BOLD));
            Phrase phs1 = new Phrase();
            phs1.add(chk1);

            ExcessPayBean obj = null;

            if (excessPayEmpList != null && excessPayEmpList.size() > 0) {
                excessPayHeader(document, billNo, excessBean);
                for (i = 0; i < excessPayEmpList.size(); i++) {
                    obj = (ExcessPayBean) excessPayEmpList.get(i);
                    //System.out.println("value of i:" + (i));
                    excessPayEmpListTable(dataTable, dataCell, obj, i + 1);
                    if ((i + 1) % 20 == 0) {
                        document.add(dataTable);
                        document.newPage();

                        dataTable = new PdfPTable(6);
                        dataTable.setWidths(new int[]{1, 6, 5, 2, 2, 2});
                        dataTable.setWidthPercentage(100);
                        excessPayHeader(document, billNo, excessBean);
                    }
                    totalGross = obj.getTotalGross();
                    totalTax = obj.getTotalTax();
                    totalTaxFig = Numtowordconvertion.convertNumber(Integer.parseInt(totalTax));
                }
                dataCell = new PdfPCell(new Phrase("TOTAL FOR THE MONTH OF   " + excessBean.getMonthYear(), new Font(Font.FontFamily.HELVETICA, 8.5f, Font.BOLD)));
                dataCell.setBorderWidth(0.5f);
                dataCell.setColspan(3);
                dataCell.setFixedHeight(22.5f);
                dataCell.setBorder(Rectangle.BOTTOM | Rectangle.TOP);
                dataCell.setHorizontalAlignment(Element.ALIGN_CENTER);
                dataCell.setVerticalAlignment(Element.ALIGN_MIDDLE);
                dataTable.addCell(dataCell);

                dataCell = new PdfPCell(new Phrase(totalGross, new Font(Font.FontFamily.HELVETICA, 8.5f, Font.BOLD)));
                dataCell.setBorderWidth(0.5f);
                dataCell.setFixedHeight(22.5f);
                dataCell.setBorder(Rectangle.BOTTOM | Rectangle.TOP);
                dataCell.setHorizontalAlignment(Element.ALIGN_CENTER);
                dataCell.setVerticalAlignment(Element.ALIGN_MIDDLE);
                dataTable.addCell(dataCell);

                dataCell = new PdfPCell(new Phrase(totalTax, new Font(Font.FontFamily.HELVETICA, 8.5f, Font.BOLD)));
                dataCell.setBorderWidth(0.5f);
                dataCell.setFixedHeight(22.5f);
                dataCell.setBorder(Rectangle.BOTTOM | Rectangle.TOP);
                dataCell.setHorizontalAlignment(Element.ALIGN_CENTER);
                dataCell.setVerticalAlignment(Element.ALIGN_MIDDLE);
                dataTable.addCell(dataCell);

                dataCell = new PdfPCell(new Phrase("", new Font(Font.FontFamily.HELVETICA, 8.5f, Font.BOLD)));
                dataCell.setBorderWidth(0.5f);
                dataCell.setFixedHeight(22.5f);
                dataCell.setBorder(Rectangle.BOTTOM | Rectangle.TOP);
                dataCell.setHorizontalAlignment(Element.ALIGN_CENTER);
                dataCell.setVerticalAlignment(Element.ALIGN_MIDDLE);
                dataTable.addCell(dataCell);

                dataCell = new PdfPCell(new Phrase("", new Font(Font.FontFamily.HELVETICA, 8.5f, Font.BOLD)));
                dataCell.setBorderWidth(0.5f);
                dataCell.setFixedHeight(22.5f);
                dataCell.setColspan(2);
                dataCell.setBorder(Rectangle.NO_BORDER);
                dataCell.setHorizontalAlignment(Element.ALIGN_RIGHT);
                dataCell.setVerticalAlignment(Element.ALIGN_MIDDLE);
                dataTable.addCell(dataCell);

                dataCell = new PdfPCell(new Phrase("(RUPEES " + totalTaxFig + ") ONLY", new Font(Font.FontFamily.HELVETICA, 8.5f)));
                dataCell.setBorderWidth(0.5f);
                dataCell.setFixedHeight(22.5f);
                dataCell.setColspan(4);
                dataCell.setBorder(Rectangle.NO_BORDER);
                dataCell.setHorizontalAlignment(Element.ALIGN_RIGHT);
                dataCell.setVerticalAlignment(Element.ALIGN_MIDDLE);
                dataTable.addCell(dataCell);

                PdfPCell blankRow = new PdfPCell(new Phrase(""));
                blankRow.setFixedHeight(20f);
                blankRow.setColspan(6);
                blankRow.setBorder(Rectangle.NO_BORDER);
                dataTable.addCell(blankRow);

                dataCell = new PdfPCell(new Phrase(""));
                dataCell.setColspan(3);
                dataCell.setBorder(Rectangle.NO_BORDER);
                dataTable.addCell(dataCell);

                dataCell = new PdfPCell(new Phrase("Signature of the D.D.O.\n\n"
                        + excessBean.getOffName() + "\n\n"
                        + "Date: ", new Font(Font.FontFamily.HELVETICA, 8.1f)));
                dataCell.setBorder(Rectangle.NO_BORDER);
                //dataCell.setFixedHeight(28.5f);
                dataCell.setColspan(3);
                dataCell.setHorizontalAlignment(Element.ALIGN_CENTER);
                //dataCell.setVerticalAlignment(Element.ALIGN_MIDDLE);
                dataTable.addCell(dataCell);

                Paragraph p1 = new Paragraph("To be filled by the Treasury Officer/ Sub Treasury Officer/ Special Treasury Officer\n"
                        + "a. 	T.V. No. _________________ and Date __________________ of encashment of Bill\n"
                        + "b. 	Sl. No. __________________ and Date __________________ of the receipt Schedule in which accounted\n"
                        + "	     by Transfer Credit.", new Font(Font.FontFamily.HELVETICA, 8.1f));
                p1.setAlignment(Element.ALIGN_LEFT);
                p1.setSpacingAfter(15);
                p1.setSpacingBefore(25);

                document.add(dataTable);
                document.add(p1);
            }

        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    private void excessPayHeader(Document document, String billNo, ExcessPayBean excessBean) {
        String billDesc = null;
        try {
            Font f1 = new Font();
            f1.setSize(6.9f);
            f1.setFamily("Times New Roman");

            Font bold = new Font(Font.FontFamily.HELVETICA, 13, Font.BOLD);
            Font bold1 = new Font(Font.FontFamily.HELVETICA, 11, Font.BOLD);
            Font bold2 = new Font(Font.FontFamily.HELVETICA, 9.5f, Font.BOLD);
            Font bold3 = new Font(Font.FontFamily.TIMES_ROMAN, 9.2f, Font.BOLD);

            Font f2 = new Font();
            f2.setSize(9.1f);
            f2.setFamily("Times New Roman");

            Chunk chk1 = new Chunk(excessBean.getDeptName(), bold3);
            Phrase phs1 = new Phrase();
            phs1.add(chk1);

            Chunk chk2 = new Chunk(excessBean.getOffName(), bold3);

            Chunk chk3 = new Chunk(excessBean.getDdoDegn(), bold3);

            if (excessBean.getBillDesc() != null && !excessBean.getBillDesc().equals("")) {
                billDesc = excessBean.getBillDesc();
            } else {
                billDesc = "";
            }
            Chunk chk4 = new Chunk(billDesc, bold3);

            Paragraph p1 = new Paragraph("EXCESS PAY RECOVERY", bold);
            p1.setAlignment(Element.ALIGN_CENTER);
            p1.setSpacingBefore(10.5f);
            p1.setSpacingAfter(1.5f);

            Paragraph p2 = new Paragraph("FOR THE MONTH OF " + excessBean.getMonthYear(), bold1);
            p2.setAlignment(Element.ALIGN_CENTER);
            p2.setSpacingBefore(2.5f);
            p2.setSpacingAfter(15f);

            Paragraph p3 = new Paragraph("Name of the Department:   ", bold2);
            p3.setAlignment(Element.ALIGN_LEFT);
            p3.add(phs1);

            Paragraph p4 = new Paragraph("Name of the Office:            ", bold2);
            p4.setAlignment(Element.ALIGN_LEFT);
            p4.add(chk2);

            Paragraph p5 = new Paragraph("Designation of DDO:          ", bold2);
            p5.setAlignment(Element.ALIGN_LEFT);
            p5.add(chk3);

            Paragraph p6 = new Paragraph("Bill No:  " + chk4, bold2);
            p6.setAlignment(Element.ALIGN_LEFT);
            p6.setSpacingAfter(10.5f);
            p6.add(chk4);

            document.add(p1);
            document.add(p2);
            document.add(p3);
            document.add(p4);
            document.add(p5);
            document.add(p6);

            PdfPTable dataTable = new PdfPTable(6);
            PdfPCell dataCell = null;

            dataTable.setWidths(new int[]{1, 6, 5, 2, 2, 2});
            dataTable.setWidthPercentage(100);

            // Table Header 
            dataCell = new PdfPCell(new Phrase("Sl No.", new Font(Font.FontFamily.HELVETICA, 9.5f, Font.BOLD)));
            dataCell.setBorderWidth(0.7f);
            dataCell.setFixedHeight(25.5f);
            dataCell.setHorizontalAlignment(Element.ALIGN_CENTER);
            dataTable.addCell(dataCell);

            dataCell = new PdfPCell(new Phrase("Employee Name", new Font(Font.FontFamily.HELVETICA, 9.5f, Font.BOLD)));
            dataCell.setBorderWidth(0.7f);
            dataCell.setFixedHeight(25.5f);
            dataTable.addCell(dataCell);
            dataCell = new PdfPCell(new Phrase("Designation", new Font(Font.FontFamily.HELVETICA, 9.5f, Font.BOLD)));
            dataCell.setBorderWidth(0.7f);
            dataCell.setFixedHeight(25.5f);
            dataCell.setHorizontalAlignment(Element.ALIGN_CENTER);
            dataTable.addCell(dataCell);
            dataCell = new PdfPCell(new Phrase("Gross Salary", new Font(Font.FontFamily.HELVETICA, 9.5f, Font.BOLD)));
            dataCell.setBorderWidth(0.7f);
            dataCell.setFixedHeight(25.5f);
            dataCell.setHorizontalAlignment(Element.ALIGN_CENTER);
            dataTable.addCell(dataCell);
            dataCell = new PdfPCell(new Phrase("Excess Pay", new Font(Font.FontFamily.HELVETICA, 9.5f, Font.BOLD)));
            dataCell.setBorderWidth(0.7f);
            dataCell.setFixedHeight(25.5f);
            dataCell.setHorizontalAlignment(Element.ALIGN_CENTER);
            dataTable.addCell(dataCell);
            dataCell = new PdfPCell(new Phrase("Remark", new Font(Font.FontFamily.HELVETICA, 9.5f, Font.BOLD)));
            dataCell.setBorderWidth(0.7f);
            dataCell.setFixedHeight(25.5f);
            dataCell.setHorizontalAlignment(Element.ALIGN_CENTER);
            dataTable.addCell(dataCell);
            document.add(dataTable);

        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    private void excessPayEmpListTable(PdfPTable dataTable, PdfPCell dataCell, ExcessPayBean obj, int i) throws Exception {

        dataCell = new PdfPCell(new Phrase(Integer.toString(i), new Font(Font.FontFamily.HELVETICA, 8.5f)));
        dataCell.setBorderWidth(0.5f);
        dataCell.setFixedHeight(28.5f);
        dataCell.setBorder(Rectangle.BOTTOM | Rectangle.TOP);
        dataCell.setHorizontalAlignment(Element.ALIGN_CENTER);
        dataCell.setVerticalAlignment(Element.ALIGN_MIDDLE);
        dataTable.addCell(dataCell);

        dataCell = new PdfPCell(new Phrase(obj.getEmpName(), new Font(Font.FontFamily.HELVETICA, 8.5f)));
        dataCell.setBorderWidth(0.5f);
        dataCell.setFixedHeight(28.5f);
        dataCell.setBorder(Rectangle.BOTTOM | Rectangle.TOP);
        dataCell.setVerticalAlignment(Element.ALIGN_MIDDLE);
        dataTable.addCell(dataCell);

        dataCell = new PdfPCell(new Phrase(obj.getEmpDegn(), new Font(Font.FontFamily.HELVETICA, 8.5f)));
        dataCell.setBorderWidth(0.5f);
        dataCell.setFixedHeight(28.5f);
        dataCell.setBorder(Rectangle.BOTTOM | Rectangle.TOP);
        dataCell.setHorizontalAlignment(Element.ALIGN_CENTER);
        dataCell.setVerticalAlignment(Element.ALIGN_MIDDLE);
        dataTable.addCell(dataCell);

        dataCell = new PdfPCell(new Phrase(obj.getEmpGrossSal(), new Font(Font.FontFamily.HELVETICA, 8.5f)));
        dataCell.setBorderWidth(0.5f);
        dataCell.setFixedHeight(28.5f);
        dataCell.setBorder(Rectangle.BOTTOM | Rectangle.TOP);
        dataCell.setHorizontalAlignment(Element.ALIGN_CENTER);
        dataCell.setVerticalAlignment(Element.ALIGN_MIDDLE);
        dataTable.addCell(dataCell);

        dataCell = new PdfPCell(new Phrase(obj.getEmpTaxOnProffesion(), new Font(Font.FontFamily.HELVETICA, 8.5f)));
        dataCell.setBorderWidth(0.5f);
        dataCell.setFixedHeight(28.5f);
        dataCell.setBorder(Rectangle.BOTTOM | Rectangle.TOP);
        dataCell.setHorizontalAlignment(Element.ALIGN_CENTER);
        dataCell.setVerticalAlignment(Element.ALIGN_MIDDLE);
        dataTable.addCell(dataCell);

        dataCell = new PdfPCell(new Phrase("", new Font(Font.FontFamily.HELVETICA, 8.5f)));
        dataCell.setBorderWidth(0.5f);
        dataCell.setFixedHeight(28.5f);
        dataCell.setBorder(Rectangle.BOTTOM | Rectangle.TOP);
        dataCell.setHorizontalAlignment(Element.ALIGN_CENTER);
        dataCell.setVerticalAlignment(Element.ALIGN_MIDDLE);
        dataTable.addCell(dataCell);

    }

    /*@Override
     public void GisAndFaPDFDownload(Document document, String billNo, String schedule, int month, int year) {
     // System.out.println("Here");
     Connection con = null;
     int x = 0;
     int j = 1;
     int rowCnt = 0;
     int mypage = 1;
     int pageNo = 1;
     int total = 0;
     String totalFig = null;

     try {
     con = dataSource.getConnection();
     GisAndFaScheduleBean gisAndFaBean = comonScheduleDao.getGisAndFaScheduleHeaderDetails(schedule, billNo);
     List empList = comonScheduleDao.getGISandFAScheduleEmpList(schedule, billNo, year, month);
     GisAndFaScheduleBean obj = null;
     if (empList != null && empList.size() > 0) {
     obj = new GisAndFaScheduleBean();
     for (int i = 0; i < empList.size(); i++) {
     obj = (GisAndFaScheduleBean) empList.get(i);
     total = total + Integer.parseInt(obj.getDeductedAmount());
     totalFig = Numtowordconvertion.convertNumber((int) total).toUpperCase();
     }
     }
     document.open();
     Font hdrTextFont = new Font(Font.FontFamily.TIMES_ROMAN, 10f, Font.BOLD, BaseColor.BLACK);
     Font textFont = new Font(Font.FontFamily.TIMES_ROMAN, 8.4f, Font.NORMAL, BaseColor.BLACK);
     Font bigTextFont = new Font(Font.FontFamily.TIMES_ROMAN, 8.6f, Font.NORMAL, BaseColor.BLACK);
     Font boldTextFont = new Font(Font.FontFamily.TIMES_ROMAN, 8.6f, Font.BOLD, BaseColor.BLACK);
     Font f1 = new Font();
     f1.setSize(10);
     f1.setFamily("Times New Roman");
     f1.setStyle(Font.BOLD);

     Font f2 = new Font();
     f2.setSize(10);
     f2.setFamily("Times New Roman");

     PdfPTable table = null;
     table = new PdfPTable(9);
     table.setWidths(new int[]{3, 15, 8, 6, 8, 6, 6, 7, 6});
     table.setWidthPercentage(100);
     PdfPCell cell = null;
     cell = new PdfPCell(new Phrase("Page No : " + pageNo, hdrTextFont));
     cell.setColspan(9);
     cell.setBorder(Rectangle.NO_BORDER);
     cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
     table.addCell(cell);

     cell = new PdfPCell(new Phrase(StringUtils.defaultString(gisAndFaBean.getReportName()), hdrTextFont));
     cell.setColspan(9);
     cell.setBorder(Rectangle.NO_BORDER);
     cell.setHorizontalAlignment(Element.ALIGN_CENTER);
     table.addCell(cell);

     cell = new PdfPCell(new Phrase(StringUtils.defaultString("FOR THE MONTH OF " + gisAndFaBean.getRecMonth() + "-" + gisAndFaBean.getRecYear()), hdrTextFont));
     cell.setColspan(9);
     cell.setBorder(Rectangle.NO_BORDER);
     cell.setHorizontalAlignment(Element.ALIGN_CENTER);
     table.addCell(cell);

     cell = new PdfPCell(new Phrase("", hdrTextFont));
     cell.setColspan(9);
     cell.setBorder(Rectangle.NO_BORDER);
     cell.setHorizontalAlignment(Element.ALIGN_CENTER);
     table.addCell(cell);

     cell = new PdfPCell(new Phrase("NAME OF THE DEPARTMENT: " + gisAndFaBean.getDeptName(), hdrTextFont));
     cell.setColspan(9);
     cell.setBorder(Rectangle.NO_BORDER);
     cell.setHorizontalAlignment(Element.ALIGN_CENTER);
     table.addCell(cell);

     cell = new PdfPCell(new Phrase("OFFICE CODE: " + gisAndFaBean.getOffName(), hdrTextFont));
     cell.setColspan(9);
     cell.setBorder(Rectangle.NO_BORDER);
     cell.setHorizontalAlignment(Element.ALIGN_CENTER);
     table.addCell(cell);

     cell = new PdfPCell(new Phrase("DESIGNATION OF DDO: " + gisAndFaBean.getDdoName(), hdrTextFont));
     cell.setColspan(9);
     cell.setBorder(Rectangle.NO_BORDER);
     cell.setHorizontalAlignment(Element.ALIGN_CENTER);
     table.addCell(cell);

     cell = new PdfPCell(new Phrase("NAME OF TREASURY: " + gisAndFaBean.getTreasuryName(), hdrTextFont));
     cell.setColspan(9);
     cell.setBorder(Rectangle.NO_BORDER);
     cell.setHorizontalAlignment(Element.ALIGN_CENTER);
     table.addCell(cell);

     cell = new PdfPCell(new Phrase("Bill No: " + gisAndFaBean.getBilldesc(), hdrTextFont));
     cell.setColspan(9);
     cell.setBorder(Rectangle.NO_BORDER);
     cell.setHorizontalAlignment(Element.ALIGN_CENTER);
     table.addCell(cell);

     document.add(table);

     table = new PdfPTable(10);
     table.setWidths(new float[]{0.5f, 3, 1.5f, 1.2f, 1.2f, 1.2f, 1.3f, 1.1f, 1.1f, 1.4f});
     table.setWidthPercentage(100);

     printHeader(table, cell, f1);

     if (empList == null || empList.size() == 0) {
     cell = new PdfPCell(new Phrase("No Matching Found", f1));
     cell.setColspan(10);
     cell.setBorder(Rectangle.NO_BORDER);
     cell.setHorizontalAlignment(Element.ALIGN_CENTER);
     table.addCell(cell);

     } else if (empList != null && empList.size() > 0) {
     Iterator itr = empList.iterator();
     GisAndFaScheduleBean ar = null;
     while (itr.hasNext()) {
     ar = (GisAndFaScheduleBean) itr.next();
     x = x + 1;
     j = j + 1;
     rowCnt++;
     cell = new PdfPCell(new Phrase(StringUtils.defaultString("" + ar.getSlno()), f2));
     //cell.setBorder(Rectangle.NO_BORDER);
     cell.setHorizontalAlignment(Element.ALIGN_CENTER);
     cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
     table.addCell(cell);
     cell = new PdfPCell(new Phrase(StringUtils.defaultString(ar.getEmpname()) + "/\n" + StringUtils.defaultString(ar.getCurDesg()), f2));
     //cell.setBorder(Rectangle.NO_BORDER);
     cell.setFixedHeight(30);
     cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
     table.addCell(cell);

     cell = new PdfPCell(new Phrase(StringUtils.defaultString(ar.getTreasuryVoucherNo()), f2));
     //cell.setBorder(Rectangle.NO_BORDER);
     cell.setHorizontalAlignment(Element.ALIGN_CENTER);
     cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
     table.addCell(cell);
     cell = new PdfPCell(new Phrase(StringUtils.defaultString(ar.getMonthdrawn()), f2));
     //cell.setBorder(Rectangle.NO_BORDER);
     cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
     cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
     table.addCell(cell);
     cell = new PdfPCell(new Phrase(StringUtils.defaultString(ar.getOriginalAmount()), f2));
     //cell.setBorder(Rectangle.NO_BORDER);
     cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
     cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
     table.addCell(cell);
     cell = new PdfPCell(new Phrase(StringUtils.defaultString(ar.getNoofInstallment()), f2));
     //cell.setBorder(Rectangle.NO_BORDER);
     cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
     cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
     table.addCell(cell);
     cell = new PdfPCell(new Phrase(StringUtils.defaultString(ar.getDeductedAmount()), f2));
     //cell.setBorder(Rectangle.NO_BORDER);
     cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
     cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
     table.addCell(cell);
     cell = new PdfPCell(new Phrase(StringUtils.defaultString(ar.getRecoveryUptoMonth()), f2));
     //cell.setBorder(Rectangle.NO_BORDER);
     cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
     cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
     table.addCell(cell);
     cell = new PdfPCell(new Phrase(StringUtils.defaultString(ar.getBalance()), f2));
     //cell.setBorder(Rectangle.NO_BORDER);
     cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
     cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
     table.addCell(cell);
     cell = new PdfPCell(new Phrase(StringUtils.defaultString(ar.getRemark()), f2));
     //cell.setBorder(Rectangle.NO_BORDER);
     cell.setHorizontalAlignment(Element.ALIGN_CENTER);
     cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
     table.addCell(cell);
     if ((rowCnt == 15) && (rowCnt != empList.size())) {
     cell = new PdfPCell(new Phrase("PAGE:" + mypage++));
     cell.setColspan(10);
     cell.setBorder(Rectangle.NO_BORDER);
     cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
     table.addCell(cell);

     document.add(table);
     document.newPage();

     table = new PdfPTable(10);
     table.setWidths(new float[]{0.5f, 3, 1.5f, 1.2f, 1.2f, 1.2f, 1.3f, 1.1f, 1.1f, 1.4f});
     table.setWidthPercentage(100);

     printHeader(table, cell, f1);
     } else if ((rowCnt < 15) && (rowCnt == empList.size())) {
     cell = new PdfPCell();
     cell.setColspan(10);
     cell.setFixedHeight(10);
     cell.setBorder(Rectangle.NO_BORDER);
     table.addCell(cell);

     cell = new PdfPCell(new Phrase("RECOVERY FOR THE MONTH OF " + StringUtils.defaultString(gisAndFaBean.getRecMonth()) + "-" + StringUtils.defaultString(gisAndFaBean.getRecYear()), f1));
     cell.setColspan(6);
     table.addCell(cell);
     cell = new PdfPCell(new Phrase(StringUtils.defaultString("" + total), f1));
     //cell.setColspan(4);
     cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
     table.addCell(cell);
     cell = new PdfPCell();
     cell.setColspan(3);
     table.addCell(cell);

     cell = new PdfPCell();
     cell.setColspan(6);
     table.addCell(cell);
     cell = new PdfPCell(new Phrase("RUPEES " + StringUtils.defaultString(totalFig) + " ONLY", f1));
     cell.setColspan(4);
     table.addCell(cell);

     cell = new PdfPCell();
     cell.setColspan(10);
     cell.setFixedHeight(50);
     cell.setBorder(Rectangle.NO_BORDER);
     table.addCell(cell);

     cell = new PdfPCell();
     cell.setColspan(5);
     cell.setBorder(Rectangle.NO_BORDER);
     table.addCell(cell);
     cell = new PdfPCell(new Phrase("Signature of DDO", f2));
     cell.setColspan(5);
     cell.setBorder(Rectangle.NO_BORDER);
     table.addCell(cell);

     cell = new PdfPCell();
     cell.setColspan(10);
     cell.setFixedHeight(10);
     cell.setBorder(Rectangle.NO_BORDER);
     table.addCell(cell);

     cell = new PdfPCell();
     cell.setColspan(5);
     cell.setBorder(Rectangle.NO_BORDER);
     table.addCell(cell);
     cell = new PdfPCell(new Phrase("Date:", f2));
     cell.setColspan(5);
     cell.setBorder(Rectangle.NO_BORDER);
     table.addCell(cell);

     //                    cell = new PdfPCell(new Phrase("PAGE:" + mypage++));
     //                    cell.setColspan(10);
     //                    cell.setBorder(Rectangle.NO_BORDER);
     //                    cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
     //                    table.addCell(cell);
     } else if (((rowCnt + 5) % 20 == 0) && (rowCnt != empList.size())) {

     cell = new PdfPCell(new Phrase("PAGE:" + mypage++));
     cell.setColspan(10);
     cell.setBorder(Rectangle.NO_BORDER);
     cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
     table.addCell(cell);

     document.add(table);
     document.newPage();

     table = new PdfPTable(10);
     table.setWidths(new float[]{0.5f, 3, 1.5f, 1.2f, 1.2f, 1.2f, 1.3f, 1.1f, 1.1f, 1.4f});
     table.setWidthPercentage(100);

     printHeader(table, cell, f1);
     } else if (((rowCnt + 5) % 20 == 0) && (rowCnt == empList.size())) {
     cell = new PdfPCell(new Phrase("PAGE:" + mypage++));
     cell.setColspan(10);
     cell.setBorder(Rectangle.NO_BORDER);
     cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
     table.addCell(cell);

     cell = new PdfPCell();
     cell.setColspan(10);
     cell.setFixedHeight(10);
     cell.setBorder(Rectangle.NO_BORDER);
     table.addCell(cell);

     cell = new PdfPCell(new Phrase("RECOVERY FOR THE MONTH OF " + StringUtils.defaultString(gisAndFaBean.getRecMonth()) + "-" + StringUtils.defaultString(gisAndFaBean.getRecYear()), f1));
     cell.setColspan(6);
     table.addCell(cell);
     cell = new PdfPCell(new Phrase(StringUtils.defaultString("" + total), f1));
     //cell.setColspan(4);
     cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
     table.addCell(cell);
     cell = new PdfPCell();
     cell.setColspan(3);
     table.addCell(cell);

     cell = new PdfPCell();
     cell.setColspan(6);
     table.addCell(cell);
     cell = new PdfPCell(new Phrase("RUPEES " + StringUtils.defaultString(totalFig) + " ONLY", f1));
     cell.setColspan(4);
     table.addCell(cell);

     cell = new PdfPCell();
     cell.setColspan(10);
     cell.setFixedHeight(30);
     cell.setBorder(Rectangle.NO_BORDER);
     table.addCell(cell);

     cell = new PdfPCell(new Phrase("PAGE:" + mypage++));
     cell.setColspan(10);
     cell.setBorder(Rectangle.NO_BORDER);
     cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
     table.addCell(cell);
     } else if (((rowCnt + 5) % 20 != 0) && (rowCnt == empList.size())) {

     cell = new PdfPCell();
     cell.setColspan(10);
     cell.setFixedHeight(10);
     cell.setBorder(Rectangle.NO_BORDER);
     table.addCell(cell);

     cell = new PdfPCell(new Phrase("RECOVERY FOR THE MONTH OF " + StringUtils.defaultString(gisAndFaBean.getRecMonth()) + "-" + StringUtils.defaultString(gisAndFaBean.getRecYear()), f1));
     cell.setColspan(6);
     table.addCell(cell);
     cell = new PdfPCell(new Phrase(StringUtils.defaultString("" + total), f1));
     //cell.setColspan(4);
     cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
     table.addCell(cell);
     cell = new PdfPCell();
     cell.setColspan(3);
     table.addCell(cell);

     cell = new PdfPCell();
     cell.setColspan(6);
     table.addCell(cell);
     cell = new PdfPCell(new Phrase("RUPEES " + StringUtils.defaultString(totalFig) + " ONLY", f1));
     cell.setColspan(4);
     table.addCell(cell);

     cell = new PdfPCell();
     cell.setColspan(10);
     cell.setFixedHeight(50);
     cell.setBorder(Rectangle.NO_BORDER);
     table.addCell(cell);

     cell = new PdfPCell();
     cell.setColspan(5);
     cell.setBorder(Rectangle.NO_BORDER);
     table.addCell(cell);
     cell = new PdfPCell(new Phrase("Signature of DDO", f2));
     cell.setColspan(5);
     cell.setBorder(Rectangle.NO_BORDER);
     table.addCell(cell);

     cell = new PdfPCell();
     cell.setColspan(10);
     cell.setFixedHeight(10);
     cell.setBorder(Rectangle.NO_BORDER);
     table.addCell(cell);

     cell = new PdfPCell();
     cell.setColspan(5);
     cell.setBorder(Rectangle.NO_BORDER);
     table.addCell(cell);
     cell = new PdfPCell(new Phrase("Date:", f2));
     cell.setColspan(5);
     cell.setBorder(Rectangle.NO_BORDER);
     table.addCell(cell);

     cell = new PdfPCell(new Phrase("PAGE:" + mypage++));
     cell.setColspan(10);
     cell.setBorder(Rectangle.NO_BORDER);
     cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
     table.addCell(cell);
     }
     }
     mypage = 1;
     rowCnt = 0;
     }
     document.add(table);

     document.close();
     } catch (Exception exp) {
     exp.printStackTrace();
     }finally{
     DataBaseFunctions.closeSqlObjects(con);
     }

     }*/
    private void printHeader(PdfPTable table, PdfPCell cell, Font f1) throws Exception {

        cell = new PdfPCell(new Phrase("Sl No", f1));
        //cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);
        cell = new PdfPCell(new Phrase("Name of the\nEmployee/\nDesignation", f1));
        //cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);
        cell = new PdfPCell(new Phrase("T.V. No. in which original adv drawn with Treasury Name", f1));
        //cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);
        cell = new PdfPCell(new Phrase("Month in which Original Advance was Drawn", f1));
        //cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);
        cell = new PdfPCell(new Phrase("Amount of Original Advance", f1));
        //cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);
        cell = new PdfPCell(new Phrase("No of Installment of recovery", f1));
        //cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);
        cell = new PdfPCell(new Phrase("Amount Deducted in the Bill", f1));
        //cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);
        cell = new PdfPCell(new Phrase("Recovery upto the Month", f1));
        //cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);
        cell = new PdfPCell(new Phrase("Balance Outstanding", f1));
        //cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);
        cell = new PdfPCell(new Phrase("Remarks", f1));
        //cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);
    }

    private void printPageFooter(PdfPTable table, PdfPCell cell, int pageTotal, Font f1) throws Exception {

        cell = new PdfPCell(new Phrase(StringUtils.repeat("-", 173), f1));
        cell.setColspan(7);
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("* Page Total * :", f1));
        cell.setColspan(2);
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);
        cell = new PdfPCell(new Phrase("", f1));
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);
        cell = new PdfPCell(new Phrase("", f1));
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);
        cell = new PdfPCell(new Phrase("", f1));
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);
        cell = new PdfPCell(new Phrase(pageTotal + "", f1));
        cell.setBorder(Rectangle.NO_BORDER);
        cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
        table.addCell(cell);
        cell = new PdfPCell(new Phrase("", f1));
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase(StringUtils.repeat("-", 173), f1));
        cell.setColspan(7);
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);

        //cell = new PdfPCell(new Phrase("In Words (Rupees "+StringUtils.upperCase(Numtowordconvertion.convertNumber(pageTotal)+" ) Only"),f1));
        cell.setColspan(7);
        cell.setBorder(Rectangle.NO_BORDER);
        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(cell);
    }

    private void printGrandTotal(String ddoname, PdfPTable table, PdfPCell cell, int total, String totalFig, Font f1) throws Exception {

        cell = new PdfPCell(new Phrase(StringUtils.repeat("-", 173), f1));
        cell.setColspan(7);
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("* Grand Total * :", f1));
        cell.setColspan(2);
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);
        cell = new PdfPCell(new Phrase("", f1));
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);
        cell = new PdfPCell(new Phrase("", f1));
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);
        cell = new PdfPCell(new Phrase("", f1));
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);
        cell = new PdfPCell(new Phrase(total + "", f1));
        cell.setBorder(Rectangle.NO_BORDER);
        cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
        table.addCell(cell);
        cell = new PdfPCell(new Phrase("", f1));
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase(StringUtils.repeat("-", 173), f1));
        cell.setColspan(7);
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);
        cell = new PdfPCell(new Phrase("RUPEES " + StringUtils.defaultString(totalFig) + " ONLY", f1));
        // cell = new PdfPCell(new Phrase("In Words (Ruppes "+StringUtils.upperCase(totalFig+" ) Only");
        cell.setColspan(7);
        cell.setBorder(Rectangle.NO_BORDER);
        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("Place : _________", f1));
        cell.setColspan(7);
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("Date : _________", f1));
        cell.setColspan(7);
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("", f1));
        cell.setColspan(7);
        cell.setFixedHeight(20);
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase(ddoname, f1));
        cell.setColspan(7);
        cell.setBorder(Rectangle.NO_BORDER);
        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase(StringUtils.repeat("-", 173), f1));
        cell.setColspan(7);
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("FOR USE IN TREASURY/BANK", f1));
        cell.setColspan(7);
        cell.setBorder(Rectangle.NO_BORDER);
        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("Name of Treasury/Bank :_________________________________________", f1));
        cell.setColspan(7);
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("Amount remitted  : ____________________Challan No., Serial No :_____________", f1));
        cell.setColspan(7);
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("Date : _________", f1));
        cell.setColspan(7);
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("Treasury Officer/Bank Agent", f1));
        cell.setColspan(7);
        cell.setBorder(Rectangle.NO_BORDER);
        cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
        table.addCell(cell);

    }

    private void printHeader1(PdfPTable table, PdfPCell cell, Font f1) throws Exception {

        cell = new PdfPCell(new Phrase("Sl No", f1));
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);
        cell = new PdfPCell(new Phrase("Name of Policy Holder", f1));
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);
        cell = new PdfPCell(new Phrase("Policy No", f1));
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);
        cell = new PdfPCell(new Phrase("Month to\nwhich Reco-\nvery Relate", f1));
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);
        cell = new PdfPCell(new Phrase("Premium", f1));
        cell.setBorder(Rectangle.NO_BORDER);
        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(cell);
        cell = new PdfPCell(new Phrase("Amt Deducted", f1));
        cell.setBorder(Rectangle.NO_BORDER);
        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(cell);
        cell = new PdfPCell(new Phrase("Remarks", f1));
        cell.setBorder(Rectangle.NO_BORDER);
        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase(StringUtils.repeat("-", 173), f1));
        cell.setColspan(7);
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("", f1));
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);
        cell = new PdfPCell(new Phrase("1", f1));
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);
        cell = new PdfPCell(new Phrase("2", f1));
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);
        cell = new PdfPCell(new Phrase("3", f1));
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);
        cell = new PdfPCell(new Phrase("4", f1));
        cell.setBorder(Rectangle.NO_BORDER);
        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(cell);
        cell = new PdfPCell(new Phrase("5", f1));
        cell.setBorder(Rectangle.NO_BORDER);
        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(cell);
        cell = new PdfPCell(new Phrase("6", f1));
        cell.setBorder(Rectangle.NO_BORDER);
        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase(StringUtils.repeat("-", 173), f1));
        cell.setColspan(7);
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);
    }

    private void printHeader(CommonReportParamBean crb, PdfPTable table, PdfPCell cell, String billdesc, int pagno, Font f1) throws Exception {

        String offname = crb.getOfficeen();

        cell = new PdfPCell(new Phrase(offname, new Font(Font.FontFamily.TIMES_ROMAN, 11, Font.BOLD)));
        cell.setColspan(7);
        cell.setBorder(Rectangle.NO_BORDER);
        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("Page: " + pagno, f1));
        cell.setColspan(7);
        cell.setBorder(Rectangle.NO_BORDER);
        cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("Bill No:", f1));
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);
        cell = new PdfPCell(new Phrase(billdesc, new Font(Font.FontFamily.TIMES_ROMAN, 9, Font.BOLD)));
        cell.setColspan(6);
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("8448-LIC Deduction Govt Employees", f1));
        cell.setColspan(7);
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("BT SL NO-7100", f1));
        cell.setColspan(7);
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("LIFE INSURANCE CORPORATION OF INDIA", f1));
        cell.setColspan(3);
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);
        cell = new PdfPCell(new Phrase("SCHEDULE FORM 'C' P A CODE NO : " + StringUtils.defaultString(crb.getPacode()), f1));
        cell.setColspan(4);
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("_________  DIVISION ", f1));
        cell.setColspan(2);
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);
        cell = new PdfPCell(new Phrase("Designation of Drawing officer :", f1));
        cell.setColspan(5);
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("", f1));
        cell.setColspan(2);
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);
        cell = new PdfPCell(new Phrase(crb.getDdoname(), f1));
        cell.setColspan(5);
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("", f1));
        cell.setColspan(7);
        cell.setFixedHeight(10);
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("Orissa State Government servant policies        (This statement in triplicate should be", f1));
        cell.setColspan(7);
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("statement showing deduction on account          completed everymonth. Two copies to be", f1));
        cell.setColspan(7);
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("of premia towords Life Insurance Corporation   sent along with the paybill and other to", f1));
        cell.setColspan(7);
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("of India policies from pay salary for :              be retained in Office along with the copy", f1));
        cell.setColspan(7);
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase(crb.getAqmonth() + "-" + crb.getAqyear() + " of pay Bill", f1));
        cell.setColspan(7);
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("Name and Address of Institution:", f1));
        cell.setColspan(7);
        cell.setBorder(Rectangle.NO_BORDER);
        cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase(offname, f1));
        cell.setColspan(7);
        cell.setBorder(Rectangle.NO_BORDER);
        cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase(StringUtils.repeat("-", 173), f1));
        cell.setColspan(7);
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("Sl No", f1));
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);
        cell = new PdfPCell(new Phrase("Name of Policy Holder", f1));
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);
        cell = new PdfPCell(new Phrase("Policy No", f1));
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);
        cell = new PdfPCell(new Phrase("Month to\nwhich Reco-\nvery Relate", f1));
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);
        cell = new PdfPCell(new Phrase("Premium", f1));
        cell.setBorder(Rectangle.NO_BORDER);
        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(cell);
        cell = new PdfPCell(new Phrase("Amt Deducted", f1));
        cell.setBorder(Rectangle.NO_BORDER);
        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(cell);
        cell = new PdfPCell(new Phrase("Remarks", f1));
        cell.setBorder(Rectangle.NO_BORDER);
        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase(StringUtils.repeat("-", 173), f1));
        cell.setColspan(7);
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("", f1));
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);
        cell = new PdfPCell(new Phrase("1", f1));
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);
        cell = new PdfPCell(new Phrase("2", f1));
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);
        cell = new PdfPCell(new Phrase("3", f1));
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);
        cell = new PdfPCell(new Phrase("4", f1));
        cell.setBorder(Rectangle.NO_BORDER);
        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(cell);
        cell = new PdfPCell(new Phrase("5", f1));
        cell.setBorder(Rectangle.NO_BORDER);
        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(cell);
        cell = new PdfPCell(new Phrase("6", f1));
        cell.setBorder(Rectangle.NO_BORDER);
        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase(StringUtils.repeat("-", 173), f1));
        cell.setColspan(7);
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);

    }

    @Override
    public void EPFSchedulePdf(PdfWriter writer, Document document, String billNo, List epfTypeList, List epfAbstractList, CommonReportParamBean crb, String totFig, double totAmt, GPFScheduleBean epfHeader) {

        ArrayList empList = new ArrayList();

        try {
            PdfPTable dTable = new PdfPTable(8);

            PdfPCell dCell = null;
            dTable.setWidths(new int[]{1, 3, 5, 3, 2, 2, 2, 3});
            dTable.setWidthPercentage(100);
            // Creating a PdfCanvas object 
            PdfContentByte canvas = writer.getDirectContent();

            //PdfPage pdfPage = pdfDoc.addNewPage();   
            Font f1 = new Font();
            f1.setSize(6.9f);
            f1.setFamily("Times New Roman");

            Font f2 = new Font();
            f2.setSize(9.1f);
            f2.setFamily("Times New Roman");
            String[] monthNames = {"JANUARY", "FEBRUARY", "MARCH", "APRIL", "MAY", "JUNE", "JULY", "AUGUST", "SEPTEMBER", "OCTOBER", "NOVEMBER", "DECEMBER"};

            Font bold = new Font(Font.FontFamily.HELVETICA, 15, Font.BOLD);
            Font bold1 = new Font(Font.FontFamily.TIMES_ROMAN, 7, Font.BOLD);

            //dataTable1.setWidths(new int[]{1, 3, 5, 3, 2, 2, 2, 3});
            //dataTable1.setWidthPercentage(100);
            if (epfTypeList != null && epfTypeList.size() > 0) {
                PdfPTable dataTable = new PdfPTable(8);
                PdfPCell dataCell = null;

                dataTable.setWidths(new int[]{1, 3, 5, 3, 3, 2, 2, 3});
                dataTable.setWidthPercentage(100);

                ScheduleHelper scHelperBean = null;
                for (int i = 0; i < epfTypeList.size(); i++) {
                    scHelperBean = (ScheduleHelper) epfTypeList.get(i);
                    //reportGpfSchedulePageHeaderPdf(document, billNo, dataTable, dataCell, scHelperBean.getGpfType(), f1, f2, crb);

                    Paragraph p1 = new Paragraph("EMPLOYEE PROVIDENT FUND", bold);
                    Paragraph p2 = new Paragraph("BILL NO: " + crb.getBilldesc(), new Font(Font.FontFamily.TIMES_ROMAN, 9.8f, Font.BOLD));
                    Paragraph p3 = new Paragraph("T.V No / Date: / " + crb.getVchNo() + "/" + crb.getVchDate(), new Font(Font.FontFamily.TIMES_ROMAN, 9.8f, Font.BOLD));
                    Paragraph p4 = new Paragraph("SCHEDULE OF : " + scHelperBean.getGpfType(), new Font(Font.FontFamily.TIMES_ROMAN, 9.8f, Font.BOLD));
                    Paragraph p5 = new Paragraph("Demand No-" + "'" + "8009" + "/_____________________- State/Centre E.P.F Withdrawals\' (Strike out which is not applicable)", f2);

                    p1.setAlignment(Element.ALIGN_CENTER);
                    p2.setAlignment(Element.ALIGN_CENTER);
                    p3.setAlignment(Element.ALIGN_CENTER);
                    p4.setAlignment(Element.ALIGN_CENTER);
                    p5.setAlignment(Element.ALIGN_CENTER);

                    Paragraph p7 = new Paragraph(crb.getOfficename(), bold1);
                    p7.setAlignment(Element.ALIGN_CENTER);
                    Paragraph p8 = new Paragraph("DEDUCTION MADE FROM THE SALARY FOR " + monthNames[crb.getAqmonth()] + " " + crb.getAqyear(), bold1);
                    p8.setAlignment(Element.ALIGN_CENTER);
                    p8.setSpacingAfter(15);

                    document.add(p1);
                    document.add(p2);
                    document.add(p3);
                    document.add(p4);
                    document.add(p5);
                    document.add(p7);
                    document.add(p8);

                    dataTable = new PdfPTable(6);

                    dataTable.setWidths(new int[]{1, 3, 5, 3, 3, 3});
                    dataTable.setWidthPercentage(100);
                    //Table Header
                    //System.out.println("Table Header");
                    dataCell = new PdfPCell(new Phrase("Sl No.", new Font(Font.FontFamily.HELVETICA, 7.2f, Font.BOLD)));
                    dataCell.setBorderWidth(0.5f);
                    dataTable.addCell(dataCell);
                    dataCell = new PdfPCell(new Phrase("ACCOUNT NO./\n"
                            + "DATE OF ENTRY\n"
                            + "INTO GOVT. SERVICE", new Font(Font.FontFamily.HELVETICA, 7.2f, Font.BOLD)));
                    dataCell.setBorderWidth(0.5f);
                    dataTable.addCell(dataCell);

                    dataCell = new PdfPCell(new Phrase("NAME OF THE SUBSCRIBER/\n"
                            + "DESIGNATION", new Font(Font.FontFamily.HELVETICA, 7.2f, Font.BOLD)));
                    dataCell.setBorderWidth(0.5f);
                    dataTable.addCell(dataCell);

                    dataCell = new PdfPCell(new Phrase("BASIC PAY/ "
                            + "GRADE PAY / "
                            + "SCALE OF PAY", new Font(Font.FontFamily.HELVETICA, 7.2f, Font.BOLD)));
                    dataCell.setBorderWidth(0.5f);
                    dataTable.addCell(dataCell);

                    dataCell = new PdfPCell(new Phrase("MONTHLY SUBSCRIPTION", new Font(Font.FontFamily.HELVETICA, 7.2f, Font.BOLD)));
                    dataCell.setBorderWidth(0.5f);
                    dataTable.addCell(dataCell);

                    dataCell = new PdfPCell(new Phrase("REMARKS\n"
                            + "D.O.B and D.O.R.", new Font(Font.FontFamily.HELVETICA, 7.2f, Font.BOLD)));
                    dataCell.setBorderWidth(0.5f);
                    dataTable.addCell(dataCell);

                    dataCell = new PdfPCell(new Phrase("1", new Font(Font.FontFamily.TIMES_ROMAN, 7, Font.BOLD)));
                    dataCell.setBorder(Rectangle.NO_BORDER);
                    dataCell.setHorizontalAlignment(Element.ALIGN_CENTER);
                    dataTable.addCell(dataCell);
                    dataCell = new PdfPCell(new Phrase("2", new Font(Font.FontFamily.TIMES_ROMAN, 7, Font.BOLD)));
                    dataCell.setBorder(Rectangle.NO_BORDER);
                    dataCell.setHorizontalAlignment(Element.ALIGN_CENTER);
                    dataTable.addCell(dataCell);
                    dataCell = new PdfPCell(new Phrase("3", new Font(Font.FontFamily.TIMES_ROMAN, 7, Font.BOLD)));
                    dataCell.setBorder(Rectangle.NO_BORDER);
                    dataCell.setHorizontalAlignment(Element.ALIGN_CENTER);
                    dataTable.addCell(dataCell);
                    dataCell = new PdfPCell(new Phrase("4", new Font(Font.FontFamily.TIMES_ROMAN, 7, Font.BOLD)));
                    dataCell.setBorder(Rectangle.NO_BORDER);
                    dataCell.setHorizontalAlignment(Element.ALIGN_CENTER);
                    dataTable.addCell(dataCell);
                    dataCell = new PdfPCell(new Phrase("5", new Font(Font.FontFamily.TIMES_ROMAN, 7, Font.BOLD)));
                    dataCell.setBorder(Rectangle.NO_BORDER);
                    dataCell.setHorizontalAlignment(Element.ALIGN_CENTER);
                    dataTable.addCell(dataCell);
                    dataCell = new PdfPCell(new Phrase("6", new Font(Font.FontFamily.TIMES_ROMAN, 7, Font.BOLD)));
                    dataCell.setBorder(Rectangle.NO_BORDER);
                    dataCell.setHorizontalAlignment(Element.ALIGN_CENTER);
                    dataTable.addCell(dataCell);

                    canvas.closePathStroke();

                    empList = scHelperBean.getHelperList();

                    if (empList != null && empList.size() > 0) {
                        GPFScheduleBean gpfBean = null;
                        int releaseTot = 0;
                        String releaseTotFig = null;
                        for (int j = 0; j < empList.size(); j++) {
                            gpfBean = (GPFScheduleBean) empList.get(j);

                            dataCell = new PdfPCell(new Phrase(Integer.toString(j + 1), new Font(Font.FontFamily.HELVETICA, 6)));
                            //dataCell.setBorder(Rectangle.NO_BORDER);
                            dataCell.setBorder(Rectangle.BOTTOM | Rectangle.TOP);
                            dataCell.setHorizontalAlignment(Element.ALIGN_CENTER);
                            dataTable.addCell(dataCell);
                            dataCell = new PdfPCell(new Phrase(StringUtils.defaultString(gpfBean.getAccountNo()) + " \n " + StringUtils.defaultString(gpfBean.getDateOfEntry()), new Font(Font.FontFamily.HELVETICA, 6.9f)));
                            dataCell.setBorder(Rectangle.BOTTOM | Rectangle.TOP);
                            dataCell.setHorizontalAlignment(Element.ALIGN_CENTER);
                            dataTable.addCell(dataCell);
                            dataCell = new PdfPCell(new Phrase(StringUtils.defaultString(gpfBean.getEmpName()) + " \n " + StringUtils.defaultString(gpfBean.getDesignation()), new Font(Font.FontFamily.HELVETICA, 6.9f)));
                            dataCell.setBorder(Rectangle.BOTTOM | Rectangle.TOP);
                            dataCell.setHorizontalAlignment(Element.ALIGN_CENTER);
                            dataTable.addCell(dataCell);
                            dataCell = new PdfPCell(new Phrase(StringUtils.defaultString(gpfBean.getBasicPay()) + " \n " + StringUtils.defaultString(gpfBean.getGradePay()) + " \n " + StringUtils.defaultString(gpfBean.getScaleOfPay()), new Font(Font.FontFamily.HELVETICA, 6.9f)));
                            dataCell.setBorder(Rectangle.BOTTOM | Rectangle.TOP);
                            dataCell.setHorizontalAlignment(Element.ALIGN_CENTER);
                            dataTable.addCell(dataCell);
                            dataCell = new PdfPCell(new Phrase(StringUtils.defaultString(Integer.toString(gpfBean.getMonthlySub())), new Font(Font.FontFamily.HELVETICA, 6.9f)));
                            dataCell.setBorder(Rectangle.BOTTOM | Rectangle.TOP);
                            dataCell.setHorizontalAlignment(Element.ALIGN_CENTER);
                            dataTable.addCell(dataCell);
                            dataCell = new PdfPCell(new Phrase(StringUtils.defaultString(gpfBean.getDob()) + " \n " + StringUtils.defaultString(gpfBean.getDor()), new Font(Font.FontFamily.HELVETICA, 6.9f)));
                            dataCell.setBorder(Rectangle.BOTTOM | Rectangle.TOP);
                            dataCell.setHorizontalAlignment(Element.ALIGN_CENTER);
                            dataTable.addCell(dataCell);

                            releaseTot = releaseTot + gpfBean.getTotalReleased();
                            releaseTotFig = Numtowordconvertion.convertNumber((int) gpfBean.getTotalReleased());

                            //reportGpfSchedulePageHeaderPdf(document, billNo, dataTable, dataCell, scHelperBean.getGpfType(), f1, f2, crb);
                        }

                        dataCell = new PdfPCell(new Phrase(""));
                        dataCell.setColspan(3);
                        dataCell.setBorder(Rectangle.BOTTOM | Rectangle.TOP);
                        dataTable.addCell(dataCell);
                        dataCell = new PdfPCell(new Phrase("Total :" + releaseTot, new Font(Font.FontFamily.HELVETICA, 7.5f)));
                        dataCell.setBorder(Rectangle.BOTTOM | Rectangle.TOP);
                        dataCell.setHorizontalAlignment(Element.ALIGN_CENTER);
                        dataCell.setColspan(3);
                        dataTable.addCell(dataCell);

                        dataCell = new PdfPCell(new Phrase(""));
                        dataCell.setColspan(3);
                        dataCell.setBorder(Rectangle.NO_BORDER);
                        dataTable.addCell(dataCell);
                        dataCell = new PdfPCell(new Phrase("(RUPEES " + releaseTotFig + ") ONLY", new Font(Font.FontFamily.HELVETICA, 7.5f)));
                        dataCell.setColspan(3);
                        dataCell.setBorder(Rectangle.NO_BORDER);
                        dataCell.setHorizontalAlignment(Element.ALIGN_CENTER);
                        dataTable.addCell(dataCell);

                        PdfPCell blankRow = new PdfPCell(new Phrase(""));
                        blankRow.setFixedHeight(15f);
                        blankRow.setColspan(6);
                        blankRow.setBorder(Rectangle.NO_BORDER);
                        dataTable.addCell(blankRow);

                        dataCell = new PdfPCell(new Phrase(""));
                        dataCell.setColspan(3);
                        dataCell.setBorder(Rectangle.NO_BORDER);
                        dataTable.addCell(dataCell);
                        dataCell = new PdfPCell(new Phrase("Signature of the D.D.O. with Seal\n\n"
                                + epfHeader.getDdoDesg() + " , " + epfHeader.getOfficeName() + "\n\n"
                                + "Date: ", new Font(Font.FontFamily.HELVETICA, 7.5f)));
                        dataCell.setBorder(Rectangle.NO_BORDER);
                        dataCell.setColspan(3);
                        dataCell.setHorizontalAlignment(Element.ALIGN_CENTER);
                        dataTable.addCell(dataCell);

                    }

                    document.add(dataTable);

                    Paragraph p10 = new Paragraph("Certified that all particulars of recovery have been correctly furnished as per the instruction issued in respect of preparation of E.P.F. Schedules.\n"
                            + "Voucher No.................................... ", new Font(Font.FontFamily.HELVETICA, 6.5f));
                    p10.setAlignment(Element.ALIGN_LEFT);
                    p10.setSpacingAfter(20);
                    p10.setSpacingBefore(30);
                    p10.setTabSettings(new TabSettings(400f));
                    p10.add(Chunk.TABBING);
                    p10.add(new Chunk("Date of Encashment:// "));

                    Paragraph p11 = new Paragraph("FOR USE IN AUDIT OFFICE", new Font(Font.FontFamily.TIMES_ROMAN, 9f, Font.BOLD));
                    p11.setAlignment(Element.ALIGN_CENTER);

                    Paragraph p12 = new Paragraph("Certified that the name and account No. of individual deduction and total shown in column - 6 have been checked with ref. to the bill vide page 224 of the Audit Manual.\n"
                            + "Certified that the rates of pay shown in column - 4 have been verified with amount drawn in this bill.", new Font(Font.FontFamily.HELVETICA, 7f));
                    p12.setAlignment(Element.ALIGN_LEFT);
                    p12.setSpacingAfter(3);
                    p12.setSpacingBefore(15);
                    p12.setTabSettings(new TabSettings(450f));
                    p12.add(Chunk.TABBING);
                    p12.add(new Chunk("AUDITOR", new Font(Font.FontFamily.TIMES_ROMAN, 7f, Font.BOLD)));

                    //document.add(p9);
                    document.add(p10);
                    document.add(p11);
                    document.add(p12);

                    //document.add(dataTable);
                    document.newPage();

                }

                ///------------------------------------------------GPF ABSTRACT----------------------------------------------
                Paragraph p13 = new Paragraph("EPF ABSTRACT", new Font(Font.FontFamily.TIMES_ROMAN, 13.5f, Font.BOLD));
                Paragraph p14 = new Paragraph("BILL NO: " + crb.getBilldesc(), new Font(Font.FontFamily.TIMES_ROMAN, 10.5f, Font.BOLD));
                Paragraph p15 = new Paragraph("T.V No / Date: / " + crb.getVchNo() + "/" + crb.getVchDate(), new Font(Font.FontFamily.TIMES_ROMAN, 10.5f, Font.BOLD));
                p13.setAlignment(Element.ALIGN_CENTER);
                p14.setAlignment(Element.ALIGN_CENTER);
                p15.setAlignment(Element.ALIGN_CENTER);
                p15.setSpacingAfter(15);

                document.add(p13);
                document.add(p14);
                document.add(p15);

                PdfPTable dataTable1 = new PdfPTable(2);
                PdfPCell dataCell1 = null;

                dataTable1.setWidths(new int[]{5, 5});
                dataTable1.setWidthPercentage(100);
                dataTable1.setTotalWidth(500);

                dataCell1 = new PdfPCell(new Phrase("PF CODE", new Font(Font.FontFamily.HELVETICA, 10.5f, Font.BOLD)));
                dataCell1.setBorderWidth(0.5f);
                dataCell1.setHorizontalAlignment(Element.ALIGN_CENTER);
                dataCell1.setFixedHeight(20f);
                dataTable1.addCell(dataCell1);
                dataCell1 = new PdfPCell(new Phrase("TOTAL AMOUNT", new Font(Font.FontFamily.HELVETICA, 10.5f, Font.BOLD)));
                dataCell1.setBorderWidth(0.5f);
                dataCell1.setHorizontalAlignment(Element.ALIGN_CENTER);
                dataCell1.setFixedHeight(20f);
                dataTable1.addCell(dataCell1);

                if (epfAbstractList != null && epfAbstractList.size() > 0) {
                    GPFScheduleBean gpfBean = null;
                    for (int k = 0; k < epfAbstractList.size(); k++) {
                        gpfBean = (GPFScheduleBean) epfAbstractList.get(k);

                        dataCell1 = new PdfPCell(new Phrase(gpfBean.getGpfType(), new Font(Font.FontFamily.HELVETICA, 9.2f)));
                        dataCell1.setBorderWidth(0.5f);
                        dataCell1.setVerticalAlignment(Element.ALIGN_MIDDLE);
                        dataCell1.setHorizontalAlignment(Element.ALIGN_CENTER);
                        dataCell1.setFixedHeight(20f);
                        dataTable1.addCell(dataCell1);
                        dataCell1 = new PdfPCell(new Phrase(gpfBean.getTotalAmount(), new Font(Font.FontFamily.HELVETICA, 9.2f)));
                        dataCell1.setBorderWidth(0.5f);
                        dataCell1.setVerticalAlignment(Element.ALIGN_MIDDLE);
                        dataCell1.setHorizontalAlignment(Element.ALIGN_CENTER);
                        dataCell1.setFixedHeight(20f);
                        dataTable1.addCell(dataCell1);
                    }
                    dataCell1 = new PdfPCell(new Phrase(""));
                    dataCell1.setColspan(1);
                    dataCell1.setBorder(Rectangle.BOTTOM | Rectangle.TOP);
                    dataTable1.addCell(dataCell1);
                    dataCell1 = new PdfPCell(new Phrase("Total : " + totAmt, new Font(Font.FontFamily.HELVETICA, 9.8f, Font.BOLD)));
                    dataCell1.setFixedHeight(20f);
                    dataCell1.setBorder(Rectangle.BOTTOM | Rectangle.TOP);
                    dataCell1.setHorizontalAlignment(Element.ALIGN_CENTER);

                    dataTable1.addCell(dataCell1);

                    dataCell1 = new PdfPCell(new Phrase(""));
                    dataCell1.setColspan(1);
                    dataCell1.setBorder(Rectangle.NO_BORDER);
                    dataTable1.addCell(dataCell1);
                    dataCell1 = new PdfPCell(new Phrase("(RUPEES " + totFig + ")ONLY", new Font(Font.FontFamily.HELVETICA, 9.2f)));
                    dataCell1.setBorder(Rectangle.NO_BORDER);
                    dataCell1.setHorizontalAlignment(Element.ALIGN_CENTER);
                    dataTable1.addCell(dataCell1);

                    PdfPCell blankRow = new PdfPCell(new Phrase(""));
                    blankRow.setFixedHeight(20f);
                    blankRow.setColspan(2);
                    blankRow.setBorder(Rectangle.NO_BORDER);
                    dataTable1.addCell(blankRow);

                    dataCell1 = new PdfPCell(new Phrase(""));
                    dataCell1.setColspan(1);
                    dataCell1.setBorder(Rectangle.NO_BORDER);
                    dataTable1.addCell(dataCell1);
                    dataCell1 = new PdfPCell(new Phrase("Signature of the D.D.O. with Seal\n\n"
                            + epfHeader.getDdoDesg() + " , " + epfHeader.getOfficeName() + "\n\n"
                            + "Date: ", new Font(Font.FontFamily.HELVETICA, 8.5f)));
                    dataCell1.setBorder(Rectangle.NO_BORDER);
                    dataCell1.setHorizontalAlignment(Element.ALIGN_CENTER);
                    dataTable1.addCell(dataCell1);
                }

                document.add(dataTable1);

                Paragraph p20 = new Paragraph(" ");
                p20.setSpacingAfter(15);
                p20.setSpacingBefore(35);

                Paragraph p17 = new Paragraph("Certified that all particulars of recovery have been correctly furnished as per the instruction issued in respect of preparation of G.P.F. Schedules.\n"
                        + "Voucher No.................................... ", new Font(Font.FontFamily.HELVETICA, 7));
                p17.setAlignment(Element.ALIGN_LEFT);
                //p17.setSpacingAfter(10);
                p17.setSpacingBefore(20);
                p17.setTabSettings(new TabSettings(400f));
                p17.add(Chunk.TABBING);
                p17.add(new Chunk("Date of Encashment:// "));

                Paragraph p18 = new Paragraph("FOR USE IN AUDIT OFFICE", new Font(Font.FontFamily.TIMES_ROMAN, 7.5f, Font.BOLD));
                p18.setAlignment(Element.ALIGN_CENTER);

                Paragraph p19 = new Paragraph("Certified that the name and account No. of individual deduction and total shown in column - 6 have been checked with ref. to the bill vide page 224 of the Audit Manual.\n"
                        + "Certified that the rates of pay shown in column - 4 have been verified with amount drawn in this bill.", new Font(Font.FontFamily.HELVETICA, 7));
                p19.setAlignment(Element.ALIGN_LEFT);
                p19.setSpacingAfter(3);
                p19.setSpacingBefore(15);
                p19.setTabSettings(new TabSettings(450f));
                p19.add(Chunk.TABBING);
                p19.add(new Chunk("AUDITOR", new Font(Font.FontFamily.TIMES_ROMAN, 7.5f, Font.BOLD)));

                document.add(p17);
                document.add(p18);
                document.add(p19);
                document.add(p20);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    @Override
    public List getEPFScheduleTypeList(String billno, int aqmonth, int aqyear) {

        Connection con = null;

        PreparedStatement pst = null;
        ResultSet rs = null;

        ArrayList gpfTypeList = new ArrayList();

        ScheduleHelper scHelperBean = null;

        int pageno = 0;
        try {
            con = this.repodataSource.getConnection();

            int releaseTot = 0;
            String releaseTotFig = null;

            String gpfQry = "SELECT GPF_TYPE FROM AQ_MAST WHERE BILL_NO=? AND GPF_TYPE IS NOT NULL AND aq_month=? AND aq_year=? GROUP BY GPF_TYPE ORDER BY GPF_TYPE";
            pst = con.prepareStatement(gpfQry);
            pst.setInt(1, Integer.parseInt(billno));
            pst.setInt(2, aqmonth);
            pst.setInt(3, aqyear);
            rs = pst.executeQuery();

            while (rs.next()) {
                pageno += 1;
                releaseTot = 0;
                scHelperBean = new ScheduleHelper();
                String gpfType = rs.getString("GPF_TYPE");
                scHelperBean.setGpfType(gpfType);
                scHelperBean.setPageheaderparent(reportPageHeader(con, "GPF", gpfType, billno, null) + "");
                ArrayList al = getEmpEPFDetails(gpfType, billno, con, scHelperBean);
                scHelperBean.setHelperList(al);

                GPFScheduleBean obj1 = null;
                if (al != null && al.size() > 0) {
                    obj1 = new GPFScheduleBean();
                    for (int i = 0; i < al.size(); i++) {
                        obj1 = (GPFScheduleBean) al.get(i);
                        releaseTot = releaseTot + obj1.getTotalReleased();
                        releaseTotFig = Numtowordconvertion.convertNumber((int) releaseTot);
                    }
                }
                scHelperBean.setReleaseTot(releaseTot);
                scHelperBean.setReleaseTotFig(releaseTotFig);
                scHelperBean.setEmpNo(scHelperBean.getHelperList().size());
                scHelperBean.setPagebreakparent("<input type=\"button\" name=\"pagebreak1\" style=\"page-break-before: always;width: 0;height: 0\"/>");
                gpfTypeList.add(scHelperBean);
            }

        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            DataBaseFunctions.closeSqlObjects(rs, pst);
            DataBaseFunctions.closeSqlObjects(con);
        }
        return gpfTypeList;
    }

    private ArrayList getEmpEPFDetails(String gpfType, String billNo, Connection con, ScheduleHelper scHelperBean) throws Exception {

        ArrayList empGpfList = new ArrayList();

        PreparedStatement pst = null;
        ResultSet rs = null;

        PreparedStatement pstmonthlySub = null;
        ResultSet rsmonthlySub = null;

        PreparedStatement pstgpfinst = null;
        ResultSet rsgpfinst = null;

        PreparedStatement pstotherdeposits = null;
        ResultSet rsotherdeposits = null;

        int slno = 0;
        GPFScheduleBean gpfBean = null;

        String noofinst = "";
        int releasedAmount = 0;
        int total = 0;
        String dob = null;
        String dob1 = null;
        String dob2 = null;
        String dob3 = null;
        String dob4 = null;
        String dos = null;
        String dos1 = null;
        String dos2 = null;
        String dos3 = null;
        String dos4 = null;
        String doe = null;
        String doe1 = null;
        String doe2 = null;
        String doe3 = null;
        String doe4 = null;
        int gpfinstl = 0;
        String aqDtlsTbl = "";

        //int pageno = scHelperBean.getPageno();
        try {
            aqDtlsTbl = getAqDtlsTableName(billNo);

            String monthlySubQuery = "SELECT AD_AMT MONTHLYSUB FROM " + aqDtlsTbl + " WHERE AD_TYPE='D' AND EMP_CODE=? AND AD_CODE='EPF' AND AQSL_NO=? AND AQ_YEAR=? AND AQ_MONTH=?";
            pstmonthlySub = con.prepareStatement(monthlySubQuery);

            String gpfQuery = "SELECT EMP_MAST.GPF_NO,EMP_MAST.DOE_GOV,EMP_MAST.DOB,EMP_MAST.DOS,AQ_MAST.EMP_CODE,AQ_MAST.EMP_NAME,AQ_MAST.CUR_DESG,"
                    + " AQ_MAST.BANK_ACC_NO,AQ_MAST.CUR_BASIC,GP,AQ_MAST.PAY_SCALE,AQ_MAST.AQSL_NO,POST_SL_NO,AQ_YEAR,AQ_MONTH from AQ_MAST"
                    + " LEFT OUTER JOIN EMP_MAST ON AQ_MAST.EMP_CODE=EMP_MAST.EMP_ID WHERE GPF_TYPE=? AND BILL_NO=? ORDER BY SUBSTR(EMP_MAST.GPF_NO,"
                    + " LENGTH(getgpfseries(EMP_MAST.GPF_NO))+1)";
            pst = con.prepareStatement(gpfQuery);
            pst.setString(1, gpfType);
            pst.setInt(2, Integer.parseInt(billNo));
            rs = pst.executeQuery();
            while (rs.next()) {
                releasedAmount = 0;
                gpfinstl = 0;
                gpfBean = new GPFScheduleBean();
                if (rs.getString("EMP_NAME") != null && !rs.getString("EMP_NAME").equals("")) {
                    slno++;

                    gpfBean.setSlno(slno);
                    gpfBean.setEmpName(rs.getString("EMP_NAME"));
                    gpfBean.setDesignation(rs.getString("CUR_DESG"));
                    gpfBean.setAccountNo(rs.getString("GPF_NO"));
                    gpfBean.setBasicPay(rs.getString("CUR_BASIC"));
                    gpfBean.setGradePay(rs.getString("GP"));
                    gpfBean.setScaleOfPay(rs.getString("PAY_SCALE"));

                    if (rs.getString("DOE_GOV") != null && !rs.getString("DOE_GOV").trim().equals("")) {
                        doe = rs.getString("DOE_GOV");
                        doe1 = doe.substring(0, 4);
                        doe2 = doe.substring(5, 7);
                        doe3 = doe.substring(8, 10);
                        doe4 = doe3 + "/" + doe2 + "/" + doe1;
                        gpfBean.setDateOfEntry(doe4);
                    }
                    if (rs.getString("DOB") != null && !rs.getString("DOB").trim().equals("")) {
                        dob = rs.getString("DOB");
                        dob1 = dob.substring(0, 4);
                        dob2 = dob.substring(5, 7);
                        dob3 = dob.substring(8, 10);
                        dob4 = dob3 + "/" + dob2 + "/" + dob1;
                        gpfBean.setDob(dob4);
                    }
                    if (rs.getString("DOS") != null && !rs.getString("DOS").trim().equals("")) {
                        dos = rs.getString("DOS");
                        dos1 = dos.substring(0, 4);
                        dos2 = dos.substring(5, 7);
                        dos3 = dos.substring(8, 10);
                        dos4 = dos3 + "/" + dos2 + "/" + dos1;
                        gpfBean.setDor(dos4);
                    }

                    pstmonthlySub.setString(1, rs.getString("EMP_CODE"));
                    pstmonthlySub.setString(2, rs.getString("AQSL_NO"));
                    pstmonthlySub.setInt(3, rs.getInt("AQ_YEAR"));
                    pstmonthlySub.setInt(4, rs.getInt("AQ_MONTH"));
                    rsmonthlySub = pstmonthlySub.executeQuery();
                    if (rsmonthlySub.next()) {
                        gpfBean.setMonthlySub(rsmonthlySub.getInt("MONTHLYSUB"));
                    }

                    releasedAmount = gpfBean.getMonthlySub();
                    gpfBean.setTotalReleased(releasedAmount);
                    total += releasedAmount;

                    if (slno % 8 == 0) {
                        gpfBean.setCarryForward(reportCarryForward(total, "GPF") + "");

                        gpfBean.setPagebreakchild("<input type=\"button\" name=\"pagebreak1\" style=\"page-break-before: always;width: 0;height: 0\"/>");
                        gpfBean.setPageHeaderTable(reportTableHeader("GPF") + "");
                        gpfBean.setBroughtForward(reportBroughtForward(total, "GPF") + "");
                    } else {
                        gpfBean.setCarryForward("");
                        gpfBean.setPagebreakchild("");
                        gpfBean.setPageHeaderTable("");
                        gpfBean.setBroughtForward("");
                    }
                    //if (total > 0) {
                    empGpfList.add(gpfBean);
                    //}
                }
                if (total > 0) {
                    gpfBean.setAmountInWords(Numtowordconvertion.convertNumber((int) total).toUpperCase());
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            DataBaseFunctions.closeSqlObjects(rsmonthlySub, rsgpfinst, rsotherdeposits);
            DataBaseFunctions.closeSqlObjects(pstmonthlySub, pstgpfinst, pstotherdeposits);
        }
        return empGpfList;
    }

    @Override
    public List getEPFScheduleAbstractList(String billno, int aqmonth, int aqyear) {

        Connection con = null;

        PreparedStatement pst = null;
        ResultSet rs = null;

        ArrayList gpfAbstractList = new ArrayList();
        GPFScheduleBean gpfBean = null;
        String aqDtlsTbl = "";

        try {
            con = this.repodataSource.getConnection();

            aqDtlsTbl = getAqDtlsTableName(billno);
            String gpfAbstQry1 = "SELECT gpf_type, sum(ad_amt) amt FROM AQ_MAST AM INNER JOIN " + aqDtlsTbl + " AD on AM.aqsl_no = AD.aqsl_no WHERE BILL_NO='" + billno + "' "
                    + " AND AM.aq_month=" + aqmonth + " AND AM.aq_year=" + aqyear + " AND AD_CODE='EPF' group by gpf_type order by gpf_type";
            pst = con.prepareStatement(gpfAbstQry1);
            rs = pst.executeQuery();
            while (rs.next()) {
                gpfBean = new GPFScheduleBean();

                gpfBean.setGpfType(rs.getString("GPF_TYPE"));
                gpfBean.setTotalAmount(rs.getString("amt"));

                gpfAbstractList.add(gpfBean);
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            DataBaseFunctions.closeSqlObjects(rs, pst);
            DataBaseFunctions.closeSqlObjects(con);
        }
        return gpfAbstractList;
    }

    @Override
    public void arrearBillFrontPagePDF(Document document, CommonReportParamBean crb, String billNo, BillChartOfAccount billChartOfAccount, List deductionList, List allowanceList, double allowanceAmt, double deductAmt, double netAmt, String payHead) {

        BillFrontPageBean bfpbean = new BillFrontPageBean();

        Schedule obj = null;

        String billMonth = "";

        String monthName1 = "";
        String monthName2 = "";
        int year1;
        int year2;

        try {
            getBenRefNo(bfpbean, billNo);
            getDescriptionDetails(bfpbean, billNo);

            monthName1 = CommonFunctions.getMonthAsString(crb.getFromMonth() - 1);
            year1 = crb.getFromYear();
            monthName2 = CommonFunctions.getMonthAsString(crb.getToMonth() - 1);
            year2 = crb.getToYear();

            billMonth = monthName1 + "-" + year1 + " to " + monthName2 + "-" + year2;

            Font f1 = new Font();
            f1.setSize(8.5f);
            f1.setFamily("Times New Roman");

            //start of first table
            PdfPTable maintable = new PdfPTable(4);
            maintable.setWidths(new int[]{3, 2, 2, 1});
            maintable.setWidthPercentage(100);

            PdfPCell maincell = null;

            //START OF FIRST MAIN ROW
            maincell = new PdfPCell(new Phrase("Schedule LIII - Form No. 188", new Font(Font.FontFamily.TIMES_ROMAN, 9, Font.BOLD)));
            maincell.setBorder(Rectangle.NO_BORDER);
            maintable.addCell(maincell);

            maincell = new PdfPCell(new Phrase(StringUtils.defaultString(billChartOfAccount.getDdoName()), f1));
            //maincell.setBorder(Rectangle.NO_BORDER);
            maincell.setHorizontalAlignment(Element.ALIGN_CENTER);
            maintable.addCell(maincell);

            maincell = new PdfPCell(new Phrase("Bill No: " + StringUtils.defaultString(billChartOfAccount.getBilldesc()), new Font(Font.FontFamily.TIMES_ROMAN, 9, Font.BOLD)));
            maincell.setBorder(Rectangle.NO_BORDER);
            maincell.setHorizontalAlignment(Element.ALIGN_CENTER);
            maintable.addCell(maincell);

            maincell = new PdfPCell(new Phrase("P", new Font(Font.FontFamily.TIMES_ROMAN, 30, Font.NORMAL)));
            maincell.setRowspan(3);
            maincell.setBorder(Rectangle.NO_BORDER);
            maintable.addCell(maincell);

            maincell = new PdfPCell(new Phrase("Detailed Pay Bill of Permanent/Temporary Establishment of the " + StringUtils.defaultString(billChartOfAccount.getOffName()), new Font(Font.FontFamily.TIMES_ROMAN, 7, Font.NORMAL)));
            maincell.setColspan(2);
            maincell.setBorder(Rectangle.NO_BORDER);
            maintable.addCell(maincell);

            maincell = new PdfPCell(new Phrase("(O.T.C.Form No.22)", new Font(Font.FontFamily.TIMES_ROMAN, 7, Font.BOLD)));
            maincell.setBorder(Rectangle.NO_BORDER);
            maincell.setHorizontalAlignment(Element.ALIGN_CENTER);
            maintable.addCell(maincell);

            /*maincell = new PdfPCell(new Phrase("",f1));
             maincell.setBorder(Rectangle.NO_BORDER);
             maintable.addCell(maincell);*/
            maincell = new PdfPCell(new Phrase("for the month of " + billMonth, new Font(Font.FontFamily.TIMES_ROMAN, 7, Font.NORMAL)));
            maincell.setBorder(Rectangle.NO_BORDER);
            maintable.addCell(maincell);

            maincell = new PdfPCell(new Phrase("", f1));
            maincell.setBorder(Rectangle.NO_BORDER);
            maintable.addCell(maincell);

            maincell = new PdfPCell(new Phrase("District : " + StringUtils.defaultString(billChartOfAccount.getDistrict()), new Font(Font.FontFamily.TIMES_ROMAN, 6, Font.NORMAL)));
            maincell.setColspan(2);
            maincell.setBorder(Rectangle.NO_BORDER);
            maintable.addCell(maincell);

            maincell = new PdfPCell();
            maincell.setBorder(Rectangle.NO_BORDER);
            maintable.addCell(maincell);
            maincell = new PdfPCell();

            maincell.setBorder(Rectangle.NO_BORDER);
            maintable.addCell(maincell);

            maincell = new PdfPCell(new Phrase("Ben Ref No : " + StringUtils.defaultString(billChartOfAccount.getBenRefNo()), new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.BOLD)));
            maincell.setColspan(2);
            maincell.setBorder(Rectangle.NO_BORDER);
            maintable.addCell(maincell);

            maincell = new PdfPCell();
            maincell.setBorder(Rectangle.NO_BORDER);
            maintable.addCell(maincell);

            if (billChartOfAccount.getBillType() != null && !billChartOfAccount.getBillType().equals("22")) {
                if (billChartOfAccount.getTokenNo() == null || billChartOfAccount.getTokenNo().equals("")) {
                    //maincell = new PdfPCell(new Phrase("DRAFT", new Font(Font.FontFamily.TIMES_ROMAN, 18, Font.BOLD)));
                    maincell = new PdfPCell();
                    maincell.setBorder(Rectangle.NO_BORDER);
                    maintable.addCell(maincell);
                } else {
                    maincell = new PdfPCell();
                    maincell.setBorder(Rectangle.NO_BORDER);
                    maintable.addCell(maincell);
                }
            } else {
                maincell = new PdfPCell();
                maincell.setBorder(Rectangle.NO_BORDER);
                maintable.addCell(maincell);
            }
            maincell = new PdfPCell(new Phrase("Token No : " + StringUtils.defaultString(billChartOfAccount.getTokenNo()), new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.BOLD)));
            maincell.setColspan(2);
            maincell.setBorder(Rectangle.NO_BORDER);
            maintable.addCell(maincell);
            //end of first table
            document.add(maintable);
            //END OF FIRST MAIN ROW

            //START OF SECOND MAIN ROW
            //start of second table
            maintable = new PdfPTable(2);
            maintable.setWidths(new float[]{6.5f, 4.5f});
            maintable.setWidthPercentage(100);

            //PdfPCell maincell = null;
            //start of Creating Space
            maincell = new PdfPCell();
            maincell.setColspan(2);
            maincell.setFixedHeight(20);
            maincell.setBorder(Rectangle.NO_BORDER);
            maintable.addCell(maincell);
            //end of Creating Space

            //start of first row under SECOND MAIN ROW
            maincell = new PdfPCell(new Phrase("Space for classification stamp of manuscript entries of classification to be filled in by Drawing Officer,"
                    + " Name of detailed heads and corresponding amounts should be recorded by him in adjacent column.", f1));
            maincell.setBorder(Rectangle.TOP | Rectangle.RIGHT);
            maintable.addCell(maincell);
            maincell = new PdfPCell(new Phrase(StringUtils.leftPad("VOUCHER\n", 50) + "of" + StringUtils.repeat(" ", 80) + "list\n" + "for", f1));
            maincell.setBorder(Rectangle.TOP);
            maincell.setHorizontalAlignment(Rectangle.ALIGN_LEFT);
            maintable.addCell(maincell);
            //end of first row under SECOND MAIN ROW
            //start of Creating Space
            maincell = new PdfPCell();
            maincell.setFixedHeight(10);
            maincell.setBorder(Rectangle.RIGHT);
            maintable.addCell(maincell);
            maincell = new PdfPCell();
            maincell.setBorder(Rectangle.BOTTOM);
            maintable.addCell(maincell);
            //end of Creating Space

            //start of second row under SECOND MAIN ROW
            //start of 1st inner table under second table for column 1
            PdfPTable innertable1 = new PdfPTable(2);
            innertable1.setWidths(new int[]{2, 2});
            innertable1.setWidthPercentage(100);

            PdfPCell innercell = null;

            innercell = new PdfPCell(new Phrase("Demand No", f1));
            innercell.setBorder(Rectangle.NO_BORDER);
            innertable1.addCell(innercell);
            innercell = new PdfPCell(new Phrase("- " + StringUtils.defaultString(billChartOfAccount.getDemandNo()), f1));
            innercell.setBorder(Rectangle.RIGHT);
            innertable1.addCell(innercell);

            innercell = new PdfPCell(new Phrase("Major Head", f1));
            innercell.setBorder(Rectangle.NO_BORDER);
            innertable1.addCell(innercell);
            innercell = new PdfPCell(new Phrase("- " + StringUtils.defaultString(billChartOfAccount.getMajorHead()), f1));
            innercell.setBorder(Rectangle.RIGHT);
            innertable1.addCell(innercell);

            innercell = new PdfPCell(new Phrase("Sub Major Head", f1));
            innercell.setBorder(Rectangle.NO_BORDER);
            innertable1.addCell(innercell);
            innercell = new PdfPCell(new Phrase("- " + StringUtils.defaultString(billChartOfAccount.getSubMajorHead()), f1));
            innercell.setBorder(Rectangle.RIGHT);
            innertable1.addCell(innercell);

            innercell = new PdfPCell(new Phrase("Minor Head", f1));
            innercell.setBorder(Rectangle.NO_BORDER);
            innertable1.addCell(innercell);
            innercell = new PdfPCell(new Phrase("- " + StringUtils.defaultString(billChartOfAccount.getMinorHead()), f1));
            innercell.setBorder(Rectangle.RIGHT);
            innertable1.addCell(innercell);

            innercell = new PdfPCell(new Phrase("Sub head", f1));
            innercell.setBorder(Rectangle.NO_BORDER);
            innertable1.addCell(innercell);
            innercell = new PdfPCell(new Phrase("- " + StringUtils.defaultString(billChartOfAccount.getSubMinorHead1()), f1));
            innercell.setBorder(Rectangle.RIGHT);
            innertable1.addCell(innercell);

            innercell = new PdfPCell(new Phrase("Detail Head", f1));
            innercell.setBorder(Rectangle.NO_BORDER);
            innertable1.addCell(innercell);
            innercell = new PdfPCell(new Phrase("- " + StringUtils.defaultString(billChartOfAccount.getSubMinorHead2()), f1));
            innercell.setBorder(Rectangle.RIGHT);
            innertable1.addCell(innercell);

            innercell = new PdfPCell(new Phrase("Plan Status", f1));
            innercell.setBorder(Rectangle.NO_BORDER);
            innertable1.addCell(innercell);
            innercell = new PdfPCell(new Phrase("- " + StringUtils.defaultString(billChartOfAccount.getPlanName()), f1));
            innercell.setBorder(Rectangle.RIGHT);
            innertable1.addCell(innercell);

            innercell = new PdfPCell(new Phrase("Charge/Voted", f1));
            innercell.setBorder(Rectangle.NO_BORDER);
            innertable1.addCell(innercell);
            innercell = new PdfPCell(new Phrase("- " + StringUtils.defaultString(billChartOfAccount.getSubMinorHead3()), f1));
            innercell.setBorder(Rectangle.RIGHT);
            innertable1.addCell(innercell);

            innercell = new PdfPCell(new Phrase("Sector", f1));
            innercell.setBorder(Rectangle.NO_BORDER);
            innertable1.addCell(innercell);
            innercell = new PdfPCell(new Phrase("- " + StringUtils.defaultString(billChartOfAccount.getSectorName()), f1));
            innercell.setBorder(Rectangle.RIGHT);
            innertable1.addCell(innercell);
            //end of 1st inner table under second table for column1    
            maincell = new PdfPCell(innertable1);
            maincell.setBorder(Rectangle.NO_BORDER);
            maintable.addCell(maincell);

            //start of second inner table under second table for column 2
            innertable1 = new PdfPTable(3);
            innertable1.setWidths(new float[]{3, 1.5f, 0.5f});
            innertable1.setWidthPercentage(100);

            //PdfPCell innercell = null;
            innercell = new PdfPCell();
            innercell.setBorder(Rectangle.TOP);
            innertable1.addCell(innercell);
            innercell = new PdfPCell(new Phrase("Rs", f1));
            innercell.setBorder(Rectangle.TOP | Rectangle.BOTTOM | Rectangle.LEFT);
            innercell.setHorizontalAlignment(Element.ALIGN_CENTER);
            innertable1.addCell(innercell);
            innercell = new PdfPCell(new Phrase("P", f1));
            innercell.setBorder(Rectangle.TOP | Rectangle.BOTTOM | Rectangle.LEFT);
            innercell.setHorizontalAlignment(Element.ALIGN_CENTER);
            innertable1.addCell(innercell);

            innercell = new PdfPCell(new Phrase("Pay of Permanent Establishment", f1));
            innercell.setBorder(Rectangle.RIGHT);
            innertable1.addCell(innercell);
            innercell = new PdfPCell();
            innercell.setBorder(Rectangle.RIGHT);
            innertable1.addCell(innercell);
            innercell = new PdfPCell();
            innercell.setBorder(Rectangle.NO_BORDER);
            innertable1.addCell(innercell);

            innercell = new PdfPCell(new Phrase("Pay of temporary Establishment", f1));
            innercell.setBorder(Rectangle.RIGHT);
            innertable1.addCell(innercell);
            innercell = new PdfPCell();
            innercell.setBorder(Rectangle.RIGHT);
            innertable1.addCell(innercell);
            innercell = new PdfPCell();
            innercell.setBorder(Rectangle.NO_BORDER);
            innertable1.addCell(innercell);

            Font f2 = new Font();
            f2.setSize(9);

            if (crb.getTypeofBill() != null && (crb.getTypeofBill().equals("ARREAR") || crb.getTypeofBill().equals("ARREAR_6"))) {
                innercell = new PdfPCell(new Phrase(payHead + StringUtils.repeat(" ", 15) + "Arrear Allowance", f2));
                innercell.setBorder(Rectangle.RIGHT);
                innertable1.addCell(innercell);
                innercell = new PdfPCell(new Phrase(allowanceAmt + "", f2));
                innercell.setBorder(Rectangle.RIGHT);
                innercell.setHorizontalAlignment(Element.ALIGN_RIGHT);
                innertable1.addCell(innercell);
                innercell = new PdfPCell();
                innercell.setBorder(Rectangle.NO_BORDER);
                innertable1.addCell(innercell);
            } else {
                if (allowanceList != null && allowanceList.size() > 0) {
                    for (int i = 0; i < allowanceList.size(); i++) {
                        obj = (Schedule) allowanceList.get(i);

                        innercell = new PdfPCell(new Phrase(obj.getObjectHead() + StringUtils.repeat(" ", 30) + StringUtils.defaultString(obj.getScheduleName()), f2));
                        innercell.setBorder(Rectangle.RIGHT);
                        innertable1.addCell(innercell);
                        innercell = new PdfPCell(new Phrase(obj.getSchAmount() + "", f2));
                        innercell.setBorder(Rectangle.RIGHT);
                        innercell.setHorizontalAlignment(Element.ALIGN_RIGHT);
                        innertable1.addCell(innercell);
                        innercell = new PdfPCell();
                        innercell.setBorder(Rectangle.NO_BORDER);
                        innertable1.addCell(innercell);
                    }
                }
            }

            innercell = new PdfPCell(new Phrase("Total", f1));
            innercell.setBorder(Rectangle.TOP | Rectangle.RIGHT);
            innercell.setHorizontalAlignment(Element.ALIGN_RIGHT);
            innertable1.addCell(innercell);
            innercell = new PdfPCell(new Phrase(StringUtils.defaultString(Double.valueOf(allowanceAmt + "").longValue() + ""), f1));
            innercell.setBorder(Rectangle.TOP | Rectangle.RIGHT | Rectangle.BOTTOM);
            innercell.setHorizontalAlignment(Element.ALIGN_RIGHT);
            innertable1.addCell(innercell);
            //innercell = new PdfPCell(new Phrase(StringUtils.defaultString(billFrForm.getTotalPaice()), f1));
            innercell = new PdfPCell();
            innercell.setBorder(Rectangle.TOP | Rectangle.BOTTOM);
            innercell.setHorizontalAlignment(Element.ALIGN_RIGHT);
            innertable1.addCell(innercell);

            maincell = new PdfPCell(innertable1);
            maincell.setBorder(Rectangle.NO_BORDER);
            maintable.addCell(maincell);
            //end of second row under SECOND MAIN ROW

            //start of third row under SECOND MAIN ROW
            maincell = new PdfPCell(new Phrase("\nN.B", f1));
            maincell.setBorder(Rectangle.RIGHT);
            maintable.addCell(maincell);

            //start of inner table
            innertable1 = new PdfPTable(3);
            innertable1.setWidths(new float[]{3, 1.5f, 0.5f});
            innertable1.setWidthPercentage(100);

            innercell = new PdfPCell(new Phrase("\nDeduct-", f1));
            innercell.setBorder(Rectangle.RIGHT);
            innertable1.addCell(innercell);

            innercell = new PdfPCell();
            innercell.setBorder(Rectangle.RIGHT);
            innertable1.addCell(innercell);

            innercell = new PdfPCell();
            innercell.setBorder(Rectangle.NO_BORDER);
            innertable1.addCell(innercell);
            //end of inner table
            maincell = new PdfPCell(innertable1);
            maincell.setBorder(Rectangle.NO_BORDER);
            maintable.addCell(maincell);
                        //start of third row under SECOND MAIN ROW

            //start of fourth row under SECOND MAIN ROW
            maincell = new PdfPCell(new Phrase(" 1.Hold over amounts should be entered in red ink in the appropriate col. 3,4,5 and 6 as the"
                    + " case may be and ignored in totalling. Leave salary the amount of which is not known, should Similarly"
                    + " be entered in red in col. 4 at the same rate as pay if he has remained on duty (S.T.R. 55).\n  2. In the Remarks column 15 should be recorded all unusal permanent events such as death,"
                    + "retirements, transfers and first appointments which find no place increment certificates or absentee"
                    + "statement.\n  3. When the increment claimed operates to carry a Government Servant Govt. to efficiency bar"
                    + "it should be supported by a declaration that the Government servants in question is fit to pass the bar"
                    + " (S.T.R. 6).\n  4. Names of Government servants in inferior services as well as those mentioned [S.T.R.55(3)]"
                    + " may be omitted from pay bill (S.T.R.55).\n  5. A red line should be drawn right across the sheet after each section of the punishment and"
                    + " under it is totals of columns 4,5,6 and 7 and 8 of the section should be shown in red ink.\n  6. In cases where the amount of leave salary is based on average pay separate statement"
                    + " showing the calculation of average pay duly attested by Drawing Officer should be attachment to this"
                    + " bill vide [S.T.R.55 (3)].\n  7. The names of men holding post substantively should be entered in order of Seniority as"
                    + " measured by substantive pay drawn and below those will be shown the parts left vacant and the men"
                    + " officiating in the vacancies.\n  8. Officiating pay should be record in the section of the bill appropriate to that in which the"
                    + " Government servant officiates and transit pay should be recorded in the same section as that in which"
                    + " the duty pay of the Government servant after transfer is recorded."
                    + "\n  9. The following abbreviations should be use in this and in all other document, submitted with"
                    + " pay bill.", f1));
            maincell.setBorder(Rectangle.RIGHT);
            maintable.addCell(maincell);

            //start of third inner table under second inner table under second table for column 2
            innertable1 = new PdfPTable(4);
            innertable1.setWidths(new float[]{2, 1, 1.5f, 0.5f});
            innertable1.setWidthPercentage(100);
            //ArrayList 
            if (deductionList != null && deductionList.size() > 0) {
                Iterator itr = deductionList.iterator();
                while (itr.hasNext()) {
                    obj = (Schedule) itr.next();
                    innercell = new PdfPCell(new Phrase(StringUtils.defaultString(obj.getObjectHead()), f2));
                    innercell.setBorder(Rectangle.NO_BORDER);
                    innertable1.addCell(innercell);
                    innercell = new PdfPCell(new Phrase(StringUtils.defaultString(obj.getScheduleName()), f2));
                    innercell.setBorder(Rectangle.RIGHT);
                    innercell.setHorizontalAlignment(Element.ALIGN_LEFT);
                    innertable1.addCell(innercell);
                    innercell = new PdfPCell(new Phrase(StringUtils.defaultString(obj.getSchAmount()), f2));
                    innercell.setBorder(Rectangle.RIGHT);
                    innercell.setHorizontalAlignment(Element.ALIGN_RIGHT);
                    innertable1.addCell(innercell);
                    innercell = new PdfPCell();
                    innercell.setBorder(Rectangle.NO_BORDER);
                    innertable1.addCell(innercell);
                }
            }
            //end of third inner table under second inner table under second table for column 2
            maincell = new PdfPCell(innertable1);
            maincell.setBorder(Rectangle.NO_BORDER);
            maintable.addCell(maincell);
                    //end of fourth row under SECOND MAIN ROW

            //start of fifth row under SECOND MAIN ROW
            //start of inner table for fifth row under SECOND MAIN ROW
            innertable1 = new PdfPTable(3);
            innertable1.setWidths(new float[]{2.5f, 2, 1});
            innertable1.setWidthPercentage(100);

            innercell = new PdfPCell(new Phrase("Leave on average pay", f1));
            innercell.setBorder(Rectangle.NO_BORDER);
            innertable1.addCell(innercell);
            innercell = new PdfPCell(new Phrase("- LAP Under suspension", f1));
            innercell.setBorder(Rectangle.NO_BORDER);
            innertable1.addCell(innercell);
            innercell = new PdfPCell(new Phrase("- SP", f1));
            innercell.setBorder(Rectangle.NO_BORDER);
            innertable1.addCell(innercell);

            innercell = new PdfPCell(new Phrase("Leave on quarter average pay", f1));
            innercell.setBorder(Rectangle.NO_BORDER);
            innertable1.addCell(innercell);
            innercell = new PdfPCell(new Phrase("- LIP Vacant", f1));
            innercell.setBorder(Rectangle.NO_BORDER);
            innertable1.addCell(innercell);
            innercell = new PdfPCell(new Phrase("- A", f1));
            innercell.setBorder(Rectangle.NO_BORDER);
            innertable1.addCell(innercell);

            innercell = new PdfPCell(new Phrase("On other duty", f1));
            innercell.setBorder(Rectangle.NO_BORDER);
            innertable1.addCell(innercell);
            innercell = new PdfPCell(new Phrase("- OD Post Life Insurance", f1));
            innercell.setBorder(Rectangle.NO_BORDER);
            innertable1.addCell(innercell);
            innercell = new PdfPCell(new Phrase("- I", f1));
            innercell.setBorder(Rectangle.NO_BORDER);
            innertable1.addCell(innercell);

            innercell = new PdfPCell(new Phrase("Leave Salary", f1));
            innercell.setBorder(Rectangle.NO_BORDER);
            innertable1.addCell(innercell);
            innercell = new PdfPCell(new Phrase("- LS Last Pay Certificate", f1));
            innercell.setBorder(Rectangle.NO_BORDER);
            innertable1.addCell(innercell);
            innercell = new PdfPCell(new Phrase("- LP", f1));
            innercell.setBorder(Rectangle.NO_BORDER);
            innertable1.addCell(innercell);

            innercell = new PdfPCell(new Phrase("Conveyance allowance", f1));
            innercell.setBorder(Rectangle.NO_BORDER);
            innertable1.addCell(innercell);
            innercell = new PdfPCell(new Phrase("- CA Subsistence grant", f1));
            innercell.setBorder(Rectangle.NO_BORDER);
            innertable1.addCell(innercell);
            innercell = new PdfPCell(new Phrase("- Sub grant", f1));
            innercell.setBorder(Rectangle.NO_BORDER);
            innertable1.addCell(innercell);

            innercell = new PdfPCell(new Phrase("Transit pay", f1));
            innercell.setBorder(Rectangle.NO_BORDER);
            innertable1.addCell(innercell);
            innercell = new PdfPCell(new Phrase("- TP", f1));
            innercell.setBorder(Rectangle.NO_BORDER);
            innertable1.addCell(innercell);
            innercell = new PdfPCell(new Phrase("", f1));
            innercell.setBorder(Rectangle.NO_BORDER);
            innertable1.addCell(innercell);
            //end of inner table for fifth row under SECOND MAIN ROW
            maincell = new PdfPCell(innertable1);
            maincell.setBorder(Rectangle.RIGHT);
            maintable.addCell(maincell);

            //start of inner table for column 2 for fifth row under SECOND MAIN ROW
            innertable1 = new PdfPTable(3);
            innertable1.setWidths(new float[]{3, 1.5f, 0.5f});
            innertable1.setWidthPercentage(100);

            innercell = new PdfPCell(new Phrase("\n\nTotal deductions", f1));
            innercell.setBorder(Rectangle.RIGHT);
            innertable1.addCell(innercell);

            //innercell = new PdfPCell(new Phrase("\n\n" + StringUtils.defaultString(totDeductAmt[0] + ""), f1));
            innercell = new PdfPCell(new Phrase("\n\n" + Double.valueOf(deductAmt).longValue() + "", f1));
            innercell.setBorder(Rectangle.RIGHT | Rectangle.TOP | Rectangle.BOTTOM);
            innercell.setHorizontalAlignment(Element.ALIGN_RIGHT);
            innertable1.addCell(innercell);
            //innercell = new PdfPCell(new Phrase("\n\n" + StringUtils.defaultString(billFrForm.getDeductPaice()), f1));
            innercell = new PdfPCell();
            innercell.setBorder(Rectangle.TOP | Rectangle.BOTTOM);
            innercell.setHorizontalAlignment(Element.ALIGN_RIGHT);
            innertable1.addCell(innercell);

            innercell = new PdfPCell(new Phrase("\nNet Total", f1));
            innercell.setBorder(Rectangle.RIGHT);
            innertable1.addCell(innercell);
            innercell = new PdfPCell(new Phrase("\n" + StringUtils.defaultString(Double.valueOf(netAmt).longValue() + ""), f1));
            innercell.setBorder(Rectangle.RIGHT | Rectangle.TOP);
            innercell.setHorizontalAlignment(Element.ALIGN_RIGHT);
            innertable1.addCell(innercell);
            //innercell = new PdfPCell(new Phrase("\n" + StringUtils.defaultString(billFrForm.getNetPaice()), f1));
            innercell = new PdfPCell();
            innercell.setBorder(Rectangle.TOP);
            innercell.setHorizontalAlignment(Element.ALIGN_RIGHT);
            innertable1.addCell(innercell);
            //end of inner table for column 2 for fifth row under SECOND MAIN ROW
            maincell = new PdfPCell(innertable1);
            maincell.setBorder(Rectangle.NO_BORDER);
            maintable.addCell(maincell);
            //end of fifth row under SECOND MAIN ROW

            //start of sixth row under SECOND MAIN ROW
            maincell = new PdfPCell(new Phrase("\n  10. In cases where any fast one sesiocladeo in pay bill, a separate schepe showing the"
                    + " particulars of deduction relating to each fund should accompany the bill.", f1));
            maincell.setBorder(Rectangle.RIGHT | Rectangle.BOTTOM);
            maintable.addCell(maincell);
            maincell = new PdfPCell();
            maincell.setBorder(Rectangle.BOTTOM);
            maintable.addCell(maincell);
            //end of sixth row under SECOND MAIN ROW
            //END OF SECOND MAIN ROW

            //START OF THIRD MAIN ROW
            maincell = new PdfPCell(new Phrase("FOR THE USE OF THE ACCOUNT GENERAL'S OFFICE", new Font(Font.FontFamily.TIMES_ROMAN, 10, Font.BOLD)));
            maincell.setColspan(2);
            maincell.setBorder(Rectangle.NO_BORDER);
            maincell.setHorizontalAlignment(Element.ALIGN_CENTER);
            maintable.addCell(maincell);

            maincell = new PdfPCell(new Phrase("Admitted Rs.", new Font(Font.FontFamily.TIMES_ROMAN, 9, Font.BOLD)));
            maincell.setColspan(2);
            maincell.setBorder(Rectangle.NO_BORDER);
            maincell.setHorizontalAlignment(Element.ALIGN_LEFT);
            maintable.addCell(maincell);

            maincell = new PdfPCell(new Phrase("Object Rs.", new Font(Font.FontFamily.TIMES_ROMAN, 9, Font.BOLD)));
            maincell.setColspan(2);
            maincell.setBorder(Rectangle.NO_BORDER);
            maincell.setHorizontalAlignment(Element.ALIGN_LEFT);
            maintable.addCell(maincell);

            maincell = new PdfPCell(new Phrase("Auditor" + StringUtils.repeat(" ", 60) + "Superitendent", new Font(Font.FontFamily.TIMES_ROMAN, 9, Font.BOLD)));
            maincell.setBorder(Rectangle.NO_BORDER);
            maincell.setHorizontalAlignment(Element.ALIGN_LEFT);
            maintable.addCell(maincell);
            maincell = new PdfPCell(new Phrase("Gazetted Officer", new Font(Font.FontFamily.TIMES_ROMAN, 9, Font.BOLD)));
            maincell.setBorder(Rectangle.NO_BORDER);
            maincell.setHorizontalAlignment(Element.ALIGN_LEFT);
            maintable.addCell(maincell);

            maincell = new PdfPCell();
            maincell.setColspan(2);
            maincell.setFixedHeight(20);
            maincell.setBorder(Rectangle.BOTTOM);
            maintable.addCell(maincell);

            maincell = new PdfPCell(new Phrase("S.T.R. means Subsidiary Rules under the Orissa Treasury Rules.\nThe deduct entries relating to the Provident fund should be posted separately for the Sterling and Ordinary Brand as.", f1));
            maincell.setColspan(2);
            maincell.setBorder(Rectangle.NO_BORDER);
            maintable.addCell(maincell);
            //END OF THIRD MAIN ROW
            document.add(maintable);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
